#! /bin/sh
#
# $Id$
#
# Copyright (C) 1997-2000 by Dimitri van Heesch.
# 
# Permission to use, copy, modify, and distribute this software and its
# documentation under the terms of the GNU General Public License is hereby 
# granted. No representations are made about the suitability of this software 
# for any purpose. It is provided "as is" without express or implied warranty.
# See the GNU General Public License for more details.
# 
# Documents produced by Doxygen are derivative works derived from the
# input used in their production; they are not affected by this license.
# 
# shell script to configure doxygen

bin_dirs=`echo $PATH | sed -e "s/:/ /g"`

f_debug=NO
f_shared=YES
f_make=NO
f_dot=NO
f_perl=NO
f_plf_auto=NO
f_prefix=/usr
f_insttool=install
f_english=NO
f_configgen=NO
f_wizard=NO

while test -n "$1";  do
  case $1 in
    --prefix)
       shift; f_prefix=$1
       ;;
    --shared)
       f_shared=YES
       ;;
    --static)
       f_shared=NO
       ;;
    --release)
       f_debug=NO
       ;;
    --debug)
       f_debug=YES
       ;;
    --english-only)
       f_english=YES
       ;;
    --platform)
       shift; f_platform=$1
       ;;
    --make)
       shift; f_make=$1
       ;;
    --dot)
       shift; f_dot=$1
       ;;
    --perl)
       shift; f_perl=$1
       ;;
    --install)
       shift; f_insttool=$1
       ;;
    --with-configgen)
       f_configgen=YES
       ;;
    --with-doxywizard)
       f_wizard=YES
       ;;
    -h | -help | --help)
       f_help=y
       ;;
    *)
       echo $1: unknown argument
       f_help=y
       f_error=y
       ;;
  esac
  shift
done

if test "$f_help" = y; then
  cat <<EOF
Usage: $0 [--help] [--shared] [--static] [--release] [--debug] 
          [--perl name] [--make name] [--dot name] [--platform target] 
          [--prefix dir] [--install name] [--english-only] 
          [--with-configgen] [--with-doxywizard]

Options: 

  --help                Print this help

  --shared | --static   Build using shared or static linking
		        [default: shared]

  --release | --debug   Build for release or debug 
		        [default: release]

  --perl name           Use \`name' as the name of the perl interpreter 
		        [default: autodetect]

  --make name           Use \`name' as the name of the GNU make tool
		        [default: autodetect]

  --dot name            Use \`name' as the name of the dot tool that
                        is part of the Graphviz package.
                        [default: autodetect]

  --platform target     Do not detect platform but use \`target' instead.
                        See PLATFORMS for a list of possibilities

  --prefix dir          Installation prefix directory
                        [default: /usr]
  
  --install name        Use \`name' as the name of the GNU install tool
                        [default: install]

  --english-only        Include support for English only.

  --with-configgen      Build the configuration generator. This is only
                        useful for doxygen developers that want to add
                        new configuration options.

  --with-doxywizard     Build the GUI frontend for doxygen. This
                        requires Qt 2.x.x

EOF
  test "$f_error" = y && exit 1
  exit 0;
fi

u_release=`(uname -r) 2>/dev/null` || u_release=unknown
u_system=`(uname -s) 2>/dev/null` || u_system=unknown

if test -z "$f_platform"; then
  f_platforms="`cat PLATFORMS`"
  
  case "$u_system:$u_release" in
    AIX*)
      f_platform=aix-xlc
      ;;
    dgux:*)
      f_platform=dgux-g++
      ;;
    FreeBSD:*)
      f_platform=freebsd-g++
      ;;
    GNU:*)
      f_platform=gnu-g++
      ;;
    HP-UX:*)
      f_platform=hpux-g++
      ;;
    IRIX64:*)
      f_platform=irix-64
      ;;
    IRIX:*)
      f_platform=irix-n32
      ;;
    Linux:*)
      f_platform=linux-g++
      ;;
    NetBSD:*)
      f_platform=netbsd-g++
      ;;
    OpenBSD:*)
      f_platform=openbsd-g++
      ;;
    OSF1:*)
      f_platform=osf1-g++
      ;;
    QNX:*)
      f_platform=qnx-g++
      ;;
    *:3.2)
      f_platform=sco-g++
      ;;
    SunOS:4*)
      f_platform=sunos-g++
      ;;
    SunOS:5*)
      f_platform=solaris-cc
      ;;
    ULTRIX:*)
      f_platform=ultrix-g++
      ;;
    UNIX_SV:4.2*)
      f_platform=unixware-g++
      ;;
    *)
    echo
    echo "Your platform was not recognised by this configure script"
    echo "Please use the -platform option to specify one of platforms"
    echo "in this list:"
    echo
    for p in $f_platforms
    do
      echo "    $0 $* -platform $p"
    done
    echo
    exit 2
  esac 
  echo "  Autodetected platform $f_platform... "
  f_plf_auto=YES
fi

if test "$f_plf_auto" = NO; then
  echo -n "  Checking for platform $f_platform... "
  if test '!' -d tmake/lib/$f_platform; then
    echo "not supported!" 
    echo
    exit 2
  fi
  echo "supported"
fi

#- check for qt --------------------------------------------------------------
# 
# echo -n "  Checking for Qt..."
# if test -z "$QTDIR"; then
#   echo "QTDIR not set!"
#   echo
#   echo "tmake requires the QTDIR environment variable to be set."
#   echo "check your Qt installation!"
#   exit 2
# else
#   if test ! -d "$QTDIR/lib"; then
#     echo "QTDIR is set, but library directory does not exist!"
#     exit 2
#   fi
#   if test ! -d "$QTDIR/include"; then
#     echo "QTDIR is set, but include directory does not exist!"
#     exit 2
#   fi
#   echo " headers $QTDIR/include,"
#   echo "                     libraries $QTDIR/lib"  
# fi
#   
# - check for make ------------------------------------------------------------

echo -n "  Checking for GNU make tool... "
if test "$f_make" = NO; then
  make_names="gmake make"
  make_dirs="/usr/bin /usr/local/bin /bin /sbin $bin_dirs"
  make_prog=NO
  for i in $make_names; do
    for j in $make_dirs; do
      if test -x "$j/$i"; then
        if test -n "`$j/$i --version 2>/dev/null | grep GNU`"; then
          make_prog="$j/$i"
          break 2
        fi
      fi
    done
  done
  f_make="$make_prog" 
fi

if test "$f_make" = NO; then
  echo "not found!";
  echo
  exit 2
fi
echo "using $f_make"

# - check for dot ------------------------------------------------------------

echo -n "  Checking for dot (part of GraphViz)... "
if test "$f_dot" = NO; then
  dot_dirs="$bin_dirs"
  dot_prog=NO
  for j in $dot_dirs; do
    if test -x "$j/dot"; then
      dot_prog="$j/dot"
      break 2
    fi
  done
  f_dot="$dot_prog" 
fi

if test "$f_dot" = NO; then
  echo "not found!";
else
  echo "using $f_dot"
fi

# - check for perl ------------------------------------------------------------

echo -n "  Checking for perl... "
if test "$f_perl" = NO; then
  perl_names="perl perl5"
  perl_dirs="/usr/bin /usr/local/bin /bin /sbin $bin_dirs"
  perl_prog=NO
  perl_found=NO
  for i in $perl_names; do
    for j in $perl_dirs; do
      if test -x "$j/$i"; then
        perl_found=YES
        if $j/$i -e 'require 5.000;' 2>/dev/null ; then
          perl_prog="$j/$i"
          break 2
        fi
      fi
    done
  done
  f_perl="$perl_prog" 
fi

if test "$f_perl" = NO; then
  if test "$perl_found" = YES; then
    echo "version is too old (5.000 or higher is required)."
  else
    echo "not found!";
  fi
  echo
  exit 2
fi
echo "using $f_perl";

# -----------------------------------------------------------------------------

test -f .makeconfig && rm .makeconfig
test -f .tmakeconfig && rm .tmakeconfig

cat > .makeconfig <<EOF
DOXYGEN   = $PWD
TMAKEPATH = $PWD/tmake/lib/$f_platform
ENV       = env TMAKEPATH=\$(TMAKEPATH)
TMAKE     = $PWD/tmake/bin/tmake
MAKE      = $f_make
PERL      = $f_perl
RM        = rm -f
CP        = cp
VERSION   = `cat VERSION`
INSTALL   = $f_prefix
INSTTOOL  = $f_insttool
DOXYDOCS  = ..
EOF

if test "$f_dot" != NO; then
  cat >> .makeconfig <<EOF
HAVE_DOT  = $f_dot
EOF
fi

touch .tmakeconfig
if test "$f_shared" = NO; then
  if test "$f_platform" = "osf1-cxx" -o "$f_platform" = "irix-n32"; then
  cat >> .tmakeconfig <<EOF
    TMAKE_LFLAGS += -non_shared
EOF
  elif test "$f_platform" = "solaris-cc"; then
  cat >> .tmakeconfig <<EOF
    TMAKE_LFLAGS += -Bstatic
EOF
  elif test "$f_platform" = "hpux-cc"; then
  cat >> .tmakeconfig <<EOF
    TMAKE_LFLAGS += -noshared
EOF
  else
  cat >> .tmakeconfig <<EOF
    TMAKE_LFLAGS += -static
EOF
  fi
fi

if test "$f_english" = YES; then
  cat >> .tmakeconfig <<EOF
TMAKE_CXXFLAGS += -DENGLISH_ONLY
EOF
fi

f_inmakefiles="Makefile.in qtools/Makefile.in src/Makefile.in examples/Makefile.in doc/Makefile.in addon/configgen/Makefile.in addon/doxywizard/Makefile.in addon/xmlread/Makefile.in"

for i in $f_inmakefiles ; do
     SRC=$i
     DST=`echo $i|sed 's%\(.*\).in$%\1%'`
     TIME=`date`
     cat > $DST <<EOF
#
# This file was generated from `basename $i` on $TIME
#

EOF
     cat .makeconfig $SRC >> $DST
     if test $i = Makefile.in; then
       echo "configgen:" >> $DST
       if test $f_configgen = YES; then
         echo "	\$(MAKE) -C addon/configgen" >> $DST
       fi
       echo "doxywizard:" >> $DST
       if test $f_wizard = YES; then
         echo "	\$(MAKE) -C addon/doxywizard" >> $DST
       fi
       echo "doxywizard_install:" >> $DST
       if test $f_wizard = YES; then
         echo "	\$(MAKE) -C addon/doxywizard install" >> $DST
       fi
     fi
     echo "  Created $DST from $SRC..."
done

f_inprofiles="qtools/qtools.pro.in src/doxygen.pro.in src/doxytag.pro.in src/doxysearch.pro.in addon/configgen/configgen.pro.in addon/doxywizard/doxywizard.pro.in addon/xmlread/xmlread.pro.in" 

for i in $f_inprofiles ; do
     SRC=$i
     DST=`echo $i|sed 's%\(.*\).in$%\1%'`
     TIME=`date`
     cat > $DST <<EOF
#
# This file was generated from `basename $i` on $TIME
#

EOF
     if test "$f_debug" = NO; then
       cat $SRC .tmakeconfig | sed -e "s/\$extraopts/release/g" >> $DST
     else
       cat $SRC .tmakeconfig | sed -e "s/\$extraopts/debug/g" >> $DST
     fi
     echo "  Created $DST from $SRC..."
done

