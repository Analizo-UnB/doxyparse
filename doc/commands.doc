/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2000 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*! \page commands

\section commands Special Commands

All commands in the documentation start with a backslash (<b>\\</b>) or an
at-sign (<b>\@</b>). If you prefer you can replace all commands starting with a 
backslash below, by their counterparts that start with an at-sign.

Some commands have one or more arguments. 
Each argument has a certain range:
<ul>
<li>If <sharp> braces are used the argument is a single word.
<li>If (round) braces are used the argument extends until the end of the line
    on which the command was found.
<li>If {curly} braces are used the argument extends until the next paragraph.
    Paragraphs are delimited by a blank line or by a section indicator.
</ul>
If [square] brackets are used the argument is optional.

Here is an alphabetically sorted list of all commands with references to their 
documentation:
\htmlonly
<multicol cols=4>
<ul>
\endhtmlonly
\latexonly
\begin{multicols}{3}
\begin{CompactList}
\endlatexonly
<li> \refitem cmda \a
<li> \refitem cmdaddindex \addindex
<li> \refitem cmdanchor \anchor
<li> \refitem cmdarg \arg
<li> \refitem cmdattention \attention
<li> \refitem cmdauthor \author
<li> \refitem cmdb \b
<li> \refitem cmdbrief \brief
<li> \refitem cmdbug \bug
<li> \refitem cmdc \c
<li> \refitem cmdclass \class
<li> \refitem cmdcode \code
<li> \refitem cmddate \date
<li> \refitem cmddef \def
<li> \refitem cmddefgroup \defgroup
<li> \refitem cmddeprecated \deprecated
<li> \refitem cmddontinclude \dontinclude
<li> \refitem cmde \e
<li> \refitem cmdem \em
<li> \refitem cmdendcode \endcode
<li> \refitem cmdendhtmlonly \endhtmlonly
<li> \refitem cmdendif \endif
<li> \refitem cmdendlatexonly \endlatexonly
<li> \refitem cmdendlink \endlink
<li> \refitem cmdendverbatim \endverbatim
<li> \refitem cmdenum \enum
<li> \refitem cmdexample \example
<li> \refitem cmdexception \exception
<li> \refitem cmdfdollar \f$
<li> \refitem cmdfbropen \f[
<li> \refitem cmdfbrclose \f]
<li> \refitem cmdfile \file
<li> \refitem cmdfn \fn
<li> \refitem cmdhideinitializer \hideinitializer
<li> \refitem cmdhtmlonly \htmlonly
<li> \refitem cmdif \if
<li> \refitem cmdimage \image
<li> \refitem cmdinclude \include
<li> \refitem cmdingroup \ingroup
<li> \refitem cmdinternal \internal
<li> \refitem cmdinvariant \invariant
<li> \refitem cmdlatexonly \latexonly
<li> \refitem cmdli \li
<li> \refitem cmdline \line
<li> \refitem cmdlink \link
<li> \refitem cmdmainpage \mainpage
<li> \refitem cmdname \name
<li> \refitem cmdnamespace \namespace
<li> \refitem cmdnosubgrouping \nosubgrouping
<li> \refitem cmdnote \note
<li> \refitem cmdoverload \overload
<li> \refitem cmdp \p
<li> \refitem cmdpage \page
<li> \refitem cmdpar \par
<li> \refitem cmdparam \param
<li> \refitem cmdpost \post
<li> \refitem cmdpre \pre
<li> \refitem cmdref \ref
<li> \refitem cmdrelates \relates
<li> \refitem cmdremarks \remarks
<li> \refitem cmdreturn \return
<li> \refitem cmdretval \retval
<li> \refitem cmdsa \sa
<li> \refitem cmdsection \section
<li> \refitem cmdshowinitializer \showinitializer
<li> \refitem cmdsince \since
<li> \refitem cmdskip \skip
<li> \refitem cmdskipline \skipline
<li> \refitem cmdstruct \struct
<li> \refitem cmdsubsection \subsection
<li> \refitem cmdtest \test
<li> \refitem cmdthrow \throw
<li> \refitem cmdtodo \todo
<li> \refitem cmdtypedef \typedef
<li> \refitem cmdunion \union
<li> \refitem cmduntil \until
<li> \refitem cmdvar \var
<li> \refitem cmdverbatim \verbatim
<li> \refitem cmdverbinclude \verbinclude
<li> \refitem cmdversion \version
<li> \refitem cmdwarning \warning
<li> \refitem cmddollar \$
<li> \refitem cmdat \@
<li> \refitem cmdbackslash \\
<li> \refitem cmdamp \&
<li> \refitem cmdlt \\<
<li> \refitem cmdgt \\>
<li> \refitem cmdhash \#
\htmlonly
</ul>
</multicol>
\endhtmlonly
\latexonly
\end{CompactList}
\end{multicols}
\endlatexonly

The following subsections provide a list of all commands that are recognized by
Doxygen. Unrecognized commands are treated as normal text.

<h2>\htmlonly <center> --- \endhtmlonly 
    Structural indicators
    \htmlonly --- </center>\endhtmlonly</h2>

\subsection cmdclass \class <name> [<header-file>] [<header-name>]

  \addindex \class
  Indicates that a comment block contains documentation for a
  class with name \<name\>. Optionally a header file and a header name 
  can be specified. If the header-file is specified, a link to a verbatim copy 
  of the header will be included in the HTML documentation. 
  The \<header-name\> argument can be used to overwrite the 
  name of the link that is used in the class documentation to something other 
  than \<header-file\>. This can be useful if the include name is not located 
  on the default include path (like \<X11/X.h\>). With the \<header-name\>
  argument you can also specify how the include statement should look like, 
  by adding either quotes or sharp brackets around the name. 
  Sharp brackets are used if just the name is given.
  
  \par Example: 
  \verbinclude class.h  
  \htmlonly
  Click <a href="$(DOXYGEN_DOCDIR)/examples/class/html/index.html">here</a> 
  for the corresponding HTML documentation that is generated by Doxygen.
  \endhtmlonly

<hr>
\subsection cmddef \def <name>

  \addindex \def
  Indicates that a comment block contains documentation for a 
  \c #define macro. 

  \par Example:
  \verbinclude define.h  
  \htmlonly
  Click <a href="$(DOXYGEN_DOCDIR)/examples/define/html/define_h.html">here</a> 
  for the corresponding HTML documentation that is generated by Doxygen.
  \endhtmlonly

<hr>
\subsection cmddefgroup \defgroup <name> (group title)

  \addindex \defgroup
  Indicates that a comment block contains documentation for a
  \ref modules "group" of classes, files or namespaces. This can be used to
  categorize classes, files or namespaces, and document those
  categories. You can also uses groups as members of other groups,
  thus building a hierarchy of groups.

  The \<name\> argument should an single word identifier.
  
  \sa section \ref cmdingroup "\\ingroup"

<hr>

\subsection cmdenum \enum <name>

  \addindex \enum
  Indicates that a comment block contains documentation for an 
  enumeration, with name \<name\>. If the enum is a member of a class and
  the documentation block is located outside the class definition,
  the scope of the class should be specified as well.
  If a comment block is located directly in front of an enum declaration,
  the \\enum comment may be omitted.

  \par Note:
  The type of an anonymous enum cannot be documented, but the values 
  of an anonymous enum can.
  
  \par Example:
  \verbinclude enum.h  
  \htmlonly
  Click <a href="$(DOXYGEN_DOCDIR)/examples/enum/html/class_test.html">here</a> 
  for the corresponding HTML documentation that is generated by Doxygen.
  \endhtmlonly

<hr>
\subsection cmdexample \example <file-name>
  
  \addindex \example
  Indicates that a comment block contains documentation for a source code 
  example. The name of the source file is \<file-name\>. The text of
  this file will be included in the documentation, just after the 
  documentation contained in the comment block. All examples are placed
  in a list. The source code is scanned for documented members and classes.
  If any are found, the names are cross-referenced with the documentation. 
  Source files or directories can be specified using the 
  \ref cfg_example_path "EXAMPLE_PATH" 
  tag of Doxygen's configuration file.

  If \<file-name\> itself is not unique for the set of example files specified
  by the 
  \ref cfg_example_path "EXAMPLE_PATH" tag, you can include part of the absolute path
  to disambiguate it.

  If more that one source file is needed for the example,
  the \\include command can be used.

  \par Example:
  \verbinclude example.cpp
  Where the example file \c example_test.cpp looks as follows:
  \verbinclude example_test.cpp
  \htmlonly
  Click <a href="$(DOXYGEN_DOCDIR)/examples/example/html/examples.html">here</a> 
  for the corresponding HTML documentation that is generated by Doxygen.
  \endhtmlonly

  \sa section \ref cmdinclude "\\include".

<hr>
\subsection cmdfile \file [<name>]
  
  \addindex \file
  Indicates that a comment block contains documentation for a source or 
  header file with name \<name\>. The file name may include (part of) the
  path if the file-name alone is not unique. If the file name is omitted
  (i.e. the line after \\file is left blank) then the documentation block that 
  contains the \\file command will belong to the file it is located in.

  \par Important:
  The documentation of global functions, variables, typedefs, and enums will 
  only be included in the output if the file they are in is documented as well.

  \par Example:
  \verbinclude file.h  
  \htmlonly
  Click <a href="$(DOXYGEN_DOCDIR)/examples/file/html/file_h.html">here</a> 
  for the corresponding HTML documentation that is generated by Doxygen.
  \endhtmlonly

<hr>
\subsection cmdfn \fn (function declaration)
 
  \addindex \fn
  Indicates that a comment block contains documentation for a function
  (either global or as a member of a class). This command is needed if a 
  comment block is \e not located before the function declaration 
  or definition. A full function declaration should be specified after the
  \\fn command. The argument ends at the end of the line.

  \par Example:
  \verbinclude func.h  
  \htmlonly
  Click <a href="$(DOXYGEN_DOCDIR)/examples/func/html/class_test.html">here</a> 
  for the corresponding HTML documentation that is generated by Doxygen.
  \endhtmlonly

  \sa section \ref cmdvar "\\var" and \ref cmdtypedef "\\typedef".

<hr>
\subsection cmdhideinitializer \hideinitializer

  \addindex \hideinitializer
  By default the value of a define and the initializer of a variable
  are displayed unless they are longer than 30 lines. By putting
  this command in a comment block of a define or variable, the 
  initializer always hidden.

  \sa section \ref cmdshowinitializer "\\showinitializer".

<hr>
\subsection cmdingroup \ingroup (<groupname> [<groupname> <groupname>])

  \addindex \ingroup
  If the \\ingroup command is placed in a comment block of a
  class, file or namespace, then it will be added to the group or
  groups identified by \<groupname\>.

  \sa section \ref cmddefgroup "\\defgroup".

<hr>
\subsection cmdinternal \internal
  
  \addindex \internal
  This command writes the message `For internal use only' to the output.
  All text after a \c \internal command is ignored.

<hr>
\subsection cmdmainpage \mainpage [(title)]

  \addindex \mainpage

  If the \\mainpage command is placed in a comment block the 
  block is used to customize the index page (in HTML) or
  the first chapter (in \f$\mbox{\LaTeX}\f$). 

  The title argument is optional and replaces the default title that
  doxygen normally generates.

  Here is an example:
\verbatim
/*! \mainpage My Personal Index Page
 *
 * \section intro Introduction
 *
 * This is the introduction.
 *
 * \section install Installation
 *
 * \subsection step1 Step 1: Opening the box
 *  
 * etc...
 */
\endverbatim

 \sa section \ref cmdsection "\\section", 
     section \ref cmdsubsection "\\subsection" and 
     section \ref cmdpage "\\page".

<hr>
\subsection cmdname \name (header)  

This command turns a comment block into a header
definition of a member group. The
comment block should be followed by a 
<code>//@{ ... //@}</code> block containing the
members of the group.

See section \ref memgroup for an example.

<hr>
\subsection cmdnamespace \namespace <name> 

  \addindex \namespace
  Indicates that a comment block contains documentation for a
  namespace with name \<name\>. 
  
<hr>
\subsection cmdnosubgrouping \nosubgrouping

This command can be put in the documentation
of a class. It can be used in combination with member grouping
to avoid that doxygen puts a member group as a subgroup of a
Public/Protected/Private/... section.

<hr>
\subsection cmdoverload \overload [(function declaration)]

  \addindex \overload
  This command can be used to generate the following 
  standard text for an overloaded member function:

   `This is an overloaded member function, provided for convenience. 
    It differs from the above function only in what argument(s) it accepts.'

  If the documentation for the overloaded member function is not located
  in front of the function declaration or definition, the optional 
  argument should be used to specify the correct function.
 
  Any other documentation that is inside the documentation block will
  by appended after the generated message.

  \par Note 1:
    You are responsible that there is indeed an
    earlier documented member that is overloaded by this one.
    To prevent that document reorders the documentation you should set
    \ref cfg_sort_member_docs "SORT_MEMBER_DOCS" to NO in this case.
  \par Note 2:
    The \\overload command does not work inside a one-line comment.
  \par Example:
  \verbinclude examples/overload.cpp
  \htmlonly
  Click <a href="$(DOXYGEN_DOCDIR)/examples/overload/html/class_test.html">here</a> 
  for the corresponding HTML documentation that is generated by Doxygen.
  \endhtmlonly

<hr>
\subsection cmdpage \page <name> (title)

  \addindex \page
  Indicates that a comment block contains a piece of documentation that is
  not directly related to one specific class, file or member. 
  The HTML generator creates a page containing the documentation. The
  \htmlonly LaTeX\endhtmlonly\latexonly\LaTeX\ \endlatexonly generator 
  starts a new section in the chapter `Page documentation'.
  
  \par Example:
  \verbinclude page.doc  
  \htmlonly
  Click <a href="$(DOXYGEN_DOCDIR)/examples/page/html/pages.html">here</a> 
  for the corresponding HTML documentation that is generated by Doxygen.
  \endhtmlonly

  \par Note: 
     The \<name\> argument consists of a combination of letters and number
     digits. If you wish to use upper case letters (e.g. \c MYPAGE1), or 
     mixed case letters (e.g. \c MyPage1) in the \<name\> argument, you 
     should set \c CASE_SENSE_NAMES to \c YES. However, this is advisable 
     only if your file system is case sensitive. Otherwise (and for better 
     portability) you should use all lower case letters (e.g. \c mypage1) 
     for \<name\> in all references to the page.
  
  \sa section \ref cmdsection "\\section", section 
              \ref cmdsubsection "\\subsection", and section 
              \ref cmdref "\\ref".

<hr>
\subsection cmdrelates \relates <name>

  \addindex \relates
  This command can be used in the documentation of a non-member function
  \<name\>. It puts the function inside the `related function' section 
  of the class documentation. This command is useful for documenting 
  non-friend functions that are nevertheless strongly coupled to a certain
  class. It prevents the need of having to document a file, but
  only works for functions.  

  \par Example:
  \verbinclude relates.cpp  
  \htmlonly
  Click <a href="$(DOXYGEN_DOCDIR)/examples/relates/html/class_string.html">here</a> 
  for the corresponding HTML documentation that is generated by Doxygen.
  \endhtmlonly

<hr>
\subsection cmdshowinitializer \showinitializer

  \addindex \showinitializer
  By default the value of a define and the initializer of a variable
  are only displayed if they are less than 30 lines long. By putting
  this command in a comment block of a define or variable, the 
  initializer is shown unconditionally.

  \sa section \ref cmdhideinitializer "\\hideinitializer".

<hr>
\subsection cmdstruct \struct <name> [<header-file>] [<header-name>]

  \addindex \struct
  Indicates that a comment block contains documentation for a
  struct with name \<name\>. The arguments are equal to the \\class
  command.

  \sa section \ref cmdclass "\\class".

<hr>
\subsection cmdtypedef \typedef (typedef declaration)

  \addindex \typedef
  Indicates that a comment block contains documentation for a typedef,
  typedef (either global or as a member of a class). 
  This command is equivalent to \\var and \\fn.

  \sa section \ref cmdfn "\\fn" and \ref cmdvar "\\var".

<hr>
\subsection cmdunion \union <name> [<header-file>] [<header-name>]

  \addindex \union
  Indicates that a comment block contains documentation for a
  union with name \<name\>. The arguments are equal to the \\class
  command.

  \sa section \ref cmdclass "\\class".

<hr>
\subsection cmdvar \var (variable declaration)

  \addindex \var
  Indicates that a comment block contains documentation for a variable,
  enum value (either global or as a member of a class). 
  This command is equivalent to \\typedef and \\fn.

  \sa section \ref cmdfn "\\fn" and \ref cmdtypedef "\\typedef".

<hr>

<h2>\htmlonly <center> --- \endhtmlonly 
    Section indicators
    \htmlonly --- </center>\endhtmlonly</h2>

<hr>
\subsection cmdattention \attention { attention text }

  \addindex \attention
  Starts a paragraph where a message that needs attention may be entered. 
  The paragraph will be indented. 
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.
  Multiple adjacent \\attention commands will be joined into a single paragraph.
  The \\attention command ends when a blank line or some other 
  sectioning command is encountered. 

\subsection cmdauthor \author { list of authors }

  \addindex \author
  Starts a paragraph where one or more author names may be entered. 
  The paragraph will be indented. 
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.
  Multiple adjacent \\author commands will be joined into a single paragraph
  and separated by commas. Alternatively, one \\author command may mention 
  several authors. The \\author command ends when a blank line or some other 
  sectioning command is encountered.

  \par Example:
  \verbinclude author.cpp  
  \htmlonly
  Click <a href="$(DOXYGEN_DOCDIR)/examples/author/html/class_windowsnt.html">here</a> 
  for the corresponding HTML documentation that is generated by Doxygen.
  \endhtmlonly

<hr>
\subsection cmdbrief \brief {brief description}

  \addindex \brief
  Starts a paragraph that serves as a brief description. For classes and files
  the brief description will be used in lists and at the start of the
  documentation page. For class and file members, the brief description
  will be placed at the declaration of the member and prepended to the
  detailed description. A brief description may span several lines (although
  it is advised to keep it brief!). A brief description ends when a 
  blank line or another sectioning command is encountered. If multiple
  \\brief commands are present they will be joined. See section 
  \ref cmdauthor "\\author" for an example. 

  Synonymous to \\short.
 
<hr>
\subsection cmdbug \bug { bug description }

  \addindex \bug
  Starts a paragraph where one or more bugs may be reported. 
  The paragraph will be indented. 
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.
  Multiple adjacent \\bug commands will be joined into a single paragraph.
  Each bug description will start on a new line.
  Alternatively, one \\bug command may mention 
  several bugs. The \\bug command ends when a blank line or some other 
  sectioning command is encountered. See section \ref cmdauthor "\\author"
  for an example.

<hr>
\subsection cmddate \date { date description }

  \addindex \date
  Starts a paragraph where one or more dates may be entered. 
  The paragraph will be indented. 
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.
  Multiple adjacent \\date commands will be joined into a single paragraph.
  Each date description will start on a new line.
  Alternatively, one \\date command may mention 
  several dates. The \\date command ends when a blank line or some other 
  sectioning command is encountered. See section \ref cmdauthor "\\author" 
  for an example.

<hr>
\subsection cmddeprecated \deprecated { description }

  \addindex \deprecated
  Starts a paragraph indicating that this documentation block belongs to
  a deprecated entity. Can be used to describe alternatives, 
  expected life span, etc.


<hr>
\subsection cmdendif \endif 

  \addindex \endif
  Ends a conditional section that was started with \c \if.
  For each \c \if one and only one matching \c \endif must follow.

  \sa \ref cmdif "\\if"

<hr>
\subsection cmdexception \exception <exception-object> { exception description }

  \addindex \exception
  Starts an exception description for an exception object with name 
  \<exception-object\>. Followed by a description of the exception. 
  The existence of the exception object is not checked.
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.
  Multiple adjacent \\exception commands will be joined into a single paragraph.
  Each parameter description will start on a new line.
  The \\exception description ends when a blank line or some other 
  sectioning command is encountered. See section \ref cmdfn "\\fn" for an 
  example.

  \par Note: 
  the tag \\exceptions is a synonym for this tag.

<hr>
\subsection cmdif \if <section-label>

  \addindex \if
  Starts a conditional documentation section. The section ends 
  with a matching \c \endif command. A conditional section is
  disable by default. To enable it you must put the
  section-label after the \ref cfg_enabled_sections "ENABLED_SECTIONS" 
  tag in the configuration
  file. Conditional blocks can be nested. A nested section is
  only enabled if all enclosing sections are enabled as well.

  \par Example:
\verbatim
  /*! Uncoditionally shown documentation.
   *  \if Cond1
   *    Only included if Cond1 is set.
   *  \endif
   *  \if Cond2
   *    Only included if Cond2 is set.
   *    \if Cond3
   *      Only included if Cond2 and Cond3 are set.
   *    \endif
   *    More text.
   *  \endif
   *  Unconditional text.
   */
\endverbatim  

  \sa section \ref cmdendif "\\endif".

<hr>
\subsection cmdinvariant \invariant { description of invariant }

  \addindex \invariant
  Starts a paragraph where the invariant of an entity can be described.
  The paragraph will be indented. 
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.
  Multiple adjacent \\invariant commands will be joined into a single paragraph.
  Each invariant description will start on a new line.
  Alternatively, one \\invariant command may mention 
  several invariants. The \\invariant command ends when a blank line or some other 
  sectioning command is encountered.

<hr>
\subsection cmdnote \note { text }

  \addindex \note
  Starts a paragraph where a note can be entered. The paragraph will be 
  indented. The text of the paragraph has no special internal structure. 
  All visual enhancement commands may be used inside the paragraph.
  Multiple adjacent \\note commands will be joined into a single paragraph.
  Each note description will start on a new line.
  Alternatively, one \\note command may mention 
  several notes. The \\note command ends when a blank line or some other 
  sectioning command is encountered. See section \ref cmdpar "\\par" 
  for an example.

<hr>
\subsection cmdpar \par [(paragraph title)] { paragraph }

  \addindex \par
  If a paragraph title is given this command starts a paragraph with a 
  user defined heading. The heading extends until the end of the
  line. The paragraph following the command will be indented.

  If no paragraph title is given this command will start a new paragraph.
  This will also work inside other paragraph commands 
  (like \\param or \\warning) without ending the that command. 
 
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.
  The \\par command ends when a blank line or some other 
  sectioning command is encountered. 

  \par Example:
  \verbinclude par.cpp  
  \htmlonly
  Click <a href="$(DOXYGEN_DOCDIR)/examples/par/html/class_test.html">here</a> 
  for the corresponding HTML documentation that is generated by Doxygen.
  \endhtmlonly

<hr>
\subsection cmdparam \param <parameter-name> { parameter description }

  \addindex \param
  Starts a parameter description for a function parameter with name 
  \<parameter-name\>. Followed by a description of the parameter. 
  The existence of the parameter is not checked.
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.
  Multiple adjacent \\param commands will be joined into a single paragraph.
  Each parameter description will start on a new line.
  The \\param description ends when a blank line or some other 
  sectioning command is encountered. See section \ref cmdfn "\\fn" for an 
  example.

<hr>
\subsection cmdpost \post { description of the postcondition }

  \addindex \post
  Starts a paragraph where the postcondition of an entity can be described.
  The paragraph will be indented. 
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.
  Multiple adjacent \\post commands will be joined into a single paragraph.
  Each postcondition will start on a new line.
  Alternatively, one \\post command may mention 
  several postconditions. The \\post command ends when a blank line or some other 
  sectioning command is encountered.

<hr>
\subsection cmdpre \pre { description of the precondition }

  \addindex \pre
  Starts a paragraph where the precondition of an entity can be described.
  The paragraph will be indented. 
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.
  Multiple adjacent \\pre commands will be joined into a single paragraph.
  Each precondition will start on a new line.
  Alternatively, one \\pre command may mention 
  several preconditions. The \\pre command ends when a blank line or some other 
  sectioning command is encountered.
  
<hr>
\subsection cmdremarks \remarks { remark text }

  \addindex \remarks
  Starts a paragraph where one or more marks may be entered. 
  The paragraph will be indented. 
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.
  Multiple adjacent \\remark commands will be joined into a single paragraph.
  Each remark will start on a new line.
  Alternatively, one \\remark command may mention 
  several remarks. The \\remark command ends when a blank line or some other 
  sectioning command is encountered. 

<hr>
\subsection cmdreturn \return { description of the return value }

  \addindex \return
  Starts a return value description for a function. 
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.
  Multiple adjacent \\return commands will be joined into a single paragraph.
  The \\return description ends when a blank line or some other 
  sectioning command is encountered. See section \ref cmdfn "\\fn" for an 
  example.
  
<hr>
\subsection cmdretval \retval <return value> { description }

  \addindex \retval
  Starts a return value for a function with name 
  \<return value\>. Followed by a description of the return value. 
  The text of the paragraph that forms the description has no special
  internal structure. All visual enhancement commands may be used inside the 
  paragraph.
  Multiple adjacent \\retval commands will be joined into a single paragraph.
  Each return value description will start on a new line.
  The \\retval description ends when a blank line or some other 
  sectioning command is encountered. 

<hr>
\subsection cmdsa \sa { references }

  \addindex \sa
  Starts a paragraph where one or more cross-references to classes, 
  functions, methods, variables, files or URL may be specified.
  Two names joines by either <code>::</code> or <code>\#</code> 
  are understood as referring to a class and one of its members. 
  One of several overloaded methods or constructors 
  may be selected by including a parenthesized list of argument types after 
  the method name. 

  Synonymous to \\see.

  \sa section \ref autolink "autolink" for information on how to create links 
      to objects.

<hr>
\subsection cmdsince \since { text }

  \addindex \since
  This tag can be used to specify since when (version or time) an
  entity is available. The paragraph that follows \\since does not have any
  special internal structure. All visual enhancement commands may be 
  used inside the paragraph. The \\since description ends when a blank 
  line or some other sectioning command is encountered. 

<hr>
\subsection cmdtest \test { paragraph describing a test case }

  \addindex \test
  Starts a paragraph where a test case can be described. 
  The description will also add the test case to a separate test list. 
  The two instances of the description will be cross-referenced.
  Each test case in the test list will be preceded by a header that
  indicates the origin of the test case.

<hr>
\subsection cmdthrow \throw <exception-object> { exception description }

  \addindex \throw
  Synonymous to \\exception (see section \ref cmdexception "\\exception").

  \par Note: 
  the tag \\throws is a synonym for this tag.

<hr>
\subsection cmdtodo \todo { paragraph describing what is to be done }

  \addindex \todo
  Starts a paragraph where a TODO item is described. 
  The description will also add an item to a separate TODO list. 
  The two instances of the description will be cross-referenced.
  Each item in the TODO list will be preceded by a header that
  indicates the origin of the item.

<hr>
\subsection cmdversion \version { version number }

  \addindex \version
  Starts a paragraph where one or more version strings may be entered. 
  The paragraph will be indented. 
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.
  Multiple adjacent \\version commands will be joined into a single paragraph.
  Each version description will start on a new line.
  Alternatively, one \\version command may mention 
  several version strings. 
  The \\version command ends when a blank line or some other 
  sectioning command is encountered. See section \ref cmdauthor "\\author" 
  for an example.
 
<hr>
\subsection cmdwarning \warning { warning message }

  \addindex \warning
  Starts a paragraph where one or more warning messages may be entered. 
  The paragraph will be indented. 
  The text of the paragraph has no special internal structure. All visual
  enhancement commands may be used inside the paragraph.
  Multiple adjacent \\warning commands will be joined into a single paragraph.
  Each warning description will start on a new line.
  Alternatively, one \\warning command may mention 
  several warnings. The \\warning command ends when a blank line or some other 
  sectioning command is encountered. See section \ref cmdauthor "\\author" 
  for an example.

<hr>
<h2>\htmlonly <center> --- \endhtmlonly 
    Commands to create links
    \htmlonly --- </center>\endhtmlonly</h2>

\subsection cmdaddindex \addindex (text)

  \addindex \addindex
  This command adds (text) to the \f$\mbox{\LaTeX}\f$ index.

<hr>
\subsection cmdanchor \anchor <word>

  \addindex \anchor
  This command places an invisble, named anchor into to documentation
  to which you can refer with the \\ref command.

  \sa section \ref cmdref "\\ref".

<hr>
\subsection cmdendlink \endlink

  \addindex \endlink 
  This command ends a link that is started with the \\link command.
  
  \sa section \ref cmdlink "\\link".

<hr>
\subsection cmdlink \link <link-object> 

  \addindex \link
  The links that are automatically generated by Doxygen always have the
  name of the object they point to as link-text. 

  The \\link command can be used to create a link to an object (a file, 
  class, or member) with a user specified link-text. 
  The link command should end with an \\endlink command. All text between
  the \\link and \\endlink commands serves as text for a link to 
  the \<link-object\> specified as the first argument of \\link.
  
  See section \ref autolink "autolink" for more information on automatically 
  generated links and valid link-objects.

<hr>
\subsection cmdref \ref <name> ["(text)"]

  \addindex \ref
  Creates a reference to a named section, subsection, page or anchor.
  For HTML documentation the reference command will generate a link to 
  the section. For a sections or subsections the title of the section will be 
  used as the text of the link. For anchor the optional text between quotes
  will be used or \<name\> if no text is specified.
  For \f$\mbox{\LaTeX}\f$ documentation the reference command will 
  generate a section number for sections or the text followed by a 
  page number if \<name\> refers to an anchor.

  \sa
    Section \ref cmdpage "\\page" for an example of the \\ref command.

<hr>
\subsection cmdsection \section <section-name> (section title)
  
  \addindex \section
  Creates a section with name \<section-name\>. The title of the
  section should be specified as the second argument of the \\section 
  command.

  \warning This command only works inside related page documentation and
           \e not in other documentation blocks!

  \sa 
    Section \ref cmdpage "\\page" for an example of the 
            \ref cmdsection "\\section" command.

<hr>
\subsection cmdsubsection \subsection <subsection-name> (subsection title)

  \addindex \subsection
  Creates a subsection with name \<subsection-name\>. The title of the
  subsection should be specified as the second argument of the \\subsection
  command.

  \warning This command only works inside related page documentation and
           \e not in other documentation blocks!

  \sa
   Section \ref cmdpage "\\page" for an example of the 
           \ref cmdsubsection "\\cmdsubsection" command.

<hr>

<h2>\htmlonly <center> --- \endhtmlonly 
    Commands for displaying examples
    \htmlonly --- </center>\endhtmlonly</h2>

\subsection cmddontinclude \dontinclude <file-name>

  \addindex \dontinclude
  This command can be used to parse a source file without actually 
  verbatim including it in the documentation (as the \\include command does). 
  This is useful if you want to divide the source file into smaller pieces and
  add documentation between the pieces.
  Source files or directories can be specified using the 
  \ref cfg_example_path "EXAMPLE_PATH" 
  tag of Doxygen's configuration file.

  The class and member declarations and definitions inside the code fragment
  are `remembered' during the parsing of the comment block that contained 
  the \\dontinclude command. 

  For line by line descriptions of source files, one or more lines 
  of the example can be displayed using the \\line, \\skip, \\skipline, and 
  \\until commands. An internal pointer is used for these commands. The
  \\dontinclude command sets the pointer to the first line of the example.

  \par Example:
  \verbinclude include.cpp
  Where the example file \c example_test.cpp looks as follows:
  \verbinclude example_test.cpp
  \htmlonly
  Click <a href="$(DOXYGEN_DOCDIR)/examples/include/html/example.html">here</a> 
  for the corresponding HTML documentation that is generated by Doxygen.
  \endhtmlonly

  \sa sections \ref cmdline "\\line", \ref cmdskip "\\skip", 
               \ref cmdskipline "\\skipline", and \ref cmduntil "\\until".

<hr>
\subsection cmdinclude \include <file-name>

  \addindex \include
  This command can be used to include a source file as a block of code.
  The command takes the name of an include file as an argument. 
  Source files or directories can be specified using the 
  \ref cfg_example_path "EXAMPLE_PATH" 
  tag of Doxygen's configuration file.

  If \<file-name\> itself is not unique for the set of example files specified
  by the 
  \ref cfg_example_path "EXAMPLE_PATH" tag, you can include part 
  of the absolute path to disambiguate it.

  Using the \\include command is equivalent to inserting the file into 
  the documentation block and surrounding it 
  with \ref cmdcode "\\code" and \ref cmdendcode "\\endcode" commands.

  The main purpose of the \\include command is to avoid code 
  duplication in case of example blocks that consist of multiple
  source and header files.

  For a line by line description of a source files use the 
  \ref cmddontinclude "\\dontinclude" command in combination with 
  the \ref cmdline "\\line", \ref cmdskip "\\skip", 
  \ref cmdskipline "\\skipline", 
  and \\until commands. 

  \sa section \ref cmdexample "\\example" and \ref cmddontinclude "\\dontinclude".

<hr>
\subsection cmdline \line ( pattern )

  \addindex \line
  This command searches line by line through the example that was last
  included using \\include or \\dontinclude until it finds a non-blank
  line. If that line contains the specified pattern, it is written 
  to the output.
  
  The internal pointer that is used to keep track of the current line in
  the example, is set to the start of the line following the non-blank
  line that was found (or to the end of the example if no such line could
  be found).

  See section \ref cmddontinclude "\\dontinclude" for an example.

<hr>
\subsection cmdskip \skip ( pattern )

  \addindex \skip
  This command searches line by line through the example that was last
  included using \\include or \\dontinclude until it finds a line that contains
  the specified pattern. 
  
  The internal pointer that is used to keep track of the current line in
  the example, is set to the start of the line that contains the specified
  pattern (or to the end of the example if the pattern could not be found). 

  See section \ref cmddontinclude "\\dontinclude" for an example.

<hr>
\subsection cmdskipline \skipline ( pattern ) 

  \addindex \skipline
  This command searches line by line through the example that was last
  included using \\include or \\dontinclude until it finds a line that contains
  the specified pattern. It then writes the line to the output.
  
  The internal pointer that is used to keep track of the current line in
  the example, is set to the start of the line following the line that is
  written (or to the end of the example if the pattern could not be found). 

  \par Note:
    The command:
    \verbatim\skipline pattern\endverbatim 
    is equivalent to:
\verbatim
\skip pattern
\line pattern\endverbatim

  See section \ref cmddontinclude "\\dontinclude" for an example.

<hr>
\subsection cmduntil \until ( pattern )

  \addindex \until
  This command writes all lines of the example that was last
  included using \\include or \\dontinclude to the output, until it finds 
  a line containing the specified pattern. The line containing the pattern
  will be written as well.
  
  The internal pointer that is used to keep track of the current line in
  the example, is set to the start of the line following last written
  line (or to the end of the example if the pattern could not be found).

  See section \ref cmddontinclude "\\dontinclude" for an example.

<hr>
\subsection cmdverbinclude \verbinclude <file-name>

  \addindex \verbinclude
  This command includes the file \<file-name\> verbatim in the documentation.
  The command is equivalent to pasting the file in the documentation and
  placing \\verbatim and \\endverbatim commands around it. 

<hr>
<h2>\htmlonly <center> --- \endhtmlonly 
    Commands for visual enhancements
    \htmlonly --- </center>\endhtmlonly</h2>

\subsection cmda \a <word>
 
  \addindex \a
  Displays the argument \<word\> using a special font.
  Use this command to refer to member arguments in the running text.

  \par Example:
  \verbatim
  ... the \a x and \a y coordinates are used to ...
  \endverbatim 
  This will result in the following text:<br><br>
  ... the \a x and \a y coordinates are used to ...

<hr>
\subsection cmdarg \arg { item-description }
  
  \addindex \arg
  This command has one argument that continues until the first
  blank line or until another \\arg is encountered.
  The command can be used to generate a simple, not nested list of
  arguments. 
  Each argument should start with a \\arg command.
  
  \par Example:
  Typing:
  \verbatim
  \arg \c AlignLeft left alignment.
  \arg \c AlignCenter center alignment.
  \arg \c AlignRight right alignment
  
  No other types of alignment are supported.
  \endverbatim
  will result in the following text:<br><br>
  <ul>
  <li> \c AlignLeft left alignment.
  <li> \c AlignCenter center alignment.
  <li> \c AlignRight right alignment
  </ul><br>
  No other types of alignment are supported.

  \par Note:
  For nested lists, HTML commands should be used.

  Equivalent to \ref cmdli "\\li"


<hr>
\subsection cmdb \b <word>

  \addindex \b
  Displays the argument \<word\> using a bold font.
  Equivalent to \<b\>word\</b\>.
  
<hr>
\subsection cmdc \c <word>

  \addindex \c
  Displays the argument \<word\> using a typewriter font.
  Use this to refer to a word of code.
  Equivalent to \<tt\>word\</tt\>.

  \par Example:
  Typing:
  \verbatim
     ... This function returns \c void and not \c int ...
  \endverbatim
  will result in the following text:<br><br>
     ... This function returns \c void and not \c int ...

  Equivalent to \ref cmdp "\\p"

<hr>
\subsection cmdcode \code

  \addindex \code
  Starts a block of code. A code block is treated differently
  from ordinary text. It is interpreted as C/C++ code. The names of the
  classes and members that are documented are automatically replaced by 
  links to the documentation. 

  \sa section \ref cmdendcode "\\endcode", section \ref cmdverbatim "\\verbatim"  

<hr>
\subsection cmde \e <word>

  \addindex \e 
  Displays the argument \<word\> in italics.
  Use this command to emphasize words.

  \par Example:
  Typing:
  \verbatim
  ... this is a \e really good example ... 
  \endverbatim
  will result in the following text:<br><br>
  ... this is a \e really good example ...

  Equvalent to \ref cmdem "\\em"

<hr>
\subsection cmdem \em <word>

  \addindex \e 
  Displays the argument \<word\> in italics.
  Use this command to emphasize words.

  \par Example:
  Typing:
  \verbatim
  ... this is a \em really good example ... 
  \endverbatim
  will result in the following text:<br><br>
  ... this is a \em really good example ...

  Equivalent to \ref cmde "\\e"

<hr>
\subsection cmdendcode \endcode

  \addindex \endcode
  Ends a block of code.
  \sa section \ref cmdcode "\\code"
 
<hr>
\subsection cmdendhtmlonly \endhtmlonly

  \addindex \endhtmlonly
  Ends a block of text that was started with a \\htmlonly command.

  \sa section \ref cmdhtmlonly "\\htmlonly".

<hr>
\subsection cmdendlatexonly \endlatexonly

  \addindex \endlatexonly
  Ends a block of text that was started with a \\latexonly command.

  \sa section \ref cmdlatexonly "\\latexonly".

<hr>
\subsection cmdendverbatim \endverbatim

  \addindex \endverbatim
  Ends a block of text that was started with a \\verbatim command.
  
  \sa section \ref cmdverbatim "\\verbatim".

<hr>
\subsection cmdfdollar \f$

  \addindex \f$

  Marks the start and end of an in-text formula. 
  \sa section \ref formulas "formulas" for an example.
  
<hr>
\subsection cmdfbropen \f[

  \addindex \f[

  Marks the start of a long formula that is displayed 
  centered on a separate line.
  \sa section \ref cmdfbrclose "\\f]" and section \ref formulas "formulas".

<hr>
\subsection cmdfbrclose \f]

  \addindex \f]
  
  Marks the end of a long formula that is displayed
  centered on a separate line.
  \sa section \ref cmdfbropen ""\\f[" and section \ref formulas "formulas".

<hr>
\subsection cmdhtmlonly \htmlonly

  \addindex \htmlonly
  Starts a block of text that will be verbatim included in the
  generated HTML documentation only. The block ends with a
  endhtmlonly command.

  This command can be used to include HTML code that is too complex
  for Doxygen (i.e. applets, java-scripts, and HTML tags that
  require attributes). You can use the \\latexonly and \\endlatexonly
  pair to provide a proper \f$\mbox{\LaTeX}\f$ alternative.

  \b Note:
    environment variables (like \$(HOME) ) are resolved inside a 
    HTML-only block.

  \sa section \ref cmdhtmlonly "\\htmlonly" and section 
              \ref cmdlatexonly "\\latexonly".

<hr>
\subsection cmdimage \image <format> <file> ["<caption>"] [<sizeindication>=<size>]

  \addindex \image
  Inserts an image into the documentation. This command is format
  specific, so if you want to insert an image for more than one
  format you'll have to repeat this command for each format.

  The first argument specifies the output format. Currently, the 
  following values are supported: \c html and \c latex.
  
  The second argument specifies the file name of the image. 
  Doxygen will look for files in the paths (or files) that you specified 
  after the \ref cfg_image_path "IMAGE_PATH" tag. 
  If the image is found it will be copied to the correct output directory.
  If the image name contains spaces you'll have to put quotes (") around it.
  You can also specify an absolute URL instead of a file name, but then
  doxygen does not copy the image or check its existance.

  The third argument is optional and can be used to specify the caption
  that is displayed below the image. This argument has to be specified
  between quotes even if it does not contain any spaces. The quotes are
  stripped before the caption is displayed.

  The fourth argument is also optional and can be used to specify the 
  width or height of the image. This is only useful 
  for \f$\mbox{\LaTeX}\f$ output
  (i.e. format=<code>latex</code>). The \c sizeindication can be 
  either \c width or \c height. The size should be a valid 
  size specifier in \f$\mbox{\LaTeX}\f$ (for example <code>10cm</code> or 
  <code>6in</code> or a symbolic width like <code>\\textwidth</code>).

  Here is example of a comment block:

\verbatim
  /*! Here is a snapshot of my new application:
   *  \image html application.jpg
   *  \image latex application.eps "My application" width=10cm
   */
\endverbatim

  And this is an example of how the relevant part of the configuration file 
  may look:

\verbatim
  IMAGE_PATH     = my_image_dir
\endverbatim

  \warning The image format for HTML is limited to what your
           browser supports. For \f$\mbox{\LaTeX}\f$ the image format
           must be an encapsulated postscipt (eps).
           <br><br>
           Doxygen does not check if the image is in the correct format. 
           So \e you have to make sure this is the case!

<hr>
\subsection cmdlatexonly \latexonly

  \addindex \latexonly
  Starts a block of text that will be verbatim included in the
  generated \f$\mbox{\LaTeX}\f$ documentation only. The block ends with a
  endlatexonly command.

  This command can be used to include \f$\mbox{\LaTeX}\f$ code that is too 
  complex for Doxygen (i.e. images, formulas, special characters). You can 
  use the \\htmlonly and \\endhtmlonly pair to provide a proper HTML 
  alternative.

  \b Note:
    environment variables (like \$(HOME) ) are resolved inside a 
    \f$\mbox{\LaTeX}\f$-only block.

  \sa section \ref cmdlatexonly "\\latexonly" 
  and section \ref cmdhtmlonly "\\htmlonly".

<hr>
\subsection cmdli \li { item-description }
  
  \addindex \li
  This command has one argument that continues until the first
  blank line or until another \\li is encountered.
  The command can be used to generate a simple, not nested list of
  arguments. 
  Each argument should start with a \\li command.
  
  \par Example:
  Typing:
  \verbatim
  \li \c AlignLeft left alignment.
  \li \c AlignCenter center alignment.
  \li \c AlignRight right alignment
  
  No other types of alignment are supported.
  \endverbatim
  will result in the following text:<br><br>
  <ul>
  <li> \c AlignLeft left alignment.
  <li> \c AlignCenter center alignment.
  <li> \c AlignRight right alignment
  </ul><br>
  No other types of alignment are supported.

  \par Note:
  For nested lists, HTML commands should be used.

  Equivalent to \ref cmdarg "\\arg"

<hr>
\subsection cmdp \p <word>
 
  \addindex \p
  Displays the parameter \<word\> using a typewriter font.
  You can use this command to refer to member function parameters in 
  the running text.

  \par Example:
  \verbatim
  ... the \p x and \p y coordinates are used to ...
  \endverbatim 
  This will result in the following text:<br><br>
  ... the \p x and \p y coordinates are used to ...

  Equivalent to \ref cmdc "\\c"
 
<hr>
\subsection cmdverbatim \verbatim

  \addindex \verbatim
  Starts a block of text that will be verbatim included in both the
  HTML and the 
  \f$\mbox{\LaTeX}\f$ documentation. The block should end with a 
  \\endverbatim block. All commands are disabled in a verbatim block.

  \warning Make sure you include a \\endverbatim command for each 
  \\verbatim command or the parser will get confused!

<hr>
\subsection cmdbackslash \\

  \addindex \\
  This command writes a backslash character (\\) to the HTML and 
  \f$\mbox{\LaTeX}\f$ output. The backslash has to be escaped in some 
  cases because Doxygen uses it to detect commands.

<hr>
\subsection cmdat \@

  \addindex \@
  This command writes an at-sign (@) to the HTML and 
  \f$\mbox{\LaTeX}\f$ output. The at-sign has to be escaped in some cases 
  because Doxygen uses it to detect JavaDoc commands.

<hr>
\subsection cmdamp \&

  \addindex \&
  This command writes the \& character to the HTML and 
  \f$\mbox{\LaTeX}\f$ output. This character has to be escaped because 
  it has a special meaning in HTML.

<hr>
\subsection cmddollar \$

  \addindex \$
  This command writes the \$ character to the HTML and 
  \f$\mbox{\LaTeX}\f$ output. This 
  character has to be escaped in some cases, because it is used to expand 
  environment variables.

<hr>
\subsection cmdhash \#

  \addindex \#
  This command writes the \# character to the HTML and 
  \f$\mbox{\LaTeX}\f$ output. This 
  character has to be escaped in some cases, because it is used to refer
  to documented entities. 

<hr>
\subsection cmdlt \\<

  \addindex \\<
  This command writes the \< character to the HTML and 
  \f$\mbox{\LaTeX}\f$ output. This 
  character has to be escaped because it has a special meaning in HTML.

<hr>
\subsection cmdgt \\>

  \addindex \\>
  This command writes the \> character to the HTML and 
  \f$\mbox{\LaTeX}\f$ output. This 
  character has to be escaped because it has a special meaning in HTML.

<hr>
<h2>\htmlonly <center> --- \endhtmlonly 
    Commands included for Qt compatibility
    \htmlonly --- </center>\endhtmlonly</h2>

The following commands are supported to remain compatible to the Qt class
browser generator. Do \e not use these commands in your own documentation.
<ul>
<li>\\annotatedclasslist
<li>\\classhierarchy
<li>\\define
<li>\\functionindex
<li>\\header
<li>\\headerfilelist
<li>\\inherit
<li>\\l
<li>\\postheader
</ul>

*/
