/******************************************************************************
 *
 * $Id$
 *
 * Copyright (C) 1997-2000 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * All output generated with Doxygen is not covered by this license.
 *
 */
/*! \page config

\section config Configuration

\subsection config_format Format

A configuration file is a free-form ASCII text file with a structure that
is similar to that of a Makefile. It is parsed by a 
recursive-descent parser that is built into \c doxygen.
The file may contain tabs and newlines for formatting purposes.
The statements in the file are case-sensitive.
Comments may be placed anywhere within the file (except within quotes).
Comments begin with the \# character and end at the end of the 
line.

The file essentially consists of a list of assignment statements.
Each statement consists of a \c TAG_NAME written in capitals,
followed by the \c = character and one or more values.
Values are sequences of non-blanks. If the value should contain one or more
blanks it must be surrounded by quotes (&quot;...&quot;).
Multiple lines can be concatenated by inserting a backslash (\\)
as the last character of a line.
Environment variables can expanded using the pattern \c $(ENV_VARIABLE_NAME).

The configuration options can be divided into several categories.
Below is an alphabetical index of the tags that are recognized 
followed by the descriptions of the tags grouped by category.

\htmlonly
<multicol cols=3>
<ul>
\endhtmlonly
\latexonly
\footnotesize
\begin{multicols}{3}
\begin{CompactList}
\endlatexonly
<li> \refitem cfg_allexternals ALLEXTERNALS 
<li> \refitem cfg_alphabetical_index ALPHABETICAL_INDEX 
<li> \refitem cfg_bin_abspath BIN_ABSPATH 
<li> \refitem cfg_brief_member_desc BRIEF_MEMBER_DESC 
<li> \refitem cfg_case_sense_names CASE_SENSE_NAMES 
<li> \refitem cfg_cgi_name CGI_NAME 
<li> \refitem cfg_cgi_url CGI_URL 
<li> \refitem cfg_class_diagrams CLASS_DIAGRAMS 
<li> \refitem cfg_collaboration_graph COLLABORATION_GRAPH
<li> \refitem cfg_cols_in_alpha_index COLS_IN_ALPHA_INDEX
<li> \refitem cfg_compact_latex COMPACT_LATEX 
<li> \refitem cfg_compact_rtf COMPACT_RTF
<li> \refitem cfg_disable_index DISABLE_INDEX 
<li> \refitem cfg_doc_abspath DOC_ABSPATH 
<li> \refitem cfg_doc_url DOC_URL
<li> \refitem cfg_enable_preprocessing ENABLE_PREPROCESSING
<li> \refitem cfg_example_path EXAMPLE_PATH
<li> \refitem cfg_example_patterns EXAMPLE_PATTERNS
<li> \refitem cfg_exclude EXCLUDE
<li> \refitem cfg_exclude_patterns EXCLUDE_PATTERNS
<li> \refitem cfg_expand_only_predef EXPAND_ONLY_PREDEF
<li> \refitem cfg_ext_doc_paths EXT_DOC_PATHS
<li> \refitem cfg_extra_packages EXTRA_PACKAGES
<li> \refitem cfg_extract_all EXTRACT_ALL
<li> \refitem cfg_extract_private EXTRACT_PRIVATE
<li> \refitem cfg_file_patterns FILE_PATTERNS
<li> \refitem cfg_full_path_names FULL_PATH_NAMES
<li> \refitem cfg_generate_html GENERATE_HTML
<li> \refitem cfg_generate_htmlhelp GENERATE_HTMLHELP
<li> \refitem cfg_generate_latex GENERATE_LATEX
<li> \refitem cfg_generate_man GENERATE_MAN
<li> \refitem cfg_generate_rtf GENERATE_RTF
<li> \refitem cfg_generate_tagfile GENERATE_TAGFILE
<li> \refitem cfg_graphical_hierarchy GRAPHICAL_HIERARCHY
<li> \refitem cfg_have_dot HAVE_DOT
<li> \refitem cfg_hide_undoc_classes HIDE_UNDOC_CLASSES
<li> \refitem cfg_hide_undoc_members HIDE_UNDOC_MEMBERS
<li> \refitem cfg_html_align_members HTML_ALIGN_MEMBERS
<li> \refitem cfg_html_footer HTML_FOOTER
<li> \refitem cfg_html_header HTML_HEADER
<li> \refitem cfg_html_output HTML_OUTPUT
<li> \refitem cfg_html_stylesheet HTML_STYLESHEET
<li> \refitem cfg_ignore_prefix IGNORE_PREFIX
<li> \refitem cfg_image_path IMAGE_PATH
<li> \refitem cfg_include_graph INCLUDE_GRAPH
<li> \refitem cfg_include_path INCLUDE_PATH
<li> \refitem cfg_inherit_docs INHERIT_DOCS
<li> \refitem cfg_inline_info INLINE_INFO
<li> \refitem cfg_inline_sources INLINE_SOURCES
<li> \refitem cfg_input INPUT
<li> \refitem cfg_input_filter INPUT_FILTER
<li> \refitem cfg_internal_docs INTERNAL_DOCS
<li> \refitem cfg_javadoc_autobrief JAVADOC_AUTOBRIEF
<li> \refitem cfg_latex_header LATEX_HEADER
<li> \refitem cfg_latex_output LATEX_OUTPUT
<li> \refitem cfg_macro_expansion MACRO_EXPANSION
<li> \refitem cfg_man_extension MAN_EXTENSION
<li> \refitem cfg_man_output MAN_OUTPUT
<li> \refitem cfg_output_directory OUTPUT_DIRECTORY
<li> \refitem cfg_output_language OUTPUT_LANGUAGE
<li> \refitem cfg_paper_type PAPER_TYPE
<li> \refitem cfg_perl_path PERL_PATH
<li> \refitem cfg_predefined PREDEFINED
<li> \refitem cfg_project_name PROJECT_NAME
<li> \refitem cfg_project_number PROJECT_NUMBER
<li> \refitem cfg_quiet QUIET
<li> \refitem cfg_recursive RECURSIVE
<li> \refitem cfg_repeat_brief REPEAT_BRIEF
<li> \refitem cfg_search_includes SEARCH_INCLUDES
<li> \refitem cfg_searchengine SEARCHENGINE
<li> \refitem cfg_source_browser SOURCE_BROWSER
<li> \refitem cfg_strip_from_path STRIP_FROM_PATH
<li> \refitem cfg_rtf_hyperlinks RTF_HYPERLINKS
<li> \refitem cfg_rtf_output RTF_OUTPUT
<li> \refitem cfg_tab_size TAB_SIZE
<li> \refitem cfg_tagfiles TAGFILES
<li> \refitem cfg_verbatim_headers VERBATIM_HEADERS
<li> \refitem cfg_warnings WARNINGS
\htmlonly
</ul>
</multicol>
\endhtmlonly
\latexonly
\end{CompactList}
\end{multicols}
\normalsize
\endlatexonly

\subsection config_general General options
<dl>

\anchor cfg_project_name
<dt>\c PROJECT_NAME <dd>
 \addindex PROJECT_NAME
 The \c PROJECT_NAME tag is a single word (or a sequence of words
 surrounded by double-quotes) that should identify the project for which the 
 documentation is generated. This name is used in the title of most 
 generated pages and in a few other places.

\anchor cfg_project_number
<dt>\c PROJECT_NUMBER <dd>
 \addindex PROJECT_NUMBER
 The \c PROJECT_NUMBER tag can be used to enter a project or revision number.
 This could be handy for archiving the generated documentation or
 if some version control system is used.

\anchor cfg_output_directory
<dt>\c OUTPUT_DIRECTORY <dd> 
 \addindex OUTPUT_DIRECTORY
 The \c OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
 path into which the generated HTML and Latex documentation will be written. 
 If a relative path is entered, it will be relative to the location 
 where doxygen was started. If left blank the current directory will be used.

\anchor cfg_output_language
<dt>\c OUTPUT_LANGUAGE <dd>
 \addindex OUTPUT_LANGUAGE
 The \c OUTPUT_LANGUAGE tag is used to specify the language in which all
 documentation generated by doxygen is written. Doxygen will use this
 information to generate all constant output in the proper language.
 The default language is English, other supported languages are:
 Dutch, French, Italian, Czech, Swedish, German and Japanese.

\anchor cfg_quiet
<dt>\c QUIET <dd>
 \addindex QUIET
 The \c QUIET tag can be used to turn on/off the messages that are generated
 to standard output by doxygen. Possible values are \c YES and \c NO, 
 where \c YES implies that the messages are off.
 If left blank \c NO is used.

\anchor cfg_warnings
<dt>\c WARNINGS <dd>
 \addindex WARNINGS
 The \c WARNINGS tag can be used to turn on/off the warning messages that are
 generated to standard error by doxygen. Possible values are \c YES and \c NO, 
 where \c YES implies that the warnings are on. If left blank \c NO is used.

 \b Tip: Turn warnings on while writing the documentation.

\anchor cfg_disable_index
<dt>\c DISABLE_INDEX <dd>
 \addindex DISABLE_INDEX
 If you want full control over the layout of the generated HTML pages it
 might be necessary to disable the index and replace it with your own.
 The DISABLE_INDEX tag can be used to turn on/off the condensed index at
 top of each page. A value of NO (the default) enables the index and the
 value YES disables it.

\anchor cfg_extract_all
<dt>\c EXTRACT_ALL <dd>
 \addindex EXTRACT_ALL
 If the \c EXTRACT_ALL tag is set to \c YES all classes and functions will be
 included in the documentation, even if no documentation was available.

 \par Note: 
 This will also disable the warnings about undocumented members 
 that are normally produced when \c WARNINGS is set to \c YES

\anchor cfg_extract_private
<dt>\c EXTRACT_PRIVATE <dd>
 \addindex EXTRACT_PRIVATE
 If the \c EXTRACT_PRIVATE tag is set to \c YES all
 documentation for private members will be extracted as well.

\anchor cfg_hide_undoc_members
<dt>\c HIDE_UNDOC_MEMBERS <dd>
 \addindex HIDE_UNDOC_MEMBERS
 If the \c HIDE_UNDOC_MEMBERS tag is set to \c YES, Doxygen will hide all
 undocumented members inside documented classes or files. 
 If set to \c NO (the default) these members will be included in the
 various overviews, but no documentation section is generated.

\anchor cfg_hide_undoc_classes
<dt>\c HIDE_UNDOC_CLASSES <dd>
 \addindex HIDE_UNDOC_CLASSES
 If the \c HIDE_UNDOC_CLASSESS tag is set to \c YES, Doxygen will hide all
 undocumented classes.
 If set to \c NO (the default) these classes will be included in the
 various overviews.

\anchor cfg_brief_member_desc
<dt>\c BRIEF_MEMBER_DESC <dd>
 \addindex BRIEF_MEMBER_DESC
 If the \c BRIEF_MEMBER_DESC tag is set to \c YES (the default) Doxygen will
 include brief member descriptions after the members that are listed in
 the file and class documentation (similar to JavaDoc).
 Set to NO to disable this.

\anchor cfg_internal_docs
<dt>\c INTERNAL_DOCS <dd>
 \addindex INTERNAL_DOCS
 The \c INTERNAL_DOCS tag determines if documentation
 that is typed after a \\internal command is included. If the tag is set
 to \c NO (the default) then the documentation will be excluded.
 Set it to \c YES to include the internal documentation.

\anchor cfg_repeat_brief
<dt>\c REPEAT_BRIEF <dd>
 \addindex REPEAT_BRIEF
 If the \c REPEAT_BRIEF tag is set to \c YES (the default) Doxygen will 
 prepend the brief description of a member or function before the detailed 
 description 

 \par Note: 
 If both \c HIDE_UNDOC_MEMBERS and \c BRIEF_MEMBER_DESC are set to \c NO, the 
 brief descriptions will be completely suppressed.

\anchor cfg_full_path_names
<dt>\c FULL_PATH_NAMES <dd>
 \addindex FULL_PATH_NAMES
 If the \c FULL_PATH_NAMES tag is set to \c YES Doxygen will prepend the full
 path before files name in the file list and in the header files. If set
 to NO the shortest path that makes the file name unique will be used

\anchor cfg_strip_from_path
<dt>\c STRIP_FROM_PATH <dd>
 \addindex STRIP_FROM_PATH
 If the \c FULL_PATH_NAMES tag is set to \c YES then the \c STRIP_FROM_PATH tag
 can be used to strip a user defined part of the path. Stripping is
 only done if one of the specified strings matches the left-hand part of the 
 path.

\anchor cfg_class_diagrams
<dt>\c CLASS_DIAGRAMS <dd>
 \addindex CLASS_DIAGRAMS
 If the \c CLASS_DIAGRAMS tag is set to \c YES (the default) Doxygen will
 generate a class diagram (in Html and \f$\mbox{\LaTeX}\f$) for classes with base or
 super classes. Setting the tag to \c NO turns the diagrams off.

\anchor cfg_source_browser
<dt>\c SOURCE_BROWSER <dd>
 \addindex SOURCE_BROWSER
 If the \c SOURCE_BROWSER tag is set to \c YES then a list of source files will
 be generated. Documented entities will be cross-referenced with these sources.

\anchor cfg_inline_sources
<dt>\c INLINE_SOURCES <dd>
 \addindex INLINE_SOURCES
 Setting the \c INLINE_SOURCES tag to \c YES will include the body
 of functions, classes and enums directly into the documentation.

\anchor cfg_case_sense_names
<dt>\c CASE_SENSE_NAMES <dd>
 \addindex CASE_SENSE_NAMES
 If the \c CASE_SENSE_NAMES tag is set to \c NO (the default) then Doxygen
 will only generate file names in lower case letters. If set to
 \c YES upper case letters are also allowed. This is useful if you have
 classes or files whose names only differ in case and if your file system
 supports case sensitive file names.

\anchor cfg_verbatim_headers
<dt>\c VERBATIM_HEADERS <dd>
 \addindex VERBATIM_HEADERS
  If the \c VERBATIM_HEADERS tag is set the \c YES (the default) then Doxygen
  will generate a verbatim copy of the header file for each class for
  which an include is specified. Set to NO to disable this.
  \sa Section \ref cmdclass "\\class".

\anchor cfg_javadoc_autobrief
<dt>\c JAVADOC_AUTOBRIEF <dd>
 \addindex JAVADOC_AUTOBRIEF
  If the \c JAVADOC_AUTOBRIEF is set to \c YES (the default) then Doxygen
  will interpret the first line (until the first dot) of a JavaDoc-style
  comment as the brief description. If set to NO, the Javadoc-style will
  behave just like the Qt-style comments.

\anchor cfg_inherit_docs
<dt>\c INHERIT_DOCS <dd>
 \addindex INHERIT_DOCS
 If the \c INHERIT_DOCS tag is set to \c YES (the default) then an undocumented
 member inherits the documentation from any documented member that it
 reimplements.

\anchor cfg_inline_info
<dt>\c INLINE_INFO <dd>
 If the \c INLINE_INFO tag is set to \c YES (the default) then a tag [inline]
 is inserted in the documentation for inline members.

\anchor cfg_tab_size
<dt>\c TAB_SIZE <dd>
  the TAB_SIZE tag can be used to set the number of spaces in a tab.
  Doxygen uses this value to replace tabs by spaces in code fragments.

</dl>

\subsection config_input Input related options
<dl>

\anchor cfg_input
<dt>\c INPUT <dd>
 \addindex INPUT
 The \c INPUT tag is used to specify the files and/or directories that contain 
 documented source files. You may enter file names like 
 \c myfile.cpp or directories like \c /usr/src/myproject. 
 Separate the files or directories with spaces.<br>

 \b Note: 
 This tag (and only this tag) is \e required.

\anchor cfg_file_patterns
<dt>\c FILE_PATTERNS <dd>
 \addindex FILE_PATTERNS
 If the value of the \c INPUT tag contains directories, you can use the 
 \c FILE_PATTERNS tag to specify one or more wildcard patterns 
 (like \c *.cpp and \c *.h ) to filter out the source-files 
 in the directories. If left blank all files are included 
 (i.e. wildcard <tt>*</tt>).

\anchor cfg_recursive
<dt>\c RECURSIVE <dd>
 \addindex RECURSIVE
 The \c RECURSIVE tag can be used to specify whether or not subdirectories
 should be searched for input files as well. Possible values are \c YES 
 and \c NO.  If left blank \c NO is used.

\anchor cfg_exclude
<dt>\c EXCLUDE <dd>
 \addindex EXCLUDE
 The \c EXCLUDE tag can be used to specify files and/or directories that should
 excluded from the \c INPUT source files. This way you can easily exclude a
 subdirectory from a directory tree whose root is specified with the \c INPUT tag.

\anchor cfg_exclude_patterns
<dt>\c EXCLUDE_PATTERNS <dd>
 \addindex EXCLUDE_PATTERNS
 If the value of the INPUT tag contains directories, you can use the
 \c EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude
 certain files from those directories.

\anchor cfg_example_path
<dt>\c EXAMPLE_PATH <dd>
 \addindex EXAMPLE_PATH
 The \c EXAMPLE_PATH tag can be used to specify one or more files or
 directories that contain example code fragments that are included (see
 the \\include command in section \ref cmdinclude "\\include").

\anchor cfg_example_patterns
<dt>\c EXAMPLE_PATTERNS <dd>
 \addindex EXAMPLE_PATTERNS
 If the value of the \c EXAMPLE_PATH tag contains directories, you can use the
 \c EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp
 and *.h) to filter out the source-files in the directories. If left
 blank all files are included.

\anchor cfg_image_path
<dt>\c IMAGE_PATH <dd>
 \addindex IMAGE_PATH
 The \c IMAGE_PATH tag can be used to specify one or more files or
 directories that contain images that are to be included in the 
 documentation (see the \ref cmdimage "\image" command).

\anchor cfg_input_filter
<dt>\c INPUT_FILTER <dd>
 \addindex INPUT_FILTER
 The \c INPUT_FILTER tag can be used to specify a program that doxygen should
 invoke to filter for each input file. Doxygen will invoke the filter program
 by executing (via popen()) the command:
\verbatim <filter> <input-file>
\endverbatim
 
 where \<filter\>
 is the value of the \c INPUT_FILTER tag, and \<input-file\> is the name of an
 input file. Doxygen will then use the output that the filter program writes
 to standard output.

</dl>

\subsection html_output HTML related options
<dl>

\anchor cfg_generate_html
<dt>\c GENERATE_HTML <dd>
 \addindex GENERATE_HTML
 If the \c GENERATE_HTML tag is set to \c YES (the default) Doxygen will
 generate HTML output

\anchor cfg_html_output
<dt>\c HTML_OUTPUT <dd>
 \addindex HTML_OUTPUT
 The \c HTML_OUTPUT tag is used to specify where the HTML docs will be put.
 If a relative path is entered the value of \c OUTPUT_DIRECTORY will be
 put in front of it. If left blank `html' will be used as the default path.

\anchor cfg_html_header
<dt>\c HTML_HEADER <dd>      
 \addindex HTML_HEADER
 The \c HTML_HEADER tag can be used to specify a user defined HTML 
 header file for each generated HTML page. To get valid HTML the header file
 should contain at least a \c <HTML> and a \c <BODY> tag. Example:
\verbatim
  <HTML>
    <HEAD>
      <TITLE>My title</TITLE>
      <LINK HREF="doxygen.css" REL="stylesheet" TYPE="text/css">
    </HEAD>
    <BODY BGCOLOR="#FFFFFF">
\endverbatim
 If the tag is left blank doxygen will generate a 
 standard header. 

 The following commands have a special meaning inside the header:
 <code>\$title</code>, <code>\$datetime</code>, <code>\$date</code>,
 <code>\$doxygenversion</code>, <code>\$projectname</code>, 
 <code>\$projectnumber</code>. 
 Doxygen will replace them by respectively 
 the title of the page, the current date and time, only the current date,
 the version number of doxygen, the project name (see PROJECT_NAME), or the
 project number (see PROJECT_NUMBER).
   
\anchor cfg_html_footer
<dt>\c HTML_FOOTER <dd>
 \addindex HTML_FOOTER
 The \c HTML_FOOTER tag can be used to specify a user defined HTML footer for 
 each generated HTML page. To get valid HTML the header file should contain
 at least a \c </BODY> and a \c </HTML> tag.  Example:
\verbatim
    </BODY>
  </HTML>
\endverbatim
 If the tag is left blank doxygen will generate a standard footer.

 The following commands have a special meaning inside the header:
 <code>\$title</code>, <code>\$datetime</code>, <code>\$date</code>,
 <code>\$doxygenversion</code>, <code>\$projectname</code>, 
 <code>\$projectnumber</code>. 
 Doxygen will replace them by respectively 
 the title of the page, the current date and time, only the current date,
 the version number of doxygen, the project name (see PROJECT_NAME), or the
 project number (see PROJECT_NUMBER).
   

\anchor cfg_html_stylesheet
<dt>\c HTML_STYLESHEET <dd>
 \addindex HTML_STYLESHEET
 The \c HTML_STYLESHEET tag can be used to specify a user defined cascading
 style sheet that is used by each HTML page. It can be used to
 fine-tune the look of the HTML output. If the tag is left blank doxygen
 will generate a default style sheet. Here is the default style sheet
 that doxygen normally generates:

\verbatim
H1 { text-align: center }
A.qindex {}
A.qindexRef {}
A.el { text-decoration: none; font-weight: bold }
A.elRef { font-weight: bold }
A.code { text-decoration: none; font-weight: normal; color: #4444ee }
A.codeRef { font-weight: normal; color: #4444ee }
A.gl:link { color: #ffffff }
A.gl:visited { color: #ffffff }
A.gl { text-decoration: none; font-weight: bold; background-color: #ff8080 }
DL.el { margin-left: -1cm }
DIV.fragment { width: 100%; border: none; background-color: #eeeeee }
DIV.in { margin-left: 16 }
DIV.ah { background-color: black; margin-bottom: 3; margin-top: 3 }
TD.md { background-color: #f2f2ff }
\endverbatim

\anchor cfg_html_align_members
<dt>\c HTML_ALIGN_MEMBERS <dd>
If the \c HTML_ALIGN_MEMBERS tag is set to \c YES, the members of classes,
files or namespaces will be aligned in HTML using tables. If set to
NO a bullet list will be used. 

<b>Note:</b>
Setting this tag to NO will become obsolete in the future, since I only
intent to support and test the aligned representation.

\anchor cfg_generate_htmlhelp
<dt>\c GENERATE_HTMLHELP <dd>
If the \c GENERATE_HTMLHELP tag is set to \c YES then
doxygen generates three additional HTML index files: 
\c index.hhp, \c index.hhc, and \c index.hhk. The \c index.hhp is a 
project file that can be read by 
<a href="http://msdn.microsoft.com/workshop/author/htmlhelp">
Microsoft HTML help workshop</a>
\latexonly
(see http://msdn.microsoft.com/workshop/author/htmlhelp)
\endlatexonly
on Windows.

The HTML workshop contains a compiler that can convert all HTML output 
generated by doxygen into a single compressed HTML file (.chm). Compressed
HTML files are now used as the Windows 98 help format, and will replace
the old windows help format (.hlp) on all Windows platforms in the future.
Compressed HTML files also contain an index, a table of contents,
and you can search for words in the documentation 
(which basically renders \c doxysearch obsolete on Windows). 
The HTML workshop also contains a viewer for compressed HTML files.

</dl>
\subsection alphabetical_index Alphabetical index options
<dl>

\anchor cfg_alphabetical_index
<dt>\c ALPHABETICAL_INDEX <dd>
If the \c ALPHABETICAL_INDEX tag is set to \c YES, an alphabetical index
of all compounds will be generated. Enable this if the project contains 
a lot of classes, structs, unions or interfaces.

\anchor cfg_cols_in_alpha_index
<dt>\c COLS_IN_ALPHA_INDEX <dd>
If the alphabetical index is enabled 
(see \c ALPHABETICAL_INDEX) then the \c COLS_IN_ALPHA_INDEX tag can be 
used to specify the number of columns in which this list will be split (can be a number in the range [1..20])

\anchor cfg_ignore_prefix
<dt>\c IGNORE_PREFIX <dd>
In case all classes in a project start with a common prefix, all
classes will be put under the same header in the alphabetical index.
The \c IGNORE_PREFIX tag can be use to specify a prefix that should be ignored
while generating the index headers.

</dl>

\subsection latex_output LaTeX related options
<dl>

\anchor cfg_generate_latex
<dt>\c GENERATE_LATEX <dd>
 \addindex GENERATE_LATEX
 If the \c GENERATE_LATEX tag is set to \c YES (the default) Doxygen will
 generate Latex output.

\anchor cfg_latex_output
<dt>\c LATEX_OUTPUT <dd>
 \addindex LATEX_OUTPUT
 The \c LATEX_OUTPUT tag is used to specify where the \f$\mbox{\LaTeX}\f$ 
 docs will be put.
 If a relative path is entered the value of \c OUTPUT_DIRECTORY will be
 put in front of it. If left blank `latex' will be used as the default path.

\anchor cfg_compact_latex
<dt>\c COMPACT_LATEX <dd>
 \addindex COMPACT_LATEX
 If the \c COMPACT_LATEX tag is set to \c YES Doxygen generates more compact
 \f$\mbox{\LaTeX}\f$ documents. This may be useful for small projects and may help to
 save some trees in general.

\anchor cfg_paper_type
<dt>\c PAPER_TYPE <dd>
 \addindex PAPER_TYPE
 The PAPER_TYPE tag can be used to set the paper type that is used
 by the printer. Possible values are: 
 <ul>
 <li><code>a4</code> (210 x 297 mm).
 <li><code>a4wide</code> (same as a4, but including the a4wide package).
 <li><code>letter</code> (8.5 x 11 inches).
 <li><code>legal</code> (8.5 x 14 inches).
 <li><code>executive</code> (7.25 x 10.5 inches)
 </ul> 
 If left blank a4wide will be used.

\anchor cfg_extra_packages
<dt>\c EXTRA_PACKAGES <dd>
 \addindex EXTRA_PACKAGES
 The \c EXTRA_PACKAGES tag can be used to specify one or more \f$\mbox{\LaTeX}\f$ 
 package names that should be included in the \f$\mbox{\LaTeX}\f$ output.
 To get the times font for instance you can specify 
\verbatim
EXTRA_PACKAGES = times
\endverbatim
 If left blank no extra packages will be included.

\anchor cfg_latex_header
<dt>\c LATEX_HEADER <dd>
 \addindex LATEX_HEADER
 The \c LATEX_HEADER tag can be used to specify a personal \f$\mbox{\LaTeX}\f$ 
 header for the generated latex document. The header should contain everything 
 until the first chapter. If it is left blank doxygen will generate a 
 standard header, which looks as follows for the default 
 configuration settings:

\verbatim
\documentclass[a4paper]{book}
\usepackage{a4wide}
\usepackage{makeidx}
\usepackage{fancyheadings}
\usepackage{epsfig}
\usepackage{float}
\usepackage{doxygen}
\makeindex
\setcounter{tocdepth}{1}
\setlength{\footrulewidth}{0.4pt}
\begin{document}
\title{Reference Manual}
\author{Generated by Doxygen}
\date{Thu Sep 30 19:58:32 1999}
\maketitle
\pagenumbering{roman}
\clearemptydoublepage
\tableofcontents
\clearemptydoublepage
\pagenumbering{arabic}
\endverbatim
 
 \par Note: 
   Only use a user defined header if you know what you are doing!

 The following commands have a special meaning inside the header:
 <code>\$title</code>, <code>\$datetime</code>, <code>\$date</code>,
 <code>\$doxygenversion</code>, <code>\$projectname</code>, 
 <code>\$projectnumber</code>. 
 Doxygen will replace them by respectively 
 the title of the page, the current date and time, only the current date,
 the version number of doxygen, the project name (see PROJECT_NAME), or the
 project number (see PROJECT_NUMBER).
   
</dl>

\subsection rtf_output RTF related options
<dl>
\anchor cfg_generate_rtf
<dt>\c GENERATE_RTF <dd>
 \addindex GENERATE_RTF
  If the \c GENERATE_RTF tag is set to \c YES Doxygen will generate RTF output.
  For now this is experimental and is disabled by default. The RTF
  output is optimised for Word 97 and may not look too pretty with
  other readers/editors.

\anchor cfg_rtf_output
<dt>\c RTF_OUTPUT <dd>
 \addindex RTF_OUTPUT
 The \c RTF_OUTPUT tag is used to specify where the RTF docs will be put.
 If a relative path is entered the value of OUTPUT_DIRECTORY will be
 put in front of it. If left blank \c rtf will be used as the default path.
 
\anchor cfg_compact_rtf
<dt>\c COMPACT_RTF <dd>
 \addindex COMPACT_RTF
 If the \c COMPACT_RTF tag is set to \c YES Doxygen generates more compact
 RTF documents. This may be useful for small projects and may help to
 save some trees in general.

\anchor cfg_rtf_hyperlinks
<dt>\c RTF_HYPERLINKS <dd>
 \addindex RTF_HYPERLINKS
 If the \c RTF_HYPERLINKS tag is set to \c YES, the RTF that is generated
 will contain hyperlink fields. The RTF file will
 contain links (just like the HTML output) instead of page references.
 This makes the output suitable for online browsing using Word or some other
 Word compatible reader that support those fields.

 \par note:
   wordpad (write) and others do not support links.

</dl>

\subsection man_output Man page related options
<dl>

\anchor cfg_generate_man
<dt>\c GENERATE_MAN <dd>
 \addindex GENERATE_MAN
 If the \c GENERATE_MAN tag is set to \c YES (the default) Doxygen will
 generate man pages for classes and files.

\anchor cfg_man_output
<dt>\c MAN_OUTPUT <dd>
 \addindex MAN_OUTPUT
 The \c MAN_OUTPUT tag is used to specify where the man pages will be put.
 If a relative path is entered the value of \c OUTPUT_DIRECTORY will be
 put in front of it. If left blank `man' will be used as the default path.
 A directory man3 will be created inside the directory specified by 
 \c MAN_OUTPUT.

\anchor cfg_man_extension
<dt>\c MAN_EXTENSION <dd>
 \addindex MAX_EXTENSION
 The \c MAN_EXTENSION tag determines the extension that is added to
 the generated man pages (default is the subroutine's section .3)
</dl>

\subsection config_prepro Preprocessor related options
<dl>

\anchor cfg_enable_preprocessing
<dt>\c ENABLE_PREPROCESSING <dd>
 \addindex ENABLE_PREPROCESSING
 If the \c ENABLE_PREPROCESSING tag is set to \c YES (the default) Doxygen will
 evaluate all C-preprocessor directives found in the sources and include
 files. 

\anchor cfg_macro_expansion
<dt>\c MACRO_EXPANSION <dd>
 \addindex MACRO_EXPANSION
 If the \c MACRO_EXPANSION tag is set to \c YES Doxygen will expand all macro
 names in the source code. If set to \c NO (the default) only conditional 
 compilation will be performed.

\anchor cfg_search_includes
<dt>\c SEARCH_INCLUDES <dd>
 \addindex SEARCH_INCLUDES 
 If the \c SEARCH_INCLUDES tag is set to \c YES (the default) the includes files
 in the \c INCLUDE_PATH (see below) will be search if a \#include is found.

\anchor cfg_include_path
<dt>\c INCLUDE_PATH <dd>
 \addindex INCLUDE_PATH
 The \c INCLUDE_PATH tag can be used to specify one or more directories that
 contain include files that are not input files but should be processed by
 the preprocessor.

\anchor cfg_predefined
<dt>\c PREDEFINED <dd>
 \addindex PREDEFINED
 The \c PREDEFINED tag can be used to specify one or more macro names that
 are defined before the preprocessor is started (similar to the -D option of
 gcc). The argument of the tag is a list of macros of the form:
 <code>name</code> or <code>name=definition</code> (no spaces). 
 If the definition and the = are omitted =1 is assumed.

\anchor cfg_expand_only_predef
<dt>\c EXPAND_ONLY_PREDEF <dd>
 \addindex EXPAND_ONLY_PREDEF
 If the \c EXPAND_ONLY_PREDEF and \c MACRO_EXPANSION tags are both set to YES
 then the macro expansion is limited to the macros specified with the
 \c PREDEFINED tag.

</dl>

\subsection config_extref External reference options
<dl>

\anchor cfg_tagfiles
<dt>\c TAGFILES <dd> 
 \addindex TAGFILES
 The \c TAGFILES tag can be used to specify one or more tagfiles. 
 
 See section \ref doxytag_usage for more information about the usage of 
 tag files.
 
 Optionally an initial location of the external documentation 
 can be added for each tagfile.
 The format of a tag file without this location is as follows:
 <pre>
TAGFILES = file1 file2 ... </pre>
 Adding location for the tag files is done as follows:
 <pre>
TAGFILES = file1=loc1 "file2 = loc2" ... </pre>
 where \c loc1 and \c loc2 can be relative or absolute paths or URLs, 
 If a location is present for each tag, the installdox tool (see 
 section \ref installdox_usage for more information) does not
 have to be run to correct the links.

 \par Note:
  Each tag file most have a unique name and if a tag file is not located
  in the directory in which doxygen is run, you must also specify the
  path to the tagfile here.

\anchor cfg_generate_tagfile
<dt>\c GENERATE_TAGFILE <dd>
 \addindex GENERATE_TAGFILE
 When a file name is specified after \c GENERATE_TAGFILE, doxygen will create
 a tag file that is based on the input files it reads.
 See section \ref doxytag_usage for more information about the usage of 
 tag files.

\anchor cfg_allexternals
<dt>\c ALLEXTERNALS <dd>
 \addindex ALLEXTERNALS
 If the \c ALLEXTERNALS tag is set to \c YES all external class will be listed
 in the class index. If set to \c NO only the inherited external classes
 will be listed.

\anchor cfg_perl_path
<dt>\c PERL_PATH <dd>
 \addindex PERL_PATH
 The \c PERL_PATH should be the absolute path and name of the perl script
 interpreter (i.e. the result of `<tt>which perl</tt>').

</dl>
\subsection config_dot Dot options
<dl>

\anchor cfg_have_dot
<dt>\c HAVE_DOT <dd>
 \addindex HAVE_DOT
 If you set the \c HAVE_DOT tag to \c YES then doxygen will assume the dot tool is
 available from the path. This tool is part of 
 <a href="http://www.research.att.com/sw/tools/graphviz/">Graphviz</a>, a graph 
 visualization toolkit from AT&T and Lucent Bell Labs. The other options in 
 this section have no effect if this option is set to \c NO (the default)
 
\anchor cfg_collaboration_graph
<dt>\c COLLABORATION_GRAPH <dd>
 \addindex COLLABORATION_GRAPH
 If the \c COLLABORATION_GRAPH and \c HAVE_DOT tags are set to \c YES then doxygen
 will generate a graph for each documented class showing the direct and
 indirect implementation dependencies (inheritance, containment, and
 class references variables) of the class with other documented classes.

\anchor cfg_include_graph
<dt>\c INCLUDE_GRAPH <dd>
 \addindex INCLUDE_GRAPH 
 If the \c ENABLE_PREPROCESSING, \c INCLUDE_GRAPH, and \c HAVE_DOT tags are 
 set to \c YES then doxygen will generate a graph for each documented file 
 showing the direct and indirect include dependencies of the file with other
 documented files.

\anchor cfg_graphical_hierarchy
<dt>\c GRAPHICAL_HIERARCHY <dd>
 \addindex GRAPHICAL_HIERATCHY
 If the \c GRAPHICAL_HIERARCHY and \c HAVE_DOT tags are set to \c YES then 
 doxygen will graphical hierarchy of all classes instead of a textual one.

</dl>
\subsection config_search Search engine options
<dl>

\anchor cfg_searchengine
<dt>\c SEARCHENGINE <dd>
 \addindex SEARCHENGINE
 The \c SEARCHENGINE tag specifies whether or not a 
 search should be used. Possible values are \c YES and \c NO. 
 If set to \c NO or left blank, the values of all other tags in this section 
 will be ignored.

\anchor cfg_cgi_name
<dt>\c CGI_NAME <dd>
 \addindex CGI_NAME
 The \c CGI_NAME tag should be the name of the CGI script that
 starts the search engine (<tt>doxysearch</tt>) with the correct parameters.
 A script with this name will be generated by doxygen.

\anchor cfg_cgi_url
<dt>\c CGI_URL <dd>
 \addindex CGI_URL
 The \c CGI_URL tag should be the absolute URL to the directory where the
 cgi binaries are located. See the documentation of your http daemon for 
 details.

\anchor cfg_doc_url
<dt>\c DOC_URL <dd>
 \addindex DOC_URL
 The \c DOC_URL tag should be the absolute URL to the directory where the
 documentation is located. If left blank the absolute path to the 
 documentation, with <tt>file://</tt> prepended to it, will be used. 
 This is correct for local viewing only.

\anchor cfg_doc_abspath
<dt>\c DOC_ABSPATH <dd>
 \addindex DOC_ABSPATH
 The \c DOC_ABSPATH tag should be the absolute path to the directory where the
 documentation is located. If left blank the directory on the local machine
 will be used.

\anchor cfg_bin_abspath
<dt>\c BIN_ABSPATH <dd>     
 \addindex BIN_ABSPATH
 The \c BIN_ABSPATH tag must point to the directory where the doxysearch binary
 is installed.

\anchor cfg_ext_doc_paths
<dt>\c EXT_DOC_PATHS <dd>  
 \addindex EXT_DOC_PATHS
 The \c EXT_DOC_PATHS tag can be used to specify one or more paths to 
 documentation generated for other projects. This allows doxysearch to search
 the documentation for these projects as well. All paths must be absolute.

</dl>
<h2>Examples</h2>

Suppose you have a simple project consisting of two files: a source file 
\c example.cc and a header file \c example.h.
Then a minimal configuration file is as simple as:
\verbatim
INPUT            = example.cc example.h
\endverbatim

Assuming the example makes use of Qt classes and perl is located 
in <code>/usr/bin</code>, a more realistic configuration file would be:
\verbatim
PROJECT_NAME     = Example
INPUT            = example.cc example.h
WARNINGS         = YES
TAGFILES         = qt.tag
PERL_PATH        = /usr/bin/perl
SEARCHENGINE     = NO
\endverbatim

To generate the documentation for the 
<a href="http://www.stack.nl/~dimitri/qdbttabular/index.html">QdbtTabular</a> package
I have used the following configuration file:
\verbatim
PROJECT_NAME     = QdbtTabular
OUTPUT_DIRECTORY = html
WARNINGS         = YES
INPUT            = examples/examples.doc src
FILE_PATTERNS    = *.cc *.h
INCLUDE_PATH     = examples
TAGFILES         = qt.tag
PERL_PATH        = /usr/local/bin/perl
SEARCHENGINE     = YES
CGI_NAME         = search.cgi
CGI_URL          = http://www.stack.nl/~dimitri/cgi-bin
DOC_URL          = http://www.stack.nl/~dimitri/qdbttabular
DOC_ABSPATH      = /home/dimitri/.html/qdbttabular
BIN_ABSPATH      = /home/dimitri/bin
\endverbatim

To regenerate the Qt-1.44 documentation from the sources, you could use the
following config file:
\verbatim
PROJECT_NAME         = Qt
OUTPUT_DIRECTORY     = qt_docs
HIDE_UNDOC_MEMBERS   = YES
HIDE_UNDOC_CLASSES   = YES
ENABLE_PREPROCESSING = YES
MACRO_EXPANSION      = YES
EXPAND_ONLY_PREDEF   = YES
SEARCH_INCLUDES      = YES
FULL_PATH_NAMES      = YES
STRIP_FROM_PATH      = $(QTDIR)/
PREDEFINED           = USE_TEMPLATECLASS Q_EXPORT= \
                       QArrayT:=QArray \
                       QListT:=QList \
                       QDictT:=QDict \
                       QQueueT:=QQueue \
                       QVectorT:=QVector \
                       QPtrDictT:=QPtrDict \
                       QIntDictT:=QIntDict \
                       QStackT:=QStack \
                       QDictIteratorT:=QDictIterator \
                       QListIteratorT:=QListIterator \
                       QCacheT:=QCache \
                       QCacheIteratorT:=QCacheIterator \
                       QIntCacheT:=QIntCache \
                       QIntCacheIteratorT:=QIntCacheIterator \
                       QIntDictIteratorT:=QIntDictIterator \
                       QPtrDictIteratorT:=QPtrDictIterator
INPUT                = $(QTDIR)/doc \
                       $(QTDIR)/src/widgets \
                       $(QTDIR)/src/kernel \
                       $(QTDIR)/src/dialogs \
                       $(QTDIR)/src/tools
FILE_PATTERNS        = *.cpp *.h q*.doc
INCLUDE_PATH         = $(QTDIR)/include 
RECURSIVE            = YES
\endverbatim

Here Doxygen's preprocessor is used to substitute some
macro names that are normally substituted by the C preprocessor,
but without doing full macro expansion.

*/

