/******************************************************************************
 *
 * $Id$
 *
 * Copyright (C) 1997-1999 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * All output generated with Doxygen is not covered by this license.
 *
 */
/*! \page faq Frequently Asked Questions

<ol>
<li><b>How do get information on the index page in HTML?</b>
<p>
You should use the \\mainpage command inside a comment block like this:
\verbatim
/*! \mainpage My Personal Index Page
 *
 * \section intro Introduction
 *
 * This is the introduction.
 *
 * \section install Installation
 *
 * \subsection step1 Step 1: Opening the box
 *  
 * etc...
 */
\endverbatim

<li><b>How can I avoid that some code fragment is parsed by Doxyen?</b>
<p>
You can use Doxygen's preprocessor for this: 
If you put
\verbatim
#ifndef DOXYGEN_SHOULD_SKIP_THIS

 /* code that must be skipped by Doxygen */

#endif /* DOXYGEN_SHOULD_SKIP_THIS */
\endverbatim
around the blocks that should be hidden and put:
\verbatim
  PREDEFINED = DOXYGEN_SHOULD_SKIP_THIS
\endverbatim
in the config file then all blocks should be skipped by Doxygen as long
as <code>PREPROCESSING = YES</code>.

<li><b>How can I make doxygen ignore nasty macro's? </b>

Look at section \ref preprocessing for the answer.

<li><b>How can I change what's after the <code>#include</code> in class documentation?</b>

You can document your class like

\verbatim
/*! \class MyClassName include.h path/include.h
 *
 *  Docs for MyClassName
 */
\endverbatim

To make doxygen put <br><br>
<code>
#include <path/include.h>
</code>

in the documentation of the class MyClassName regardless of the name of the actual 
header file in which the definition of MyClassName is contained.

<li><b>How can I use tag files in combination with compressed HTML</b>

If you want to refer from one compressed HTML file 
\c a.chm to another compressed HTML file 
called \c b.chm, the
link in \c a.chm must have the following format:
\verbatim
<a href="b.chm::/file.html">
\endverbatim
Unfortunately this only works if both compressed HTML files are in the same 
directory.

As a result you must rename the generated \c index.chm files for all projects
into something unique and put all \c .chm files in one directory.

Suppose you have a project \e a referring to a project \e b using tag file
\c b.tag, then you could rename the \c index.chm for project \e a into
\c a.chm and the \c index.chm for project \e b into \c b.chm. In the 
configuration file for project \e a you write:
\verbatim
TAGFILES = b.tag=b.chm::
\endverbatim
or you can use \c installdox to set the links as follows:
\verbatim
installdox -lb.tag@b.chm::
\endverbatim

</ol>
*/

