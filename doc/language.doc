/******************************************************************************
 * Warning: this file was generated from the language.tpl template
 *          and the maintainers.txt files by the translator.pl script.  
 *
 *          Do not edit this file.  Edit the above mentioned files!
 * 
 *
 * Copyright (C) 1997-2001 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*! \page langhowto Internationalization

<h3>Support for multiple languages</h3>

Doxygen has built-in support for multiple languages. This means 
that the text fragments that doxygen generates can be produced in
languages other than English (the default) at configuration time.

Currently (version 1.2.9-20010812), 24 languages 
are supported (sorted alphabetically): 
Brazilian Portuguese, Chinese, Croatian, Czech, Danish, 
Dutch, English, Finnish, French, German, 
Hungarian, Italian, Japanese, Korean, Norwegian, 
Polish, Portuguese, Romanian, Russian, Slovak, 
Slovene, Spanish, Swedish, and Ukrainian.

The table of information related to the supported languages follows.
It is sorted by language alphabetically.  The <b>Status</b> column
was generated from sources and shows approximately the last version
when the translator was updated.

\htmlonly
<TABLE ALIGN=center CELLSPACING=0 CELLPADDING=0 BORDER=0>
<TR BGCOLOR="#000000">
<TD>
  <TABLE CELLSPACING=1 CELLPADDING=2 BORDER=0>
  <TR BGCOLOR="#4040c0">
  <TD ><b><font size=+1 color="#ffffff"> Language </font></b></TD>
  <TD ><b><font size=+1 color="#ffffff"> Maintainer </font></b></TD>
  <TD ><b><font size=+1 color="#ffffff"> Contact address </font>
          <font size=-2 color="#ffffff">(remove the NOSPAM.)</font></b></TD>
  <TD ><b><font size=+1 color="#ffffff"> Status </font></b></TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Brazilian</TD>  
      <TD>Fabio "FJTC" Jun Takada Chino</TD>
      <TD>chino@NOSPAM.grad.icmc.sc.usp.br</TD>
      <TD>up-to-date</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Chinese</TD>  
      <TD>Wang Weihan</TD>
      <TD>wangweihan@NOSPAM.capinfo.com.cn</TD>
      <TD>1.2.1</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Croatian</TD>  
      <TD>Boris Bralo</TD>
      <TD>boris.bralo@NOSPAM.zg.tel.hr</TD>
      <TD>up-to-date</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Czech</TD>  
      <TD>Petr P&#x0159;ikryl</TD>
      <TD>prikrylp@NOSPAM.skil.cz</TD>
      <TD>up-to-date</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Danish</TD>  
      <TD>Erik S&oslash;e S&oslash;rensen</TD>
      <TD>erik@NOSPAM.mail.nu</TD>
      <TD>1.2.7</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Dutch</TD>  
      <TD>Dimitri van Heesch</TD>
      <TD>dimitri@NOSPAM.stack.nl</TD>
      <TD>up-to-date</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>English</TD>  
      <TD>Dimitri van Heesch</TD>
      <TD>dimitri@NOSPAM.stack.nl</TD>
      <TD>up-to-date</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Finnish</TD>  
      <TD>Olli Korhonen</TD>
      <TD>Olli.Korhonen@NOSPAM.ccc.fi</TD>
      <TD>1.0.0</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>French</TD>  
      <TD>Xavier Outhier</TD>
      <TD>xouthier@NOSPAM.yahoo.fr</TD>
      <TD>up-to-date</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>German</TD>  
      <TD>Jens Seidel<br>Jens Breitenstein</TD>
      <TD>jensseidel@NOSPAM.users.sf.net<br>Jens.Breitenstein@NOSPAM.tlc.de</TD>
      <TD>up-to-date</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Hungarian</TD>  
      <TD>F&ouml;ldv&aacute;ri Gy&ouml;rgy</TD>
      <TD>foldvari@NOSPAM.diatronltd.com</TD>
      <TD>1.2.1</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Italian</TD>  
      <TD>Ahmed Aldo Faisal<br>Alessandro Falappa</TD>
      <TD>aaf23@NOSPAM.cam.ac.uk<br>a.falappa@NOSPAM.flashnet.it</TD>
      <TD>up-to-date</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Japanese</TD>  
      <TD>Kenji Nagamatsu</TD>
      <TD>naga@NOSPAM.joyful.club.ne.jp</TD>
      <TD>1.2.5</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Korean</TD>  
      <TD>Richard Kim</TD>
      <TD>ryk@NOSPAM.dspwiz.com</TD>
      <TD>1.1.0</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Norwegian</TD>  
      <TD>Lars Erik Jordet</TD>
      <TD>larsej@NOSPAM.stud.ifd.hibu.no</TD>
      <TD>1.2.2</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Polish</TD>  
      <TD>Grzegorz Kowal</TD>
      <TD>g_kowal@NOSPAM.poczta.onet.pl</TD>
      <TD>1.2.1</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Portuguese</TD>  
      <TD>Rui Godinho Lopes</TD>
      <TD>ruiglopes@NOSPAM.yahoo.com</TD>
      <TD>up-to-date</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Romanian</TD>  
      <TD>Alexandru Iosup</TD>
      <TD>aiosup@NOSPAM.yahoo.com</TD>
      <TD>1.2.1</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Russian</TD>  
      <TD>Alexandr Chelpanov</TD>
      <TD>cav@NOSPAM.cryptopro.ru</TD>
      <TD>up-to-date</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Slovak</TD>  
      <TD>Stanislav Kudl&aacute;&#x010d;</TD>
      <TD>qwerty1@NOSPAM.pobox.sk</TD>
      <TD>1.2.7</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Slovene</TD>  
      <TD>Matjaz Ostroversnik</TD>
      <TD>matjaz.ostroversnik@NOSPAM.zrs-tk.si</TD>
      <TD>1.1.5</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Spanish</TD>  
      <TD>Francisco Oltra Thennet</TD>
      <TD>foltra@NOSPAM.puc.cl</TD>
      <TD>1.2.7</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Swedish</TD>  
      <TD>Samuel H&auml;agglund<br>XeT Erixon</TD>
      <TD>sahag96@NOSPAM.nts.mh.se<br>xet@NOSPAM.hem.passagen.se</TD>
      <TD>1.0.0</TD>
  </TR>
  <TR BGCOLOR="#ffffff">
      <TD>Ukrainian</TD>  
      <TD>Olexij Tkatchenko</TD>
      <TD>olexij.tkatchenko@NOSPAM.gmx.de</TD>
      <TD>up-to-date</TD>
  </TR>
  </TABLE>
</TD>
</TR>
</TABLE>
\endhtmlonly
\latexonly
\begin{tabular}{|l|l|l|l|}
  \hline 
  {\bf Language} & {\bf Maintainer} & {\bf Contact address} & {\bf Status} \\
  \hline
  \hline
  Brazilian & Fabio "FJTC" Jun Takada Chino & {\tt chino@grad.icmc.sc.usp.br} & up-to-date \\
  \hline
  Chinese & Wang Weihan & {\tt wangweihan@capinfo.com.cn} & 1.2.1 \\
  \hline
  Croatian & Boris Bralo & {\tt boris.bralo@zg.tel.hr} & up-to-date \\
  \hline
  Czech & Petr P\v{r}ikryl & {\tt prikrylp@skil.cz} & up-to-date \\
  \hline
  Danish & Erik S\o{}e S\o{}rensen & {\tt erik@mail.nu} & 1.2.7 \\
  \hline
  Dutch & Dimitri van Heesch & {\tt dimitri@stack.nl} & up-to-date \\
  \hline
  English & Dimitri van Heesch & {\tt dimitri@stack.nl} & up-to-date \\
  \hline
  Finnish & Olli Korhonen & {\tt Olli.Korhonen@ccc.fi} & 1.0.0 \\
  \hline
  French & Xavier Outhier & {\tt xouthier@yahoo.fr} & up-to-date \\
  \hline
  German & Jens Seidel & {\tt jensseidel@users.sf.net} & up-to-date \\
   & Jens Breitenstein & {\tt Jens.Breitenstein@tlc.de} &  \\
  \hline
  Hungarian & F\"{o}ldv\'{a}ri Gy\"{o}rgy & {\tt foldvari@diatronltd.com} & 1.2.1 \\
  \hline
  Italian & Ahmed Aldo Faisal & {\tt aaf23@cam.ac.uk} & up-to-date \\
   & Alessandro Falappa & {\tt a.falappa@flashnet.it} &  \\
  \hline
  Japanese & Kenji Nagamatsu & {\tt naga@joyful.club.ne.jp} & 1.2.5 \\
  \hline
  Korean & Richard Kim & {\tt ryk@dspwiz.com} & 1.1.0 \\
  \hline
  Norwegian & Lars Erik Jordet & {\tt larsej@stud.ifd.hibu.no} & 1.2.2 \\
  \hline
  Polish & Grzegorz Kowal & {\tt g\_kowal@poczta.onet.pl} & 1.2.1 \\
  \hline
  Portuguese & Rui Godinho Lopes & {\tt ruiglopes@yahoo.com} & up-to-date \\
  \hline
  Romanian & Alexandru Iosup & {\tt aiosup@yahoo.com} & 1.2.1 \\
  \hline
  Russian & Alexandr Chelpanov & {\tt cav@cryptopro.ru} & up-to-date \\
  \hline
  Slovak & Stanislav Kudl\'{a}\v{c} & {\tt qwerty1@pobox.sk} & 1.2.7 \\
  \hline
  Slovene & Matjaz Ostroversnik & {\tt matjaz.ostroversnik@zrs-tk.si} & 1.1.5 \\
  \hline
  Spanish & Francisco Oltra Thennet & {\tt foltra@puc.cl} & 1.2.7 \\
  \hline
  Swedish & Samuel H\"{a}agglund & {\tt sahag96@nts.mh.se} & 1.0.0 \\
   & XeT Erixon & {\tt xet@hem.passagen.se} &  \\
  \hline
  Ukrainian & Olexij Tkatchenko & {\tt olexij.tkatchenko@gmx.de} & up-to-date \\
  \hline
\end{tabular}
\endlatexonly


Most people on the list have indicated that they were also busy
doing other things, so if you want to help to speed things up please 
let them (or me) know.

If you want to add support for a language that is not yet listed 
please read the next section.


<h3>Adding a new language to doxygen</h3>

This short HOWTO explains how to add support for a new language to Doxygen:

Just follow these steps:
<ol>
<li>Tell me for which language you want to add support. If no one else
    is already working on support for that language, you will be 
    assigned as the maintainer for the language. 
<li>Create a copy of translator_en.h and name it 
    translator_<your_2_letter_country_code>.h
    I'll use xx in the rest of this document.
<li>Edit language.cpp:
    Add a 
\verbatim
#include<translator_xx.h>
\endverbatim
    in <code>setTranslator()</code> add
\verbatim
    else if (L_EQUAL("your_language_name"))
    {
      theTranslator = new TranslatorYourLanguage;
    }
\endverbatim
    after the <code>if { ... }</code>
<li>Edit libdoxygen.pro.in and add \c translator_xx.h to 
    the \c HEADERS line.
<li>Edit <code>translator_xx.h</code>:
   <ul>
   <li>Rename <code>TRANSLATOR_EN_H</code> to <code>TRANSLATOR_XX_H</code> twice.
   <li>Rename TranslatorEnglish to TranslatorYourLanguage 
   <li>In the member <code>idLanguage()</code> change "english" into the 
     name of your language (use lower case characters only). Depending
     on the language you may also wish to change the member functions 
     latexLanguageSupportCommand(), idLanguageCharset() and others
     (you will recognize them when you start the work).
   <li>Edit all the strings that are returned by the member functions that 
     start with tr. 
     Try to match punctuation and capitals!
     To enter special characters (with accents) you can:
     <ul>
     <li>  Enter them directly if your keyboard supports that and you are 
           using a Latin-1 font. Doxygen will translate the
           characters to proper \f$\mbox{\LaTeX}\f$ and leave the
           HTML and man output for what it is (which is fine, if
           idLanguageCharset() is set correctly).
     <li>  Use html codes like \&auml; for an a with an umlaut (i.e. &auml;).
           See the HTML specification for the codes.
     </ul>
   </ul>
<li>Run configure and make again from the root of the distribution, 
    in order to regenerated the Makefiles.
<li>Now you can use <code>OUTPUT_LANGUAGE = your_language_name</code> 
    in the config file to generate output in your language.
<li>Send <code>translator_xx.h</code> to me so I can add it to doxygen.
    Send also your name and e-mail address to be included in the
    \c maintainers.txt list.
</ol>


<h3>Maintaining a language</h3>

As new versions of doxygen appear, new sentences (\c trXxxx()
methods) will be added to the \c Translator interface class.  Of
course, these need to be translated as well (otherwise doxygen
wouldn't even compile!).  Waiting until all language maintainers
have translated the new sentences and sent the results would not
be very practical. The following text describes the usage of
translator adapters to solve the problem.

<b>The role of Translator Adapters.</b> 
Whenever the \c Translator class interface changes in the new
release, the new class \c TranslatorAdapter_x_y_z is added to the \c
translator_adapter.h file (here x, y, and z are numbers that
correspond to the current version of doxygen). All translators that
previously derived from the \c Translator class now derive from this
adapter class.

The \c TranslatorAdapter_x_y_z class implements the new, required
methods.  If the new method replaces some similar but obsolete
method(s) (e.g. if the number of arguments changed and/or the
functionality of the older method was changed or enriched), the \c
TranslatorAdapter_x_y_z class may use the obsolete method to get the
result which is as close as possible to the older result in the
target language.  If it is not possible, the result (the default
translation) is obtained using the English translator, which is (by
definition) always up to date.  

<b>For example,</b> when the new \c trFile() method with
parameters (to determine the capitalization of the first letter and
the singular/plural form) was introduced to replace the older method
\c trFiles() without arguments, the following code appeared in one
of the translator adapter classes:

\verbatim
    /*! This is the default implementation of the obsolete method
     * used in the documentation of a group before the list of
     * links to documented files.  This is possibly localized.
     */
    virtual QCString trFiles()
    { return "Files"; }

    /*! This is the localized implementation of newer equivalent
     * using the obsolete method trFiles().
     */
    virtual QCString trFile(bool first_capital, bool singular)
    {
      if (first_capital && !singular)
        return trFiles();  // possibly localized, obsolete method
      else
        return english.trFile(first_capital, singular);
    }
\endverbatim

The \c trFiles() is not present in the \c TranslatorEnglish class,
because it was removed as obsolete.  However, it was used until now
and its call was replaced by 

\verbatim
    trFile(true, false)
\endverbatim

in the doxygen source files.  Probably, many language translators
implemented the obsolete method, so it perfectly makes sense to use
the same language dependent result in those cases. The \c
TranslatorEnglish does not implement the old method.  It derives
from the abstract \c Translator class.  On the other hand, the old
translator for a different language does not implement the new \c
trFile() method.  Because of that it is derived from another base
class -- \c TranslatorAdapter_x_y_z. The \c TranslatorAdapter_x_y_z
class have to implement the new, required \c trFile() method.
However, the translator adapter would not be compiled if the \c
trFiles() method was not implemented. This is the reason for
implementing the old method in the translator adapter class (using
the same code, that was removed from the TranslatorEnglish).

The simplest way would be to pass the arguments to the English
translator and to return its result.  Instead, the adapter uses the
old \c trFiles() in one special case -- when the new
<code>trFile(true,&nbsp;false)</code> is called.  This is the
mostly used case at the time of introducing the new method -- see
above.  While this may look too complicated, the technique allows
the developers of the core sources to change the Translator
interface, while the users may not even notice the change.  Of
course, when the new \c trFile() is used with different arguments,
the English result is returned and it will be noticed by non English
users.  Here the maintainer of the language translator should
implement at least that one particular method.

<b>What says the base class of a language translator?</b>
If the language translator class inherits from any adapter class the
maintenance is needed.  In such case, the language translator is not
considered up-to-date.  On the other hand, if the language
translator derives directly from the abstract class \c Translator, the
language translator is up-to-date.

The translator adapter classes are chained so that the older
translator adapter class uses the one-step-newer translator adapter
as the base class.  The newer adapter does less \e adapting work
than the older one.  The oldest adapter class derives (indirectly)
from all of the adapter classes.  The newest adapter class derives
directly from the abstract class \c Translator.  

The name of the adapter class was chosen so that its suffix is
derived from the previous version of doxygen.  This way, one can say
approximately, when the language translator class was last updated
-- see details below.  The newest adapter translator for CVS release
(i.e. non official) is named \c TranslatorAdapterCVS.  As it derives
only from the \c Translator class, it can be used only for language
translator classes that were up-to-date in the time of the last
release.

Status of the translators that derive from the \c
TranslatorAdapterCVS is named as <em>almost up-to-date</em>.
Its code is moved into the new \c Translator_x_y_z when new version
of doxygen is officially released.

Once the oldest adapter class is not used by any of the language
translators, it can be removed from the doxygen project.  This also
means, that there probably still is some language which uses the
oldest adapter.  The maintainers should try to reach the state with
the minimal number of translator adapter classes.


<b>To simplify the maintenance of the language translator classes</b>
for the supported languages, the \c translator.pl perl
script was developed (located in \c doxygen/doc directory). 
It extracts the important information about obsolete and
new methods from the source files for each of the languages.  
The information is stored in the <em>translator report</em> ASCII file
(<code>doxygen/doc/translator_report.txt</code>). \htmlonly If you compiled this documentation
from sources and if you have also doxygen sources available the
link <a href="../doc/translator_report.txt">
                 <code>doxygen/doc/translator_report.txt</code></a> should be valid.\endhtmlonly 

Looking at the base class of the language translator, the script
guesses also the status of the translator -- see the last column of
the table with languages above.  The \c translator.pl is called
automatically when the doxygen documentation is generated.  You can
also run the script manualy whenever you feel that it can help you.
Of course, you are not forced to use the results of the script.  You
can find the same information by looking at the adapter class and
its base classes.


<b>How should I update my language translator?</b> Firstly, you
should be the language maintainer, or you should let him/her know
about the changes.  The following text was written for the language
maintainers as the primary audience.

There are several approaches to be taken when updating your
language.  If you are not extremely busy, you should always chose
the most radical one.  When the update takes much more time than you
expected, you can always decide use some suitable translator adapter to
finish the changes later and still make your translator working.

<b>The most radical way of updating the language translator</b> is
to make your translator class derive directly 
from the abstract class \c Translator and provide translations for the
methods that are required to be implemented -- the compiler will
tell you if you forgot to implement some of them.  If you are in
doubt, have a look at the \c TranslatorEnglish class to recognize the
purpose of the implemented method.  Looking at the previously used
adapter class may help you sometimes, but it can also be misleading
because the adapter classes do implement also the obsolete methods
(see the previous \c trFiles() example).

In other words, the up-to-date language translators do not need the
\c TranslatorAdapter_x_y_z classes at all, and you do not need to
implement anything else than the methods required by the Translator
class (i.e. the pure virtual methods of the \c Translator -- they 
end with <code>=0;</code>).

If everything compiles fine, try to run \c translator.pl, and have a
look at the translator report (ASCII file) at the \c doxygen/doc
directory.  Even if your translator is marked as up-to-date, there
still may be some remarks related to your souce code.  Namely, the
obsolete methods--that are not used at all--may be listed in the
section for your language.  Simply, remove their code (and run the
\c translator.pl again).

<b>If you do not have time to finish all the updates</b> you should
still start with <em>the most radical approach</em> as described
above.  You can always change the base class to the translator
adapter class that implements all of the not-yet-implemented methods.

<b>If you prefer to update your translator gradually</b>, look
at the <em>translator report</em> generated by the \c translator.pl script
and choose one of the missing method that is implemented by the
translator adapter, that is used as your base class. When there is
not such a method in your translator adapter base class, you probably
can change the translator adapter base to the newer one.

Do not blindly implement all methods that are implemented by your
translator adapter base class.  The reason is that the adapter
classes implement also obsolete methods.  Another reason is that
some of the methods could become obsolete later.

*/

