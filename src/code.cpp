#define yy_create_buffer codeYY_create_buffer
#define yy_delete_buffer codeYY_delete_buffer
#define yy_scan_buffer codeYY_scan_buffer
#define yy_scan_string codeYY_scan_string
#define yy_scan_bytes codeYY_scan_bytes
#define yy_flex_debug codeYY_flex_debug
#define yy_init_buffer codeYY_init_buffer
#define yy_flush_buffer codeYY_flush_buffer
#define yy_load_buffer_state codeYY_load_buffer_state
#define yy_switch_to_buffer codeYY_switch_to_buffer
#define yyin codeYYin
#define yyleng codeYYleng
#define yylex codeYYlex
#define yyout codeYYout
#define yyrestart codeYYrestart
#define yytext codeYYtext

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 78
#define YY_END_OF_BUFFER 79
static yyconst short int yy_acclist[752] =
    {   0,
       31,   31,   79,   77,   78,   67,   76,   78,    1,   77,
       78,   77,   78,   77,   78,   77,   78,   31,   77,   78,
        1,   31,   77,   78,   33,   77,   78,   31,   77,   78,
       77,   78,   31,   77,   78,   31,   77,   78,    6,   77,
       78,    8,   67,   76,   78,    1,    6,   77,   78,    6,
       77,   78,    6,   77,   78,    6,   77,   78,    6,   77,
       78,   57,   77,   78,   57,   77,   78,    1,   57,   77,
       78,   77,   78,   77,   78,   57,   77,   78,   77,   78,
       77,   78,   59,   67,   76,   78,    1,   77,   78,   77,
       78,   77,   78,   77,   78,   63,   66,   77,   78,   65,

       67,   76,   78,    1,   63,   66,   77,   78,   66,   77,
       78,   63,   66,   77,   78,   63,   66,   77,   78,   63,
       66,   77,   78,   77,   78,   67,   76,   78,    1,   77,
       78,   30,   77,   78,   77,   78,   41,   77,   78,   77,
       78,   38,   77,   78,   42,   77,   78,   35,   77,   78,
     8220,   77,   78,16412,16413, 8220,   77,   78,16412,16413,
     8220,   77,   78,16412,16413, 8220,   77,   78,16412,16413,
     8220,   77,   78,16412,16413, 8220,   77,   78,16412,16413,
     8220,   77,   78,16412,16413, 8220,   77,   78,16412,16413,
     8220,   77,   78,16412,16413, 8220,   77,   78,16412,16413,

     8220,   77,   78,16412,16413, 8220,   77,   78,16412,16413,
     8220,   77,   78,16412,16413, 8220,   77,   78,16412,16413,
     8220,   77,   78,16412,16413,   10,   77,   78,   11,   77,
       78,   77,   78,   77,   78,    5,   77,   78,   45,   77,
       78,   46,   77,   78,   44,   77,   78,   43,   77,   78,
    16437,   40,   77,   78,   40,   77,   78,   67,   76,   78,
        1,   40,   77,   78,   30,   40,   77,   78,   40,   77,
       78,   40,   77,   78,   40,   77,   78,   77,   78,16423,
       40,   77,   78,   40,   77,   78,   40,   77,   78,   43,
       77,   78,16438,16439,   51,   77,   78,   50,   77,   78,

       77,   78,   67,   76,   78,   13,   77,   78,   15,   77,
       78,   12,   77,   78,   14,   77,   78,   16,   77,   78,
       77,   78,   77,   78,   25,   77,   78,   22,   77,   78,
       21,   77,   78,   21,   77,   78,   21,   77,   78,   77,
       78,   23,   77,   78,   24,   77,   78,   77,   78,16388,
       74,   75,   74,   75,   31,   31,   32,   74,   31,   32,
       75,   34,   31,   31,   31,   32,   74,   31,   32,   75,
        9,   75,    7,    9,   75,   57,   57,   58,   56,   75,
       57,   56,   75,   59,   74,   75,   74,   75,   63,   62,
       64,   74,   63,   64,   75,   63,   63,   64,   74,   63,

       64,   75,   38,   42, 8220, 8220, 8221, 8220,16412,16413,
     8220,16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,
    16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,
    16413,   27, 8220,16412,16413, 8220,16412,16413, 8220,16412,
    16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,16413,
     8220,16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,
    16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,
    16413, 8220,16412,16413,    5,   49,   47,   48,   52, 8245,
       43,16437,   43, 8231,16423,16423, 8246, 8247,   43,16438,
    16439,   51,   15,   16,   13,   15,   14,   16,   21,   21,

       21,   21, 8196,16388,   31,   31,   31,   31,   31,   31,
       31,   31,   61,   63,   63,   63,   36,   36, 8220,16412,
    16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,16413,
     8220,16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,
    16412,16413, 8220,16412,16413,   27, 8220,   27, 8220,   26,
     8221, 8220,16412,16413, 8220,16412,16413, 8220,16412,16413,
     8220,16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,
    16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,
    16413, 8220, 8220, 8220,16412,16413,16423,16423,   21,   21,
       21,   21,16388,   72,   73,   69,   71,   72,   68,   69,

       31,   72,   31,   31,   73,   31,   31,   31,   31,   71,
       72,   31,   72,   59,   72,   73,   59,   69,   71,   72,
       59,   71,   72,   59,   68,   69,   61,   63,   63,   63,
     8220,16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,
    16412,16413, 8220,16412,16413, 8220,16412,16413,   26, 8220,
    16412,16413, 8220,16412,16413, 8220,16412,16413,   27, 8220,
    16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,
    16413, 8220,16412,16413,   21,   21,   21,   21,   70,   67,
       71,   68,   31,   71,   31,   71,   59,   71,   59,   68,
       63, 8220,16412,16413, 8220,16412,16413, 8220,16412,16413,

     8220,16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,
    16412,16413, 8220,16412,16413,   21,   21,   21,   21,    3,
     8220,    3, 8220, 8220,16412,16413, 8220,16412,16413,   37,
     8220,16412,16413,   21,   21,   18,   21,   21,   60, 8220,
    16412,16413,   20,   21,   21,   17,   21,   21,   19,   21,
        2
    } ;

static yyconst short int yy_accept[449] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    6,    9,   12,   14,   16,   18,
       21,   25,   28,   31,   33,   36,   39,   42,   46,   50,
       53,   56,   59,   62,   65,   68,   72,   74,   76,   79,
       81,   83,   87,   90,   92,   94,   96,  100,  104,  109,
      112,  116,  120,  124,  126,  129,  132,  135,  137,  140,
      142,  145,  148,  151,  156,  161,  166,  171,  176,  181,
      186,  191,  196,  201,  206,  211,  216,  221,  226,  229,

      232,  234,  236,  239,  242,  245,  248,  252,  255,  258,
      261,  265,  269,  272,  275,  278,  281,  284,  287,  290,
      295,  298,  301,  303,  306,  309,  312,  315,  318,  321,
      323,  325,  328,  331,  334,  337,  340,  342,  345,  348,
      351,  351,  351,  352,  353,  353,  353,  354,  355,  356,
      359,  362,  363,  364,  365,  368,  371,  373,  374,  376,
      377,  378,  378,  379,  381,  382,  384,  384,  385,  386,
      387,  387,  387,  388,  389,  390,  391,  393,  396,  397,
      398,  400,  403,  403,  403,  403,  403,  403,  404,  405,
      405,  406,  407,  408,  411,  414,  417,  420,  423,  426,

      429,  432,  436,  439,  442,  445,  448,  451,  454,  457,
      460,  463,  466,  469,  472,  472,  475,  475,  476,  476,
      476,  477,  478,  479,  480,  480,  481,  483,  484,  484,
      484,  484,  484,  484,  485,  486,  486,  487,  487,  487,
      488,  488,  489,  492,  493,  493,  493,  494,  495,  495,
      496,  497,  498,  499,  499,  499,  500,  501,  502,  503,
      503,  504,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  506,  507,  508,  509,  510,  511,
      512,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  514,  515,  516,  517,  518,  519,  519,  522,  522,

      525,  528,  531,  534,  537,  540,  543,  546,  548,  550,
      552,  555,  558,  561,  564,  567,  570,  573,  576,  579,
      582,  583,  584,  587,  587,  587,  588,  588,  588,  589,
      590,  591,  592,  593,  594,  594,  594,  595,  595,  596,
      596,  597,  597,  597,  599,  599,  601,  603,  604,  606,
      607,  608,  609,  612,  613,  614,  616,  616,  617,  617,
      619,  619,  619,  621,  624,  624,  627,  627,  628,  628,
      629,  630,  631,  634,  637,  640,  643,  646,  649,  650,
      653,  656,  659,  663,  666,  669,  672,  675,  675,  676,
      677,  678,  679,  680,  680,  681,  682,  682,  683,  685,

      686,  687,  689,  689,  691,  691,  692,  695,  698,  701,
      704,  707,  710,  713,  713,  716,  716,  717,  718,  719,
      720,  720,  720,  720,  722,  724,  727,  730,  731,  734,
      734,  735,  736,  738,  739,  740,  743,  743,  745,  746,
      748,  748,  749,  749,  751,  751,  752,  752
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    1,    8,    9,   10,
       11,   12,    1,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,    1,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       21,   24,    1,    1,   23,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   23,   34,   35,   36,   37,
       38,   39,   23,   40,   41,   42,   43,   44,   45,   23,
       46,   23,   47,    1,   48,   49,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    2,    3,    4,    1,    5,    1,    1,    1,    6,
        1,    7,    1,    8,    9,   10,   11,   12,    1,    1,
        1,   13,   14,   15,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,    1,    1,   16
    } ;

static yyconst short int yy_base[500] =
    {   0,
        0,    3,    5,   11,   20,   29,   35,   38,   45,   53,
       55,   60,   62,   71,   87,   18,  136,   10,  185,   44,
      229,   66,  275,   68,  324,  234,  373,  235,  420,  423,
      445,  237, 1515, 1994,  428, 1994,    6,  493,   65,    0,
        0, 1994,   67,    0,  494,  226, 1994,  495, 1994,  228,
     1511,  496,  229,    0,  426,    0, 1497,  231,  501,  417,
     1509,  498, 1508,  503,  502,  504,    0,  506,    0, 1490,
      419,  519,  425,  521,  524,  527, 1994, 1479, 1994, 1480,
     1994, 1484, 1482,  534,  544,  510,  530,  520,  529,  536,
      537,  526,  547,  552,  541,  557,  564,  500, 1994, 1994,

      606,  609, 1496, 1994,  612, 1994,  608, 1994,  617,  630,
      634, 1994, 1469,  580, 1472,  637,  640,  647,  590,  654,
        0, 1994,  658,  664,  616,   83, 1994,    0, 1485,  668,
      557, 1994, 1994,    0,  206, 1451,  671, 1994, 1994,  669,
      672,  642,  678,  673,  677,  665,  687,  690,    0,  689,
      691, 1994,  695,  686,  698,  703,  704, 1994,  707,    0,
      702, 1467, 1994,  708,  714,  712, 1479, 1994,  722,  726,
      719,  729,  734,  733,    0,  499,  728,  738,  742,  735,
      743,  745,  760, 1463,  763, 1471, 1470, 1994, 1461,  766,
      770,  773, 1994,  391,  716,  744,  753,  756,  764,  763,

      760,  806,  769,  777,  780,  783,  788,  792,  801,  805,
      809,  798,  810,  821,  854,  857,  866, 1475, 1443,  869,
     1994, 1994, 1994, 1994, 1449, 1994,  865,    0,  874, 1450,
      887,  891,  894, 1994,  897,  915,    0,  918,  923, 1994,
     1445, 1994,  929,    0,  863,  911,  531, 1464,  939,  748,
      790,    0, 1463,  943,  615,    0,  561, 1437, 1406,  933,
     1994,  942,    0,  918,  797, 1422,  824, 1427,  948,  809,
     1393,  890, 1399,  959,  960,  964,  969,  858,  979,  986,
      990,  996,  997, 1395,  974, 1001, 1004, 1012, 1379,  883,
     1016,   40,  989,  554, 1994, 1369, 1019,  909, 1023,  913,

     1004, 1001, 1007,  990,  997, 1010, 1014, 1056, 1059, 1994,
     1035, 1011, 1024, 1029, 1038, 1030, 1044, 1054, 1048, 1049,
     1091,  925, 1096, 1331, 1100, 1105, 1108,  643,  809, 1322,
     1222, 1228, 1208, 1108,    0, 1230, 1994, 1212, 1994, 1218,
     1994,    0, 1211, 1994, 1210, 1994,    0, 1186,    0, 1110,
     1116, 1114,    0, 1123, 1198, 1994,  908, 1186, 1180, 1994,
     1130, 1138, 1132, 1994, 1128, 1994, 1134, 1141, 1109,  966,
     1093, 1136, 1111, 1119, 1084, 1120, 1115, 1123, 1994, 1127,
     1128, 1132, 1174, 1137, 1144, 1149, 1150, 1073, 1063, 1046,
     1023, 1003, 1994, 1038,  971, 1994, 1033, 1994,    0, 1192,

      998, 1994,  965, 1994, 1169, 1191, 1194, 1163, 1164, 1179,
     1182, 1168, 1186,  886, 1183,  826,  785,  756,  744,  728,
      995,  684,    0, 1228, 1237, 1193, 1201, 1994, 1215,  586,
      562,  518,    0,  464, 1994, 1218,  220,    0,   51,    0,
        1,    0, 1246,    0, 1247, 1994, 1994, 1267, 1283, 1299,
     1315, 1331, 1347, 1363, 1379, 1395, 1411, 1427, 1443, 1458,
     1471, 1480, 1493, 1506, 1519, 1240, 1246, 1251, 1529, 1542,
     1557, 1561, 1574, 1589, 1595, 1609, 1625, 1641, 1657, 1673,
     1689, 1705, 1721, 1737, 1753, 1769, 1785, 1801, 1817, 1833,
     1849, 1865, 1881, 1897, 1913, 1929, 1945, 1961, 1977

    } ;

static yyconst short int yy_def[500] =
    {   0,
      448,  448,  449,  449,  450,  450,  451,  451,  452,  452,
      453,  453,  448,  448,  447,   15,  447,   17,  447,   19,
       17,   21,  447,   23,  447,   25,  447,   27,  448,  448,
      447,   31,  447,  447,  447,  447,  447,  447,  447,  454,
      454,  447,  454,  455,  454,  454,  447,  447,  447,  447,
      447,  447,  447,  456,  456,  456,  447,  447,  456,  447,
      457,  447,  457,  457,  457,  457,  458,  447,  458,  447,
      458,  458,  458,  447,  447,  447,  447,  459,  447,  447,
      447,  447,  447,  460,  460,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,  447,  447,

      461,  447,  447,  447,  447,  447,  462,  447,  447,  447,
      447,  447,  459,  447,  447,  463,  464,  447,  447,  465,
      466,  447,  447,  447,  447,  447,  447,  467,  447,  447,
      447,  447,  447,  468,  468,  468,  447,  447,  447,  469,
      447,  447,  447,  447,  447,  447,  447,  447,  454,  454,
      454,  447,  454,  454,  454,  454,  447,  447,  447,  456,
      456,  447,  447,  447,  456,  447,  457,  447,  457,  457,
      457,  457,  457,  457,  458,  447,  447,  458,  458,  458,
      447,  458,  447,  447,  447,  447,  459,  447,  447,  470,
      447,  447,  447,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,  461,  471,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  462,  472,  447,  447,
      447,  473,  447,  447,  463,  464,  474,  447,  447,  447,
      447,  447,  465,  466,  447,  447,  447,  447,  447,  447,
      447,  467,  447,  447,  447,  468,  468,  468,  468,  447,
      447,  469,  475,  447,  447,  476,  476,  477,  447,  447,
      478,  478,  479,  480,  480,  481,  454,  454,  482,  482,
      483,  484,  484,  485,  457,  457,  486,  486,  487,  447,
      447,  488,  458,  489,  447,  447,  470,   85,  461,   85,

       85,   85,   85,   85,   85,   85,   85,  447,  447,  447,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
      447,  447,  471,  447,  473,  463,  464,  447,  474,  468,
      468,  468,  468,  475,  490,  491,  447,  447,  447,  477,
      447,  492,  493,  447,  479,  447,  454,  454,  454,  481,
      494,  495,  454,  483,  457,  447,  457,  457,  485,  447,
      496,  497,  457,  447,  487,  447,  447,  447,  447,  488,
      498,  489,   85,   85,   85,   85,   85,   85,  447,   85,
       85,   85,   85,   85,   85,   85,   85,  447,  468,  468,
      468,  468,  447,  491,  447,  447,  493,  447,  454,  495,

      457,  447,  497,  447,  447,  498,   85,   85,   85,   85,
       85,   85,   85,  447,   85,  447,  468,  468,  468,  468,
      447,  447,  499,  447,  447,   85,   85,  447,   85,  447,
      468,  468,  468,  468,  447,   85,  447,  468,  468,  468,
      447,  468,  447,  468,  447,  447,    0,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447

    } ;

static yyconst short int yy_nxt[2044] =
    {   0,
      447,  328,   35,   36,   38,   35,   36,   35,   41,  234,
       42,   38,   45,   35,   41,   37,   42,  143,   39,  102,
       43,  144,   48,   49,  103,   39,   46,  444,   44,  443,
       52,   48,   49,   39,   44,   50,   55,   35,   56,   59,
       35,   56,  341,   51,   53,  118,   57,   62,   63,   57,
       58,  340,   51,   60,   65,   62,   63,   68,   69,  119,
       64,   72,   68,   69,   35,   36,   70,   38,   66,   38,
       71,   70,   38,   35,   36,   73,  147,   37,  150,  442,
      148,   39,  151,   39,  251,  251,   39,   34,   74,   75,
       76,   34,   77,   34,   34,   78,   34,   34,   34,   79,

       80,   81,   37,   82,   83,   79,   34,   79,   34,   84,
       34,   85,   86,   87,   88,   89,   90,   91,   84,   92,
       84,   84,   84,   93,   84,   84,   94,   95,   96,   97,
       84,   98,   84,   99,  100,  101,   34,   34,   35,   36,
       34,   77,   34,   34,   78,  104,  105,   34,  106,   34,
       34,   37,   34,   34,   34,   34,   34,   34,  107,   34,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,   34,   34,   34,  108,  109,  110,  111,  108,
      112,  108,  108,  113,   34,  108,  108,  108,  108,  108,

      114,   34,  115,  108,  108,  108,  108,  116,  108,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  108,  108,  117,   34,  130,  137,  155,   38,  143,
      147,  156,  143,  157,  159,  257,  164,  441,  258,   39,
       39,  120,   39,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,   34,   34,   35,   36,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       37,   34,   34,   34,   34,   34,   34,  121,   34,  121,

      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  122,   34,   34,   34,  123,  124,   36,   34,   34,
       34,  125,   34,   34,   34,  125,   34,   34,   34,   37,
       34,  126,  127,   34,   34,   34,  128,   34,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      129,   34,   34,   34,  131,   35,   36,   34,   34,   34,
       34,   34,   34,   34,   34,  132,   34,   34,   37,   34,
       34,   34,  133,   34,   34,  134,   34,  134,  134,  134,

      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  135,  134,  134,  134,  134,  136,  134,  134,  129,
       34,   34,   35,   36,   38,   35,   36,  161,  147,  141,
      177,  194,  166,  194,  178,   37,  181,  162,   39,  138,
      182,  139,  138,  142,  139,   34,   34,   35,   36,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  140,
       37,  140,   34,   34,   34,   34,   34,  140,   34,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,   34,   34,   34,  145,  153,  141,  145,  440,  141,

      290,  291,  165,  171,  168,  168,  168,  141,  146,  154,
      142,  146,  162,  142,  169,  173,  146,  172,  170,  174,
      179,  142,  183,  183,  183,  185,  183,  183,  183,  183,
      183,  214,  251,  251,  180,  191,  192,  183,  184,  142,
      194,  184,  194,  193,  184,  191,  192,  183,  201,  197,
      194,  184,  194,  193,  198,  202,  346,  202,  255,  439,
      194,  184,  194,  203,  199,  345,  194,  200,  194,  194,
      194,  194,  194,  204,  205,  206,  194,  194,  194,  194,
      207,  194,  208,  194,  195,  209,  196,  194,  210,  194,
      438,  143,  194,  330,  194,  144,  211,  194,  331,  194,

      213,  147,  212,  248,  194,  148,  194,  215,  215,  215,
      217,  183,  183,  220,  220,  218,  255,  224,  229,  229,
      229,  225,  226,  250,  146,  228,  184,  250,  437,  221,
      222,  231,  229,  229,  230,  229,  229,  229,  233,  229,
      229,  236,  236,  236,  328,  142,  234,  230,  238,  229,
      229,  230,  234,  264,  230,  239,  239,  265,  223,  245,
      246,  248,  146,  240,  230,  249,  246,  241,  242,  254,
      246,  228,  260,  141,  261,  247,  269,  268,  145,  142,
      270,  247,  266,  146,  263,  247,  146,  142,  268,  267,
      261,  271,  146,  274,  273,  276,  153,  277,  272,  265,

      275,  278,  279,  161,  248,  273,  276,  281,  268,  280,
      154,  273,  268,  162,  248,  165,  273,  248,  281,  268,
      171,  168,  273,  268,  168,  162,  282,  273,  168,  146,
      284,  168,  266,  283,  172,  168,  168,  289,  287,  267,
      285,  284,  292,  179,  286,  288,  269,  271,  289,  294,
      293,  202,  434,  292,  272,  250,  194,  180,  194,  250,
      294,  183,  183,  183,  185,  183,  183,  297,  297,  297,
      433,  191,  192,  183,  192,  192,  183,  184,  142,  193,
      184,  301,  432,  184,  194,  300,  194,  184,  304,  306,
      184,  251,  251,  194,  307,  194,  302,  303,  194,  305,

      194,  336,  194,  194,  194,  194,  194,  308,  309,  311,
      328,  194,  336,  343,  299,  310,  202,  194,  234,  194,
      194,  312,  194,  194,  343,  194,  431,  202,  194,  313,
      194,  314,  194,  315,  194,  447,  318,  316,  194,  339,
      194,  194,  319,  194,  317,  194,  194,  194,  194,  194,
      194,  194,  194,  320,  202,  215,  215,  215,  321,  322,
      430,  194,  352,  194,  245,  246,  193,  217,  183,  183,
      220,  220,  218,  352,  224,  229,  229,  229,  225,  226,
      247,  146,  228,  184,  290,  291,  221,  222,  231,  229,
      229,  230,  325,  325,  325,  233,  229,  229,  233,  229,

      229,  447,  142,  234,  230,  339,  234,  428,  230,  248,
      168,  230,  246,  246,  230,  223,  236,  236,  236,  238,
      229,  229,  335,  358,  239,  239,  322,  322,  247,  335,
      239,  239,  240,  146,  260,  230,  241,  242,  240,  327,
      249,  246,  241,  242,  254,  246,  228,  261,  146,  194,
      202,  194,  342,  194,  142,  194,  247,  263,  146,  342,
      247,  337,  337,  261,  337,  337,  341,  404,  341,  340,
      348,  149,  421,  351,  149,  349,  168,  340,  361,  248,
      351,  344,  337,  337,  344,  361,  422,  340,  344,  248,
      348,  344,  346,  371,  149,  345,  421,  149,  356,  356,

      168,  349,  344,  168,  371,  362,  364,  357,  167,  344,
      422,  167,  358,  345,  364,  357,  362,  367,  368,  167,
      297,  297,  297,  167,  215,  215,  215,  358,  373,  202,
      375,  369,  194,  374,  377,  398,  184,  194,  376,  194,
      395,  194,  378,  194,  194,  420,  194,  194,  202,  194,
      194,  194,  194,  194,  194,  419,  194,  308,  309,  183,
      309,  309,  183,  202,  194,  310,  380,  299,  379,  194,
      383,  381,  194,  184,  418,  194,  184,  194,  194,  382,
      194,  384,  385,  387,  194,  386,  194,  417,  194,  194,
      194,  194,  321,  322,  194,  398,  194,  321,  322,  416,

      193,  325,  325,  325,  397,  193,  233,  229,  229,  236,
      236,  236,  341,  261,  234,  340,  398,  230,  396,  397,
      405,  396,  230,  263,  407,  346,  194,  149,  345,  261,
      366,  149,  402,  340,  168,  367,  368,  397,  346,  396,
      404,  167,  367,  368,  202,  167,  345,  345,  327,  369,
      202,  194,  408,  194,  412,  194,  369,  409,  413,  194,
      194,  194,  194,  194,  410,  194,  411,  194,  194,  194,
      194,  415,  194,  423,  194,  308,  309,  194,  202,  194,
      423,  202,  360,  310,  194,  407,  194,  414,  168,  194,
      194,  194,  194,  398,  398,  424,  425,  397,  427,  426,

      168,  349,  397,  194,  194,  194,  194,  202,  194,  407,
      194,  429,  346,  398,  194,  397,  194,  202,  202,  194,
      341,  194,  194,  194,  194,  194,  194,  339,  194,  424,
      425,  183,  395,  194,  194,  436,  194,  193,  425,  425,
      183,  194,  202,  194,  202,  184,  202,  445,  445,  392,
      244,  446,  446,  244,  184,  194,  252,  194,  194,  252,
      194,  256,  391,  390,  256,  446,  446,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,  149,  149,  389,  149,  388,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  295,  149,  152,
      152,  366,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  160,  160,  360,  160,  160,

      160,  346,  160,  160,  338,  160,  160,  160,  160,  160,
      160,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  175,  175,  341,
      175,  175,  175,  338,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  186,  186,  333,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  194,
      194,  194,  332,  194,  253,  253,  242,  232,  194,  194,
      226,  194,  216,  216,  216,  324,  219,  189,  296,  295,
      190,  168,  163,  259,  216,  227,  253,  227,  227,  232,
      227,  227,  187,  227,  235,  235,  235,  219,  235,  190,

      189,  188,  187,  235,  235,  176,  235,  237,  237,  237,
      168,  168,  163,  158,  447,  447,  447,  447,  447,  237,
      243,  243,  447,  447,  243,  447,  243,  243,  447,  243,
      243,  447,  243,  262,  447,  447,  447,  262,  262,  262,
      447,  262,  262,  298,  298,  298,  447,  447,  447,  447,
      447,  447,  447,  298,  447,  298,  447,  298,  323,  323,
      447,  447,  323,  447,  447,  447,  447,  323,  447,  447,
      323,  228,  228,  447,  228,  326,  326,  326,  447,  447,
      447,  447,  447,  447,  447,  326,  447,  326,  447,  326,
      329,  447,  447,  447,  329,  447,  447,  447,  447,  329,

      447,  447,  329,  334,  447,  334,  447,  447,  334,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  447,  337,
      337,  337,  337,  337,  337,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      447,  344,  344,  344,  344,  344,  344,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,

      350,  350,  350,  350,  350,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  393,  393,  393,  393,  393,  393,  447,
      393,  393,  447,  393,  393,  393,  393,  393,  393,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  396,  396,  396,  396,  396,
      396,  447,  396,  396,  447,  396,  396,  396,  396,  396,
      396,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  399,  399,  399,

      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  435,  435,  435,
      435,  435,  435,  447,  435,  435,  447,  435,  435,  435,
      435,  435,  435,   33,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447
    } ;

static yyconst short int yy_chk[2044] =
    {   0,
        0,  237,    1,    1,    2,    2,    2,    3,    3,  237,
        3,   18,    4,    4,    4,    1,    4,   37,    2,   16,
        3,   37,    5,    5,   16,   18,    4,  442,    3,  441,
        6,    6,    6,   16,    4,    5,    7,    7,    7,    8,
        8,    8,  292,    5,    6,   20,    7,    9,    9,    8,
        7,  292,    6,    8,   10,   10,   10,   11,   11,   20,
        9,   12,   12,   12,   13,   13,   11,   22,   10,   24,
       11,   12,   14,   14,   14,   12,   39,   13,   43,  439,
       39,   22,   43,   24,  126,  126,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   21,   26,   28,   46,   32,   50,
       53,   46,   58,   50,   53,  135,   58,  437,  135,   26,
       28,   21,   32,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   29,   29,   30,   30,   30,   55,   60,   35,
       71,  194,   60,  194,   71,   29,   73,   55,   30,   29,
       73,   29,   30,   35,   30,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   38,   45,   48,   52,  434,   62,

      176,  176,   59,   65,   65,   64,   66,   68,   38,   45,
       48,   52,   59,   62,   64,   66,   59,   65,   64,   66,
       72,   68,   74,   74,   74,   75,   75,   75,   76,   76,
       76,   98,  247,  247,   72,   84,   84,   84,   74,   75,
       98,   75,   98,   84,   76,   85,   85,   85,   88,   86,
       86,   84,   86,   85,   87,   92,  294,   88,  131,  432,
       88,   85,   88,   89,   87,  294,   92,   87,   92,   89,
       87,   89,   87,   90,   91,   93,   90,   91,   90,   91,
       94,   95,   95,   95,   85,   95,   85,   93,   96,   93,
      431,  114,   94,  257,   94,  114,   96,   96,  257,   96,

       97,  119,   96,  131,   97,  119,   97,  101,  101,  101,
      102,  102,  102,  105,  105,  102,  255,  107,  109,  109,
      109,  107,  107,  125,  102,  107,  102,  125,  430,  105,
      105,  110,  110,  110,  109,  111,  111,  111,  116,  116,
      116,  117,  117,  117,  328,  110,  116,  110,  118,  118,
      118,  111,  328,  142,  116,  120,  120,  142,  105,  123,
      123,  255,  118,  120,  118,  124,  124,  120,  120,  130,
      130,  120,  137,  141,  140,  123,  146,  144,  145,  124,
      146,  124,  143,  130,  140,  130,  137,  141,  144,  143,
      140,  147,  145,  150,  148,  151,  153,  154,  147,  422,

      150,  154,  155,  161,  123,  148,  151,  156,  157,  155,
      153,  159,  164,  161,  130,  165,  166,  137,  156,  157,
      171,  171,  159,  164,  169,  165,  169,  166,  170,  165,
      170,  172,  177,  169,  171,  174,  173,  174,  173,  177,
      172,  170,  178,  179,  172,  173,  180,  181,  174,  182,
      180,  195,  420,  178,  181,  250,  195,  179,  195,  250,
      182,  183,  183,  183,  185,  185,  185,  190,  190,  190,
      419,  191,  191,  191,  192,  192,  192,  183,  185,  191,
      185,  197,  418,  190,  196,  196,  196,  191,  199,  201,
      192,  251,  251,  197,  201,  197,  198,  198,  198,  200,

      201,  265,  201,  200,  199,  200,  199,  202,  202,  203,
      329,  203,  265,  270,  190,  202,  204,  204,  329,  204,
      205,  205,  205,  206,  270,  206,  417,  206,  207,  207,
      207,  208,  208,  209,  208,  267,  212,  210,  212,  267,
      212,  209,  213,  209,  210,  210,  202,  210,  202,  211,
      213,  211,  213,  214,  211,  215,  215,  215,  216,  216,
      416,  214,  278,  214,  245,  245,  216,  217,  217,  217,
      220,  220,  217,  278,  227,  229,  229,  229,  227,  227,
      245,  217,  227,  217,  290,  290,  220,  220,  231,  231,
      231,  229,  232,  232,  232,  233,  233,  233,  235,  235,

      235,  272,  231,  233,  231,  272,  235,  414,  232,  245,
      357,  233,  246,  246,  235,  220,  236,  236,  236,  238,
      238,  238,  264,  357,  239,  239,  322,  322,  246,  264,
      243,  243,  239,  238,  260,  238,  239,  239,  243,  232,
      249,  249,  243,  243,  254,  254,  243,  262,  260,  298,
      300,  298,  269,  300,  249,  300,  249,  262,  254,  269,
      254,  274,  275,  262,  274,  275,  276,  403,  370,  276,
      274,  275,  395,  277,  274,  275,  285,  370,  285,  260,
      277,  279,  274,  275,  279,  285,  395,  276,  280,  254,
      279,  280,  281,  293,  279,  281,  421,  280,  282,  283,

      401,  280,  279,  286,  293,  286,  287,  282,  283,  280,
      421,  282,  283,  281,  288,  287,  286,  291,  291,  287,
      297,  297,  297,  288,  299,  299,  299,  288,  301,  302,
      304,  291,  304,  303,  306,  397,  297,  305,  305,  305,
      394,  302,  307,  302,  301,  392,  301,  303,  312,  303,
      306,  312,  306,  312,  307,  391,  307,  308,  308,  308,
      309,  309,  309,  311,  313,  308,  313,  297,  309,  314,
      316,  314,  316,  308,  390,  311,  309,  311,  315,  315,
      315,  317,  318,  320,  317,  319,  317,  389,  319,  320,
      319,  320,  321,  321,  318,  371,  318,  323,  323,  388,

      321,  325,  325,  325,  371,  323,  326,  326,  326,  327,
      327,  327,  350,  334,  326,  350,  352,  325,  351,  352,
      369,  351,  326,  334,  375,  354,  375,  351,  354,  334,
      365,  351,  361,  350,  363,  367,  367,  352,  372,  351,
      362,  361,  368,  368,  373,  361,  354,  372,  325,  367,
      374,  373,  376,  373,  381,  377,  368,  377,  382,  374,
      376,  374,  376,  378,  378,  378,  380,  380,  381,  380,
      381,  385,  382,  405,  382,  383,  383,  384,  387,  384,
      405,  384,  359,  383,  385,  386,  385,  383,  358,  386,
      387,  386,  387,  406,  400,  407,  407,  400,  409,  408,

      355,  348,  406,  408,  409,  408,  409,  410,  412,  412,
      412,  415,  345,  343,  383,  400,  383,  413,  411,  410,
      340,  410,  411,  415,  411,  415,  413,  338,  413,  424,
      424,  424,  336,  426,  407,  426,  407,  424,  425,  425,
      425,  427,  427,  427,  429,  424,  436,  443,  445,  333,
      466,  443,  445,  466,  425,  429,  467,  429,  436,  467,
      436,  468,  332,  331,  468,  443,  445,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  450,

      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  454,  454,  330,  454,  324,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  296,  454,  455,
      455,  289,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  456,  456,  284,  456,  456,

      456,  273,  456,  456,  271,  456,  456,  456,  456,  456,
      456,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  458,  458,  268,
      458,  458,  458,  266,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  459,  459,  259,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  460,
      460,  460,  258,  460,  253,  248,  241,  230,  460,  460,
      225,  460,  461,  461,  461,  219,  218,  189,  187,  186,
      184,  167,  162,  136,  461,  462,  129,  462,  462,  115,
      462,  462,  113,  462,  463,  463,  463,  103,  463,   83,

       82,   80,   78,  463,  463,   70,  463,  464,  464,  464,
       63,   61,   57,   51,   33,    0,    0,    0,    0,  464,
      465,  465,    0,    0,  465,    0,  465,  465,    0,  465,
      465,    0,  465,  469,    0,    0,    0,  469,  469,  469,
        0,  469,  469,  470,  470,  470,    0,    0,    0,    0,
        0,    0,    0,  470,    0,  470,    0,  470,  471,  471,
        0,    0,  471,    0,    0,    0,    0,  471,    0,    0,
      471,  472,  472,    0,  472,  473,  473,  473,    0,    0,
        0,    0,    0,    0,    0,  473,    0,  473,    0,  473,
      474,    0,    0,    0,  474,    0,    0,    0,    0,  474,

        0,    0,  474,  475,    0,  475,    0,    0,  475,  476,
      476,  476,  476,  476,  476,  476,  476,  476,    0,  476,
      476,  476,  476,  476,  476,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  478,  478,  478,  478,  478,  478,  478,  478,  478,
        0,  478,  478,  478,  478,  478,  478,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  490,  490,  490,  490,  490,  490,    0,
      490,  490,    0,  490,  490,  490,  490,  490,  490,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  492,  492,  492,  492,  492,
      492,    0,  492,  492,    0,  492,  492,  492,  492,  492,
      492,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  494,  494,  494,

      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  499,  499,  499,
      499,  499,  499,    0,  499,  499,    0,  499,  499,  499,
      499,  499,  499,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "code.l"
#define INITIAL 0
/******************************************************************************
 *
 * $Id$
 *
 * Copyright (C) 1997-2000 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * All output generated with Doxygen is not covered by this license.
 *
 */
#line 18 "code.l"

/*
 *	includes
 */
#include <stdio.h>
#include <iostream.h>
#include <assert.h>
#include <ctype.h>
#include <qregexp.h>

#include "qtbc.h"
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "outputlist.h"
#include "util.h"

#define YY_NO_UNPUT
#define YY_NEVER_INTERACTIVE 1
  
class CodeClassDef 
{
  public:
    CodeClassDef() {}
    CodeClassDef(const CodeClassDef &d)
    {
      name = d.name;
      bases = d.bases;
    }
   ~CodeClassDef() {}

    QCString name;
    QStrList bases;
};  
  
class CodeVarDef
{
  public:
    CodeVarDef() {}
    CodeVarDef(const CodeVarDef &d) 
    { 
      name = d.name; 
      type = d.type; 
      classScope = d.classScope;  
    }
   ~CodeVarDef() {} 
    
    QCString name;
    QCString type; 
    QCString classScope;
};

typedef QList<CodeClassDef> CodeClassList; 
typedef QDict<CodeClassDef> CodeClassDict;
typedef QList<CodeVarDef>   CodeVarList; 

/* -----------------------------------------------------------------
 *	statics
 */
  
static CodeClassList g_codeClassList;
static CodeClassDict g_codeClassDict(1009);
static CodeVarList   g_codeVarList;
static CodeVarList   g_codeParmList;
static const char *  g_inputString;     //!< the code fragment as text
static int	     g_inputPosition;   //!< read offset during parsing 
static int           g_inputLines;      //!< number of line in the code fragment
static int	     g_yyLineNr;        //!< current line number
static int	     g_lastCContext;
static int	     g_lastSpecialCContext;
static int           g_lastStringContext;
static int	     g_bracketCount = 0;
static int	     g_curlyCount   = 0;
static int	     g_sharpCount   = 0;
static QCString      g_type;
static QCString      g_name;
static QCString      g_args;
static QCString      g_parmType;
static QCString      g_parmName;
static bool          g_inClass;
static QCString      g_classScope;
static OutputList *  g_code;
static CodeClassDef  g_ccd;
static CodeVarDef    g_cvd;
static bool          g_exampleBlock;
static QCString      g_exampleName;
static QCString      g_exampleFile;
static int           g_anchorCount;
static FileDef *     g_sourceFileDef;
static bool          g_includeCodeFragment;

// start a new line of code, inserting a line number if g_sourceFileDef
// is TRUE. If a definition starts at the current line, then the line
// number is linked to the documentation of that definition.
static void startCodeLine(OutputList &ol)
{
  if (g_sourceFileDef)
  {
    QCString lineNumber,lineAnchor;
    lineNumber.sprintf("%05d",g_yyLineNr);
    lineAnchor.sprintf("l%05d",g_yyLineNr);
    Definition *d   = g_sourceFileDef->getSourceDefinition(g_yyLineNr);
    QCString anchor = g_sourceFileDef->getSourceAnchor(g_yyLineNr);
    if (!g_includeCodeFragment && d && d->isLinkableInProject())
    {
      ol.startCodeAnchor(lineAnchor);
      ol.writeCodeLink(d->getReference(),d->getOutputFileBase(),
	               anchor,lineNumber);
      ol.endCodeAnchor();
      ol.codify(" ");
    }
    else
    {
      ol.codify(lineNumber);
      ol.codify(" ");
    }
  }
  ol.startCodeLine(); 
}

// write a code fragment `text' that may span multiple lines, inserting
// line numbers for each line.
static void codifyLines(char *text)
{
  char *p=text,*sp=p;
  char c;
  bool done=FALSE;
  while (!done)
  {
    sp=p;
    while ((c=*p++) && c!='\n');
    if (c=='\n')
    {
      g_yyLineNr++;
      *(p-1)='\0';
      g_code->codify(sp);
      g_code->endCodeLine();
      if (g_yyLineNr<g_inputLines) 
      {
	startCodeLine(*g_code);
      }
    }
    else
    {
      g_code->codify(sp);
      done=TRUE;
    }
  }
}

// writes a link to a fragment `text' that may span multiple lines, inserting
// line numbers for each line. If `text' contains newlines, the link will be 
// split into multiple links with the same destination, one for each line.
static void writeMultiLineCodeLink(OutputList &ol,
                  const char *ref,const char *file,
                  const char *anchor,const char *text)
{
  bool done=FALSE;
  QCString ts = text;
  char *p=ts.data();
  while (!done)
  {
    char *sp=p;
    char c;
    while ((c=*p++) && c!='\n');
    if (c=='\n')
    {
      g_yyLineNr++;
      *(p-1)='\0';
      ol.writeCodeLink(ref,file,anchor,sp);
      ol.endCodeLine();
      if (g_yyLineNr<g_inputLines) 
      {
	startCodeLine(ol);
      }
    }
    else
    {
      ol.writeCodeLink(ref,file,anchor,sp);
      done=TRUE;
    }
  }
}

static void addType()
{
  if (g_name=="const") { g_name.resize(0); return; }
  if (!g_type.isEmpty()) g_type += ' ' ;
  g_type += g_name ;
  g_name.resize(0) ;
  if (!g_type.isEmpty()) g_type += ' ' ;
  g_type += g_args ;
  g_args.resize(0) ;
}

static void addParmType()
{
  if (g_parmName=="const") { g_parmName.resize(0); return; }
  if (!g_parmType.isEmpty()) g_parmType += ' ' ;
  g_parmType += g_parmName ;
  g_parmName.resize(0) ;
}

static void setClassScope(const QCString &name)
{
  //printf("setClassScope(%s)\n",name.data());
  QCString n=name;
  n=n.simplifyWhiteSpace();
  int index;
  if ((index=n.find("::"))!=-1)
    g_classScope=n.left(index);
  else
    g_classScope.resize(0);
  //printf("--->New class scope `%s'\n",g_classScope.data());
}

static void addVariable()
{
  g_cvd.name=g_name.copy().simplifyWhiteSpace();
  g_cvd.type=g_type.copy().simplifyWhiteSpace();
  if (g_type.isEmpty()) 
    return;
  else if ((getClass(g_cvd.type)) || (g_codeClassDict[g_cvd.type])) 
  {
    g_cvd.classScope=g_classScope;
    g_codeVarList.append(new CodeVarDef(g_cvd)); // add it to a list
  }
}

static void addParameter()
{
  g_cvd.name=g_parmName.copy().simplifyWhiteSpace();
  g_cvd.type=g_parmType.copy().simplifyWhiteSpace();
  if (g_cvd.type.isEmpty()) 
    return;
  else if ((getClass(g_cvd.type)) || (g_codeClassDict[g_cvd.type])) 
  {
    g_cvd.classScope=g_classScope;
    g_codeParmList.append(new CodeVarDef(g_cvd)); // add it to a list
  }
}

static void generateClassLink(OutputList &ol,char *clName)
{
  QCString className=clName;
  if (className.isEmpty()) return;
  ClassDef *cd;
  if ((cd=getClass(className)) && cd->isLinkable())
  {
    if (g_exampleBlock)
    {
      QCString anchor;
      anchor.sprintf("_a%d",g_anchorCount);
      //printf("addExampleClass(%s,%s,%s)\n",anchor.data(),g_exampleName.data(),
      //                                   g_exampleFile.data());
      if (cd->addExample(anchor,g_exampleName,g_exampleFile))
      {
	ol.pushGeneratorState();
	//bool latexOn = ol.isEnabled(OutputGenerator::Latex);
	//if (latexOn) ol.disable(OutputGenerator::Latex);
	ol.disable(OutputGenerator::Latex);
	ol.disable(OutputGenerator::RTF);
	ol.writeAnchor(anchor);
	//if (latexOn) ol.enable(OutputGenerator::Latex);
	ol.popGeneratorState();
	g_anchorCount++;
      }
    }
    //ol.writeCodeLink(cd->getReference(),cd->getOutputFileBase(),0,className);
    writeMultiLineCodeLink(ol,cd->getReference(),cd->getOutputFileBase(),0,className);
  }
  else
  {
    codifyLines(clName);
  }
}

static bool getLink(const char *className,
                    const char *memberName,OutputList &result,
		    const char *text=0)
{
  MemberDef    *md;
  ClassDef     *cd;
  FileDef      *fd;
  NamespaceDef *nd;
  QCString m=memberName;
  QCString c=className;
  //printf("Trying `%s'::`%s'\n",c.data(),m.data());
  if (getDefs(c,m,"()",md,cd,fd,nd) && md->isLinkable())
  {
    //printf("Found!\n");
    if (g_exampleBlock)
    {
      QCString anchor;
      anchor.sprintf("a%d",g_anchorCount);
      //printf("addExampleFile(%s,%s,%s)\n",anchor.data(),g_exampleName.data(),
      //                                  g_exampleFile.data());
      if (md->addExample(anchor,g_exampleName,g_exampleFile))
      {
	//bool latexEnabled = result.isEnabled(OutputGenerator::Latex);
	result.pushGeneratorState();
	//if (latexEnabled) result.disable(OutputGenerator::Latex);
	result.disable(OutputGenerator::Latex);
	result.writeAnchor(anchor);
	result.popGeneratorState();
	//if (latexEnabled) result.enable(OutputGenerator::Latex);
	g_anchorCount++;
      }
    }
    Definition *d=0;
    if (cd) d=cd; else if (cd) d=nd; else d=fd;

    if (d)
    {
      //printf("d->getOutputBase()=`%s' name=`%s'\n",d->getOutputFileBase().data(),md->name().data());
      //result.writeCodeLink(d->getReference(),d->getOutputFileBase(),
      //                   md->anchor(),text ? text : memberName);
      writeMultiLineCodeLink(result,d->getReference(),d->getOutputFileBase(),
	                       md->anchor(),text ? text : memberName);
      return TRUE;
    } 
  }
  return FALSE;
}

static ClassDef *stripClassName(const char *s)
{
  QCString tmp=s;
  static const QRegExp re("[a-z_A-Z][a-z_A-Z0-9:]*");
  int p=0,i,l;
  while ((i=re.match(tmp,p,&l))!=-1)
  {
    ClassDef *cd=getClass(tmp.mid(i,l));
    if (cd) return cd;
    p=i+l;
  }
  return 0;
}

static void generateMemberLink(OutputList &ol,const char *varName,
            char *memName)
{
  //printf("generateMemberLink(object=%s,mem=%s) classScope=%s\n",
  //                          varName,memName,classScope.data());
  CodeVarDef *cvd=g_codeParmList.last();
  while (cvd && cvd->name!=varName) cvd=g_codeParmList.prev();
  if (!cvd)
  {
    cvd=g_codeVarList.last();
    while (cvd && cvd->name!=varName) cvd=g_codeVarList.prev();
  }
  if (cvd) // variable found
  {
    //printf("variable found type=%s!\n",cvd->type.data());
    CodeClassDef *ccd=g_codeClassDict[cvd->type];
    if (ccd)
    {
      //printf("Class found!\n");
      OutputList result(&ol);
      if (getLink(ccd->name,memName,result)) 
      {
        //printf("Found result!\n");
        ol+=result;
        return;
      }
      char *s=ccd->bases.first();
      while (s)
      {
	OutputList result(&ol);
	if (getLink(s,memName,result)) 
	{
	  //printf("Found result!\n");
	  ol+=result;
	  return;
	}
	s=ccd->bases.next();
      }
    }
    else 
    {
      OutputList result(&ol);
      if (getLink(cvd->type,memName,result))
      {
        ol+=result;
      }
      else
      {
	codifyLines(memName);
      }
      return;
    }
  }
  else
  {
    ClassDef *vcd = getClass(g_classScope);
    if (vcd)
    {
      //printf("Found class for variable `%s'\n",varName);
      MemberName *vmn=memberNameDict[varName];
      if (vmn)
      {
	MemberNameIterator vmni(*vmn);
	MemberDef *vmd;
	for (;(vmd=vmni.current());++vmni)
	{
	  if (vmd->isVariable() && vmd->memberClass()==vcd)
	  {
	    //printf("Found variable type=%s\n",vmd->typeString());
	    ClassDef *mcd=stripClassName(vmd->typeString());
	    if (mcd)
	    {
	      MemberName *mmn=memberNameDict[memName];
	      if (mmn)
	      {
		MemberNameIterator mmni(*mmn);
		MemberDef *mmd;
		for (;(mmd=mmni.current());++mmni)
		{
		  if (mmd->memberClass()==mcd)
		  {
		    //ol.writeCodeLink(mcd->getReference(),mcd->getOutputFileBase(),
		    //	mmd->anchor(),memName);
		    writeMultiLineCodeLink(ol,mcd->getReference(),
			mcd->getOutputFileBase(),mmd->anchor(),memName);
		    return;
		  }
		}
	      }
	    }
	  }
	}
      }
    }
  }
  codifyLines(memName);
  return;
}

static QCString removeWhiteSpace(const char *s)
{
  QCString result;
  if (s)
  {
    const char *p=s;
    int c;
    while ((c=*p++))
    {
      if (c!=' ' && c!='\n' && c!='\r' && c!='\t') result+=c;
    }
  }
  return result;
}

static void generateFunctionLink(OutputList &ol,char *funcName)
{
  OutputList result(&ol);
  CodeClassDef *ccd=0;
  QCString locScope=g_classScope.copy();
  QCString locFunc=removeWhiteSpace(funcName);
  int i=locFunc.findRev("::");
  if (i>0)
  {
    locScope=locFunc.left(i);
    locFunc=locFunc.right(locFunc.length()-i-2);
  }
  //printf("generateFunctionLink(%s) classScope=%s\n",locFunc.data(),locScope.data());
  if (!locScope.isEmpty() && (ccd=g_codeClassDict[locScope]))
  {
    //printf("using classScope %s\n",g_classScope.data());
    char *s=ccd->bases.first();
    while (s)
    {
      if (getLink(s,locFunc,result,funcName)) 
      {
	ol+=result;
	return;
      }
      s=ccd->bases.next();
    }
  }
  if (getLink(locScope,locFunc,result,funcName))
  {
    ol+=result;
  }
  else
  {
    codifyLines(funcName);
  }
  return;
}

/*! counts the number of lines in the input */
static int countLines()
{
  const char *p=g_inputString;
  char c;
  int count=1;
  while ((c=*p++)) if (c=='\n') count++; 
  return count;
}

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    while( c < max_size && g_inputString[g_inputPosition] )
    {
	*buf = g_inputString[g_inputPosition++] ;
	c++; buf++;
    }
    return c;
}

#define SkipString 1

#define SkipCPP 2

#define SkipComment 3

#define SkipCxxComment 4

#define RemoveSpecialCComment 5

#define StripSpecialCComment 6

#define Body 7

#define FuncCall 8

#define MemberCall 9

#define MemberCall2 10

#define SkipInits 11

#define ClassName 12

#define Bases 13

#define SkipSharp 14

#define ReadInclude 15


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 561 "code.l"



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 448 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1994 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 563 "code.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 564 "code.l"
{
					  g_code->codify(yytext);
  					  BEGIN( ReadInclude ); 
					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 568 "code.l"
{ 
                                          codifyLines(yytext);
					  //g_code->codify(yytext);
  					  BEGIN( ClassName ); 
					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 573 "code.l"
{
					  //FileInfo *f;
					  bool ambig;
                                          FileDef *fd;
					  if ((fd=findFileDef(&inputNameDict,yytext,ambig)) &&
					      fd->isLinkable())
					  {
					    g_code->writeCodeLink(fd->getReference(),fd->getOutputFileBase(),0,yytext);
					  }
					  else
					  {
					    g_code->codify(yytext);
					  }
					  char c=yyinput();
					  QCString text;
					  text+=c;
					  g_code->codify(text);
					  BEGIN( Body );
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 592 "code.l"
{ 
  					  g_code->codify(yytext);
  					  BEGIN( SkipCPP ) ; 
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 596 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 599 "code.l"
{ 
  					  codifyLines(yytext);
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 602 "code.l"
{ 
  					  codifyLines(yytext);
					  BEGIN( Body ) ;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 606 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 609 "code.l"
{ 
  					  g_code->codify(yytext);
  					  g_curlyCount++;
  					  g_type.resize(0); 
					  g_name.resize(0);
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 615 "code.l"
{ 
  					  g_code->codify(yytext);
  					  g_inClass=FALSE; 
					  if (--g_curlyCount<=0) 
					  {
					    g_classScope.resize(0);
					    g_codeParmList.clear();
					  }
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 624 "code.l"
{ 
  					  g_code->codify(yytext);
  					  BEGIN( Body ); 
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 628 "code.l"
{
					  addType();
					  g_code->codify(yytext);
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 632 "code.l"
{
					  g_ccd.name=yytext;
					  addType();
					  generateClassLink(*g_code,yytext);
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 637 "code.l"
{
  					  codifyLines(yytext);
  					  BEGIN( Bases ); 
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 641 "code.l"
{
  					  g_code->codify(yytext);
					  g_curlyCount++;
					  g_inClass=TRUE;
					  if (!g_ccd.name.isEmpty())
					  {
					    g_classScope=g_ccd.name.copy();
					    CodeClassDef *cd=new CodeClassDef(g_ccd);
					    g_codeClassList.append(cd);
					    g_codeClassDict.insert(cd->name,cd);
					  }
					  BEGIN( Body );
 					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 654 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 657 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 660 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 663 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 666 "code.l"
{ 
					  //printf("%s:addBase(%s)\n",g_ccd.name.data(),yytext);
  					  g_ccd.bases.inSort(yytext); 
					  generateClassLink(*g_code,yytext);
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 671 "code.l"
{ 
  					  g_code->codify(yytext);
  					  g_sharpCount=1;
					  BEGIN ( SkipSharp );
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 676 "code.l"
{
  					  g_code->codify(yytext);
  					  ++g_sharpCount; 
					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 680 "code.l"
{ 
  					  g_code->codify(yytext);
  					  if (--g_sharpCount<=0)
					  BEGIN ( Bases );
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 685 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 26:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 690 "code.l"
{
  					  codifyLines(yytext);
  				          g_name.resize(0);g_type.resize(0);
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 694 "code.l"
{
  					  codifyLines(yytext);
  				          g_name.resize(0);g_type.resize(0);
  					}
	YY_BREAK
/*
<Body>([a-z_A-Z~][a-z_A-Z0-9]*)/([ \t]*)	{ 
					  generateClassLink(*g_code,yytext);
					  addType();
  					  name+=yytext; 
					}
  */
case 28:
YY_RULE_SETUP
#line 705 "code.l"
{ 
					  generateClassLink(*g_code,yytext);
  					  //codifyLines(yytext);
					  addType();
  					  g_name+=yytext; 
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 711 "code.l"
{
  					  addType();
					  //if (type.isEmpty())
					  QCString tmp=yytext;
					  generateFunctionLink(*g_code,yytext);
					  //else
  					  //  g_code->codify(yytext);
  					  g_bracketCount=1;
					  g_args.resize(0);
  					  g_name+=yytext; 
  					  BEGIN( FuncCall );
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 723 "code.l"
{
  					  g_code->codify(yytext);
  					  g_lastStringContext=YY_START;
  					  BEGIN( SkipString );
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 728 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 731 "code.l"
{
  					  g_code->codify(yytext);
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 734 "code.l"
{
  					  g_code->codify(yytext);
  					  BEGIN( g_lastStringContext );
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 738 "code.l"
{
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 741 "code.l"
{
  					  g_code->codify(yytext);
  					  g_name.resize(0);g_type.resize(0);
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 745 "code.l"
{
  					  g_code->codify(yytext);
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 748 "code.l"
{ g_code->codify(yytext); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 749 "code.l"
{ 
  					  g_code->codify(yytext);
  					  BEGIN( MemberCall ); 
					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 753 "code.l"
{
  					  if (!g_name.isEmpty())
					    generateMemberLink(*g_code,g_name,yytext);
					  else
  					    g_code->codify(yytext);
  					  g_name.resize(0);g_type.resize(0);
					  g_bracketCount=0;
					  BEGIN(FuncCall);
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 762 "code.l"
{ 
  					  g_code->codify(yytext);
    					  g_type.resize(0);
					  g_name.resize(0);
					  BEGIN(Body); 
					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 768 "code.l"
{
  					  g_code->codify(yytext);
  					  if (!g_type.isEmpty()) 
					    addVariable();
					  g_name.resize(0);
					  if (*yytext!=',') g_type.resize(0);
					  g_args.resize(0);
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 776 "code.l"
{
					  g_code->codify(yytext);
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 779 "code.l"
{
					  addParmType();
					  g_parmName=yytext; 
					  generateClassLink(*g_code,yytext);
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 784 "code.l"
{
  					  g_code->codify(yytext);
					  addParameter();
					  g_parmType.resize(0);g_parmName.resize(0);
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 789 "code.l"
{
  					  g_code->codify(yytext);
  					  g_bracketCount++; 
					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 793 "code.l"
{ 
  					  g_code->codify(yytext);
  					  if (--g_bracketCount<=0) 
					  g_name.resize(0);g_args.resize(0);
					  g_parmType.resize(0);g_parmName.resize(0);
  					  BEGIN( Body ); 
					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 800 "code.l"
{
  					  codifyLines(yytext);
  					  g_bracketCount=0;
					  if (!g_inClass && !g_type.isEmpty())
					    addVariable();
					  g_name.resize(0);g_type.resize(0);
					  g_parmType.resize(0);g_parmName.resize(0);
  					  BEGIN( Body );
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 809 "code.l"
{
					  addParameter();
					  g_parmType.resize(0);g_parmName.resize(0);
					  if (g_name.find("::")!=-1) setClassScope(g_name);
  					  codifyLines(yytext);
					  g_curlyCount++;
  					  g_type.resize(0); g_name.resize(0);
					  BEGIN( Body );
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 818 "code.l"
{
					  addParameter();
					  g_parmType.resize(0);g_parmName.resize(0);
					  if (g_name.find("::")!=-1) setClassScope(g_name);
  					  codifyLines(yytext);
  					  g_type.resize(0); g_name.resize(0);
					  BEGIN( SkipInits );
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 826 "code.l"
{ 
  					  g_code->codify(yytext);
					  g_curlyCount++; 
					  BEGIN( Body ); 
					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 831 "code.l"
{
					  generateClassLink(*g_code,yytext);
  					}
	YY_BREAK
case 52:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 834 "code.l"
{
					  generateFunctionLink(*g_code,yytext);
					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 837 "code.l"
{ 
  					  g_code->codify(yytext);
					  g_args=yytext; 
					  BEGIN( MemberCall2 ); 
					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 842 "code.l"
{ 
  					  if (!g_args.isEmpty())
					    generateMemberLink(*g_code,g_args,yytext);
					  else
  					    g_code->codify(yytext);
					  g_args.resize(0);
					  BEGIN( FuncCall );
					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 850 "code.l"
{
  					  g_code->codify(yytext);
    					  g_args=yytext;
    					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 854 "code.l"
{
  					  g_code->codify(yytext);
  					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 857 "code.l"
{
  					  g_code->codify(yytext);
  					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 860 "code.l"
{ 
  					  g_code->codify(yytext);
  					  BEGIN( g_lastCContext ) ; 
					}
	YY_BREAK
case 59:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 864 "code.l"
{ 
  					  //codifyLines(yytext);
  					  g_code->codify(yytext);
					  BEGIN( g_lastCContext ) ;
					}
	YY_BREAK
case 60:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 869 "code.l"
{
  					  g_yyLineNr+=QCString(yytext).contains('\n');
					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 872 "code.l"
{
  					  g_yyLineNr+=QCString(yytext).contains('\n');
                                          g_code->endCodeLine();
                                          if (g_yyLineNr<g_inputLines) 
                                          {
                                            startCodeLine(*g_code);
                                          }
  					  BEGIN(g_lastSpecialCContext);
  					}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 881 "code.l"
{
  					  BEGIN(g_lastSpecialCContext);
  					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 884 "code.l"

	YY_BREAK
case 64:
YY_RULE_SETUP
#line 885 "code.l"

	YY_BREAK
case 65:
YY_RULE_SETUP
#line 886 "code.l"
{ g_yyLineNr++; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 887 "code.l"

	YY_BREAK
case 67:
YY_RULE_SETUP
#line 888 "code.l"
{ // remove special one-line comment
  					  if (Config::stripCommentsFlag)
					  {
					    g_yyLineNr+=((QCString)yytext).contains('\n');
					    g_code->endCodeLine();
					    if (g_yyLineNr<g_inputLines) 
					    {
					      startCodeLine(*g_code);
					    }
					  }
					  else
					  {
					    codifyLines(yytext);
					  }
  					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 903 "code.l"
{ // remove special one-line comment
  					  if (Config::stripCommentsFlag)
					  {
					    g_yyLineNr++;
					    g_code->endCodeLine();
					    if (g_yyLineNr<g_inputLines) 
					    {
					      startCodeLine(*g_code);
					    }
					  }
					  else
					  {
					    codifyLines(yytext);
					  }
  					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 918 "code.l"
{ // strip special one-line comment
  					  if (Config::stripCommentsFlag)
					  {
					    char c[2]; c[0]='\n'; c[1]=0;
					    codifyLines(c);
					  }
					  else
					  {
					    codifyLines(yytext);
					  }
  					}
	YY_BREAK
case 70:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 929 "code.l"
{
					  if (Config::stripCommentsFlag)
  					  {
					    g_lastSpecialCContext = YY_START;
					    g_yyLineNr++;
					    BEGIN(RemoveSpecialCComment);
					  }
					  else
					  {
  					    g_lastCContext = YY_START ;
					    codifyLines(yytext);
					    BEGIN(SkipComment);
  					  }
					}
	YY_BREAK
case 71:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 943 "code.l"
{ // special C comment block at a new line
					  if (Config::stripCommentsFlag)
					  {
					    g_lastSpecialCContext = YY_START;
					    BEGIN(RemoveSpecialCComment);
					  }
					  else
					  {
  					    g_lastCContext = YY_START ;
					    g_code->codify(yytext);
					    BEGIN(SkipComment);
 					  }
					}
	YY_BREAK
case 72:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 956 "code.l"
{ // special C comment block half way a line
					  if (Config::stripCommentsFlag)
					  {
					    g_lastSpecialCContext = YY_START;
					    BEGIN(RemoveSpecialCComment);
					  }
					  else
					  {
  					    g_lastCContext = YY_START ;
					    g_code->codify(yytext);
					    BEGIN(SkipComment);
					  }
					}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 969 "code.l"
{ if (!Config::stripCommentsFlag)
  					  {
					    g_code->codify(yytext);
					  }
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 974 "code.l"
{ 
  					  g_code->codify(yytext);
  					  g_lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 979 "code.l"
{ 
  					  g_code->codify(yytext);
  					  g_lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 984 "code.l"
{
  					  codifyLines(yytext); 
  					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 987 "code.l"
{
  					  g_code->codify(yytext);
					}
	YY_BREAK
/*
<*>([ \t\n]*"\n"){2,}			{ // combine multiple blank lines
  					  //QCString sepLine=yytext;
  					  //g_code->codify("\n\n");
  					  //g_yyLineNr+=sepLine.contains('\n'); 
  					  //char sepLine[3]="\n\n";
  					  codifyLines(yytext);
					}
  */
case 78:
YY_RULE_SETUP
#line 1000 "code.l"
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(RemoveSpecialCComment):
			case YY_STATE_EOF(StripSpecialCComment):
			case YY_STATE_EOF(Body):
			case YY_STATE_EOF(FuncCall):
			case YY_STATE_EOF(MemberCall):
			case YY_STATE_EOF(MemberCall2):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(ClassName):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(SkipSharp):
			case YY_STATE_EOF(ReadInclude):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 448 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 448 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 447);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 1000 "code.l"


/*@ ----------------------------------------------------------------------------
 */

void initParseCodeContext()
{
  g_codeClassList.setAutoDelete(TRUE);
  g_codeVarList.setAutoDelete(TRUE);
  g_codeParmList.setAutoDelete(TRUE);
  g_codeClassDict.clear();
  g_codeClassList.clear();
  g_codeVarList.clear();
  g_codeParmList.clear();
  g_ccd.bases.clear();
  g_anchorCount = 0;
}

void parseCode(OutputList &ol,const char *className,const QCString &s, 
                  bool exBlock, const char *exName,FileDef *fd,
		  int startLine,int endLine,bool inlineFragment)
{
  g_code = new OutputList(&ol);
  if (s.isEmpty()) return;
  g_inputString   = s;
  g_inputPosition = 0;
  if (endLine!=-1)
    g_inputLines  = endLine+1;
  else
    g_inputLines  = countLines();
  if (startLine!=-1)
    g_yyLineNr    = startLine;
  else
    g_yyLineNr    = 1;
  g_curlyCount    = 0;
  g_bracketCount  = 0;
  g_sharpCount    = 0;
  g_classScope    = className;
  g_exampleBlock  = exBlock; 
  g_exampleName   = exName;
  g_sourceFileDef = fd;
  g_exampleFile   = convertSlashes(g_exampleName,TRUE)+"-example";
  g_includeCodeFragment = inlineFragment;
  startCodeLine(*g_code);
  g_type.resize(0);
  g_name.resize(0);
  g_args.resize(0);
  g_parmName.resize(0);
  g_parmType.resize(0);
  codeYYrestart( codeYYin );
  BEGIN( Body );
  codeYYlex();
  //if (g_yyLineNr<=g_inputLines) code->endCodeLine();
  ol+=*g_code;
  delete g_code;
  return;
}

extern "C" { // some bogus code to keep the compiler happy
//  int  codeYYwrap() { return 1 ; }
  void codeYYdummy() { yy_flex_realloc(0,0); } 
}
