#define yy_create_buffer codeYY_create_buffer
#define yy_delete_buffer codeYY_delete_buffer
#define yy_scan_buffer codeYY_scan_buffer
#define yy_scan_string codeYY_scan_string
#define yy_scan_bytes codeYY_scan_bytes
#define yy_flex_debug codeYY_flex_debug
#define yy_init_buffer codeYY_init_buffer
#define yy_flush_buffer codeYY_flush_buffer
#define yy_load_buffer_state codeYY_load_buffer_state
#define yy_switch_to_buffer codeYY_switch_to_buffer
#define yyin codeYYin
#define yyleng codeYYleng
#define yylex codeYYlex
#define yyout codeYYout
#define yyrestart codeYYrestart
#define yytext codeYYtext

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 77
#define YY_END_OF_BUFFER 78
static yyconst short int yy_acclist[771] =
    {   0,
       31,   31,   78,   76,   77,   66,   75,   77,    1,   76,
       77,   76,   77,   76,   77,   76,   77,   31,   76,   77,
       31,   66,   75,   77,    1,   31,   76,   77,   33,   76,
       77,   31,   76,   77,   76,   77,   31,   76,   77,   31,
       76,   77,    6,   76,   77,    8,   66,   75,   77,    1,
        6,   76,   77,    6,   76,   77,    6,   76,   77,    6,
       76,   77,    6,   76,   77,   56,   76,   77,   56,   76,
       77,    1,   56,   76,   77,   76,   77,   76,   77,   56,
       76,   77,   76,   77,   76,   77,   58,   66,   75,   77,
        1,   76,   77,   76,   77,   76,   77,   76,   77,   62,

       65,   76,   77,   64,   66,   75,   77,    1,   62,   65,
       76,   77,   65,   76,   77,   62,   65,   76,   77,   62,
       65,   76,   77,   62,   65,   76,   77,   76,   77,   66,
       75,   77,    1,   76,   77,   30,   76,   77,   76,   77,
       40,   76,   77,   76,   77,   37,   76,   77,   41,   76,
       77,   35,   76,   77, 8220,   76,   77,16412,16413, 8220,
       76,   77,16412,16413, 8220,   76,   77,16412,16413, 8220,
       76,   77,16412,16413, 8220,   76,   77,16412,16413, 8220,
       76,   77,16412,16413, 8220,   76,   77,16412,16413, 8220,
       76,   77,16412,16413, 8220,   76,   77,16412,16413, 8220,

       76,   77,16412,16413, 8220,   76,   77,16412,16413, 8220,
       76,   77,16412,16413, 8220,   76,   77,16412,16413, 8220,
       76,   77,16412,16413, 8220,   76,   77,16412,16413,   10,
       76,   77,   11,   76,   77,   76,   77,   76,   77,    5,
       76,   77,   44,   76,   77,   45,   76,   77,   43,   76,
       77,   42,   76,   77,16436,   39,   76,   77,   39,   76,
       77,   66,   75,   77,    1,   39,   76,   77,   30,   39,
       76,   77,   39,   76,   77,   39,   76,   77,   39,   76,
       77,   76,   77,16422,   39,   76,   77,   39,   76,   77,
       39,   76,   77,   42,   76,   77,16437,16438,   50,   76,

       77,   49,   76,   77,   76,   77,   66,   75,   77,   13,
       76,   77,   15,   76,   77,   12,   76,   77,   14,   76,
       77,   16,   76,   77,   76,   77,   76,   77,   25,   76,
       77,   22,   76,   77,   21,   76,   77,   21,   76,   77,
       21,   76,   77,   76,   77,   23,   76,   77,   24,   76,
       77,   76,   77,16388,   73,   74,   73,   74,   31,   31,
       31,   31,   32,   73,   31,   32,   74,   34,   31,   31,
       31,   32,   73,   31,   32,   74,    9,   74,    7,    9,
       74,   56,   56,   57,   55,   74,   56,   55,   74,   58,
       73,   74,   73,   74,   62,   61,   63,   73,   62,   63,

       74,   62,   62,   63,   73,   62,   63,   74,   37,   41,
     8220, 8220, 8221, 8220,16412,16413, 8220,16412,16413, 8220,
    16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,
    16413, 8220,16412,16413, 8220,16412,16413,   27, 8220,16412,
    16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,16413,
     8220,16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,
    16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,
    16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,16413,
        5,   48,   46,   47,   51, 8244,   42,16436,   42, 8230,
    16422,16422, 8245, 8246,   42,16437,16438,   50,   15,   16,

       13,   15,   14,   16,   21,   21,   21,   21, 8196,16388,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       60,   62,   62,   62,   36,   36, 8220,16412,16413, 8220,
    16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,
    16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,16413,
     8220,16412,16413,   27, 8220,   27, 8220,   26, 8221, 8220,
    16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,
    16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,16413,
     8220,16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,
     8220, 8220,16412,16413,16422,16422,   21,   21,   21,   21,

    16388,   71,   72,   68,   70,   71,   67,   68,   31,   31,
       31,   71,   31,   31,   72,   31,   31,   68,   31,   31,
       31,   70,   71,   31,   31,   67,   68,   71,   58,   71,
       72,   58,   68,   70,   71,   58,   70,   71,   58,   67,
       68,   60,   62,   62,   62, 8220,16412,16413, 8220,16412,
    16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,16413,
     8220,16412,16413,   26, 8220,16412,16413, 8220,16412,16413,
     8220,16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,
    16412,16413, 8220,16412,16413,   21,   21,   21,   21,   69,
       66,   70,   67,   31,   69,   31,   31,   66,   31,   70,

       31,   31,   67,   70,   58,   70,   58,   67,   62, 8220,
    16412,16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,
    16413, 8220,16412,16413, 8220,16412,16413, 8220,16412,16413,
     8220,16412,16413,   21,   21,   21,   21,   31,   31,    3,
     8220,    3, 8220, 8220,16412,16413, 8220,16412,16413, 8220,
    16412,16413,   21,   21,   18,   21,   21,   59, 8220,16412,
    16413,   20,   21,   21,   17,   21,   21,   19,   21,    2
    } ;

static yyconst short int yy_accept[461] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    6,    9,   12,   14,   16,   18,
       21,   25,   29,   32,   35,   37,   40,   43,   46,   50,
       54,   57,   60,   63,   66,   69,   72,   76,   78,   80,
       83,   85,   87,   91,   94,   96,   98,  100,  104,  108,
      113,  116,  120,  124,  128,  130,  133,  136,  139,  141,
      144,  146,  149,  152,  155,  160,  165,  170,  175,  180,
      185,  190,  195,  200,  205,  210,  215,  220,  225,  230,

      233,  236,  238,  240,  243,  246,  249,  252,  256,  259,
      262,  265,  269,  273,  276,  279,  282,  285,  288,  291,
      294,  299,  302,  305,  307,  310,  313,  316,  319,  322,
      325,  327,  329,  332,  335,  338,  341,  344,  346,  349,
      352,  355,  355,  355,  356,  357,  357,  357,  358,  359,
      360,  361,  362,  365,  368,  369,  370,  371,  374,  377,
      379,  380,  382,  383,  384,  384,  385,  387,  388,  390,
      390,  391,  392,  393,  393,  393,  394,  395,  396,  397,
      399,  402,  403,  404,  406,  409,  409,  409,  409,  409,
      409,  410,  411,  411,  412,  413,  414,  417,  420,  423,

      426,  429,  432,  435,  438,  442,  445,  448,  451,  454,
      457,  460,  463,  466,  469,  472,  475,  478,  478,  481,
      481,  482,  482,  482,  483,  484,  485,  486,  486,  487,
      489,  490,  490,  490,  490,  490,  490,  491,  492,  492,
      493,  493,  493,  494,  494,  495,  498,  499,  499,  499,
      500,  501,  501,  502,  503,  504,  505,  505,  505,  506,
      507,  508,  509,  509,  510,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  512,  513,  514,
      515,  516,  517,  518,  519,  520,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  522,  523,  524,  525,

      526,  527,  527,  530,  530,  533,  536,  539,  542,  545,
      548,  551,  554,  556,  558,  560,  563,  566,  569,  572,
      575,  578,  581,  584,  587,  590,  591,  592,  595,  595,
      595,  596,  596,  596,  597,  598,  599,  600,  601,  602,
      602,  602,  603,  603,  604,  604,  605,  605,  605,  607,
      607,  609,  610,  611,  613,  614,  616,  617,  619,  620,
      621,  624,  625,  628,  629,  631,  631,  632,  632,  634,
      634,  634,  636,  639,  639,  642,  642,  643,  643,  644,
      645,  646,  649,  652,  655,  658,  661,  664,  665,  668,
      671,  674,  677,  680,  683,  686,  686,  687,  688,  689,

      690,  691,  691,  692,  693,  693,  694,  696,  697,  699,
      701,  702,  704,  705,  707,  707,  709,  709,  710,  713,
      716,  719,  722,  725,  728,  731,  734,  734,  735,  736,
      737,  738,  738,  738,  739,  740,  740,  742,  744,  747,
      750,  753,  753,  754,  755,  757,  758,  759,  762,  762,
      764,  765,  767,  767,  768,  768,  770,  770,  771,  771
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    1,    8,    9,   10,
       11,   12,    1,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,    1,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       21,   24,    1,    1,   23,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   23,   34,   35,   36,   37,
       38,   39,   23,   40,   41,   42,   43,   44,   45,   23,
       46,   23,   47,    1,   48,   49,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    2,    3,    4,    1,    5,    1,    1,    1,    6,
        1,    7,    1,    8,    9,   10,   11,   12,    1,    1,
        1,   13,   14,   15,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,    1,    1,   16
    } ;

static yyconst short int yy_base[514] =
    {   0,
        0,    3,    5,   11,   20,   29,   35,   38,   45,   53,
       55,   60,   62,   71,   87,   18,  136,   10,  185,   44,
      229,   66,  275,   68,  324,  234,  373,  235,  420,  423,
      445,  237, 1529, 2037,  428, 2037,    6,  493,   65,    0,
      494,    0, 2037,   67,    0,  495,  226, 2037,  496, 2037,
      228, 1525,  497,  229,    0,  426,    0, 1511,  231,  502,
      417, 1523,  499, 1522,  504,  503,  505,    0,  520,    0,
     1508,  419,  521,  425,  522,  525,  528, 2037, 1499, 2037,
     1500, 2037, 1500, 1496,  545,  548,  513,  532,  531,  536,
      501,  521,  535,  539,  552,  542,  556,  549,  562, 2037,

     2037,  531,  604, 1511, 2037,  598, 2037,  600, 2037,  621,
      624,  628, 2037, 1488,  597, 1493,  631,  634,  648,  631,
      653,    0, 2037,  651,  656,  636,   83, 2037,    0, 1507,
      659,  498, 2037, 2037,    0,  206, 1471,  663, 2037, 2037,
      654,  596,  666,  668,  676,  681,  672,  681,  680,    0,
      685,  678,  690,  684, 2037,  689,  687,  699,  702,  703,
     2037,  704,    0,  617, 1485, 2037,  707,  712,  710, 1495,
     2037,  722,  726,  714,  729,  732,  733,    0,  500,  728,
      734,  741,  735,  741,  743,  752, 1477,  758, 1485, 1484,
     2037, 1475,  761,  765,  769, 2037,  391,  741,  747,  737,

      750,  756,  757,  766,  801,  765,  772,  775,  778,  783,
      787,  796,  800,  804,  793,  805,  816,  849,  852,  861,
     1489, 1457,  864, 2037, 2037, 2037, 2037, 1467, 2037,  860,
        0,  869, 1470,  882,  886,  889, 2037,  892,  910,    0,
      913,  918, 2037, 1465, 2037,  924,    0,  858,  906,  719,
     1480,  934,  823,  783,    0, 1477,  938,  711,    0,  868,
     1452, 1437,  928, 2037,  937,    0,  790,  853, 1464,  906,
     1471,  943,  941, 1445,  907, 1442,  946,  944,  955,  956,
      960,  964,  965,  971,  976,  983,  962,  987, 1438,  993,
      988,  994,  999, 1413,  878, 1006,   40,  996,  802, 2037,

     1404, 1014,  779, 1017,  985,  988,  995,  998,  904,  992,
     1002, 1001, 1044, 1047, 2037, 1023, 1015, 1018, 1026, 1029,
     1032, 1036, 1039, 1040, 1049, 1083, 1085, 1092, 1372, 1094,
     1097, 1101, 1104, 1106, 1349, 1347, 1344, 1235, 1103,    0,
     1272, 2037, 1258, 2037, 1270, 2037,    0, 1269, 2037, 1268,
     2037, 1105, 1107,    0, 1252,    0, 1117,    0, 1112, 1124,
        0, 1129,    0, 1254, 2037, 1073, 1249, 1237, 2037, 1130,
     1230, 1208, 2037, 1200, 2037, 1135, 1142, 1143,  961, 1137,
     1144, 1116, 1120, 1119, 1131, 1124, 1127, 2037, 1135, 1139,
     1144, 1136, 1145, 1152, 1155, 1127, 1114, 1105, 1093, 1079,

     2037, 1088, 1181, 2037, 1057, 2037,    0, 1188, 1188,    0,
     1196,    0, 1052, 2037, 1011, 2037, 1195, 1189, 1203, 1172,
     1173, 1181, 1180, 1184, 1187, 1200,  959,  883,  876,  870,
      831, 1216,  736, 1229,  641,    0, 1232, 1235, 1206, 1213,
     1218,  578,  575,  519,    0,  503, 2037, 1222,  220,    0,
       51,    0,    1,    0, 1256,    0, 1258, 2037, 2037, 1278,
     1294, 1310, 1326, 1342, 1358, 1374, 1390, 1406, 1422, 1438,
     1454, 1469, 1482, 1491, 1504, 1517, 1530, 1026, 1255, 1256,
     1540, 1553, 1568, 1572, 1585, 1600, 1606, 1620, 1636, 1652,
     1668, 1684, 1700, 1716, 1732, 1748, 1764, 1780, 1796, 1812,

     1828, 1844, 1860, 1876, 1892, 1908, 1924, 1940, 1956, 1972,
     1988, 2004, 2020
    } ;

static yyconst short int yy_def[514] =
    {   0,
      460,  460,  461,  461,  462,  462,  463,  463,  464,  464,
      465,  465,  460,  460,  459,   15,  459,   17,  459,   19,
       17,   21,  459,   23,  459,   25,  459,   27,  460,  460,
      459,   31,  459,  459,  459,  459,  459,  459,  459,  466,
      466,  466,  459,  466,  467,  466,  466,  459,  459,  459,
      459,  459,  459,  459,  468,  468,  468,  459,  459,  468,
      459,  469,  459,  469,  469,  469,  469,  470,  459,  470,
      459,  470,  470,  470,  459,  459,  459,  459,  471,  459,
      459,  459,  459,  459,  472,  472,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,  459,

      459,  473,  459,  459,  459,  459,  459,  474,  459,  459,
      459,  459,  459,  471,  459,  459,  475,  476,  459,  459,
      477,  478,  459,  459,  459,  459,  459,  459,  479,  459,
      459,  459,  459,  459,  480,  480,  480,  459,  459,  459,
      481,  459,  459,  459,  459,  459,  459,  459,  459,  466,
      466,  466,  466,  466,  459,  466,  466,  466,  466,  459,
      459,  459,  468,  468,  459,  459,  459,  468,  459,  469,
      459,  469,  469,  469,  469,  469,  469,  470,  459,  459,
      470,  470,  470,  459,  470,  459,  459,  459,  459,  471,
      459,  459,  482,  459,  459,  459,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,  473,  483,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  474,
      484,  459,  459,  459,  485,  459,  459,  475,  476,  486,
      459,  459,  459,  459,  459,  477,  478,  459,  459,  459,
      459,  459,  459,  459,  479,  459,  459,  459,  480,  480,
      480,  480,  459,  459,  481,  487,  459,  459,  488,  488,
      489,  459,  459,  490,  490,  491,  466,  466,  492,  492,
      493,  466,  466,  494,  494,  495,  496,  496,  497,  469,
      469,  498,  498,  499,  459,  459,  500,  470,  501,  459,

      459,  482,   86,  473,   86,   86,   86,   86,   86,   86,
       86,   86,  459,  459,  459,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,  459,  459,  483,  459,  485,
      475,  476,  459,  486,  480,  480,  480,  480,  487,  502,
      503,  459,  459,  459,  489,  459,  504,  505,  459,  491,
      459,  506,  507,  466,  466,  466,  493,  466,  508,  509,
      466,  495,  466,  469,  459,  469,  469,  497,  459,  510,
      511,  469,  459,  499,  459,  459,  459,  459,  500,  512,
      501,   86,   86,   86,   86,   86,   86,  459,   86,   86,
       86,   86,   86,   86,   86,  459,  480,  480,  480,  480,

      459,  503,  459,  459,  505,  459,  466,  507,  466,  466,
      509,  466,  469,  459,  511,  459,  459,  512,   86,   86,
       86,   86,   86,   86,   86,   86,  459,  480,  480,  480,
      480,  459,  459,  466,  466,  513,  459,  459,   86,   86,
       86,  459,  480,  480,  480,  480,  459,   86,  459,  480,
      480,  480,  459,  480,  459,  480,  459,  459,    0,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459
    } ;

static yyconst short int yy_nxt[2087] =
    {   0,
      459,  333,   35,   36,   38,   35,   36,   41,   42,  237,
       43,   38,   46,   41,   42,   37,   43,  144,   39,  103,
       44,  145,   49,   50,  104,   39,   47,  456,   45,  455,
       53,   49,   50,   39,   45,   51,   56,   35,   57,   60,
       35,   57,  346,   52,   54,  119,   58,   63,   64,   58,
       59,  345,   52,   61,   66,   63,   64,   69,   70,  120,
       65,   73,   69,   70,   35,   36,   71,   38,   67,   38,
       72,   71,   38,   35,   36,   74,  148,   37,  153,  454,
      149,   39,  154,   39,  254,  254,   39,   34,   75,   76,
       77,   34,   78,   34,   34,   79,   34,   34,   34,   80,

       81,   82,   37,   83,   84,   80,   34,   80,   34,   85,
       34,   86,   87,   88,   89,   90,   91,   92,   85,   93,
       85,   85,   85,   94,   85,   85,   95,   96,   97,   98,
       85,   99,   85,  100,  101,  102,   34,   34,   35,   36,
       34,   78,   34,   34,   79,  105,  106,   34,  107,   34,
       34,   37,   34,   34,   34,   34,   34,   34,  108,   34,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,   34,   34,   34,  109,  110,  111,  112,  109,
      113,  109,  109,  114,   34,  109,  109,  109,  109,  109,

      115,   34,  116,  109,  109,  109,  109,  117,  109,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  109,  109,  118,   34,  131,  138,  158,   38,  144,
      148,  159,  144,  160,  162,  260,  167,  453,  261,   39,
       39,  121,   39,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,   34,   34,   35,   36,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       37,   34,   34,   34,   34,   34,   34,  122,   34,  122,

      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  123,   34,   34,   34,  124,  125,   36,   34,   34,
       34,  126,   34,   34,   34,  126,   34,   34,   34,   37,
       34,  127,  128,   34,   34,   34,  129,   34,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      130,   34,   34,   34,  132,   35,   36,   34,   34,   34,
       34,   34,   34,   34,   34,  133,   34,   34,   37,   34,
       34,   34,  134,   34,   34,  135,   34,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  136,  135,  135,  135,  135,  137,  135,  135,  130,
       34,   34,   35,   36,   38,   35,   36,  164,  148,  142,
      180,  197,  169,  197,  181,   37,  184,  165,   39,  139,
      185,  140,  139,  143,  140,   34,   34,   35,   36,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  141,
       37,  141,   34,   34,   34,   34,   34,  141,   34,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,   34,   34,   34,  146,  151,  156,  142,  146,  258,

      142,  295,  296,  168,  174,  171,  171,  171,  147,  152,
      157,  143,  147,  165,  143,  172,  176,  147,  175,  173,
      177,  142,  182,  186,  186,  186,  188,  186,  186,  186,
      186,  186,  218,  218,  218,  143,  183,  452,  207,  187,
      143,  197,  187,  197,  251,  187,  194,  195,  186,  194,
      195,  186,  200,  197,  196,  197,  201,  196,  208,  204,
      451,  197,  187,  197,  205,  187,  202,  209,  205,  203,
      206,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      210,  197,  197,  211,  197,  216,  212,  213,  198,  197,
      199,  197,  197,  217,  197,  214,  197,  142,  197,  223,

      223,  215,  197,  450,  197,  220,  186,  186,  144,  227,
      221,  143,  145,  228,  229,  224,  225,  231,  164,  147,
      449,  187,  232,  232,  232,  234,  232,  232,  165,  232,
      232,  232,  236,  232,  232,  239,  239,  239,  233,  143,
      237,  233,  148,  253,  226,  233,  149,  253,  233,  241,
      232,  232,  248,  249,  242,  242,  278,  252,  249,  264,
      257,  249,  243,  147,  263,  233,  244,  245,  250,  266,
      231,  143,  269,  250,  147,  264,  250,  267,  147,  270,
      271,  268,  146,  272,  276,  274,  151,  273,  281,  277,
      156,  271,  275,  278,  279,  276,  147,  251,  282,  281,

      152,  280,  283,  284,  157,  251,  286,  271,  276,  251,
      285,  271,  258,  168,  276,  174,  171,  286,  271,  276,
      254,  254,  271,  165,  171,  276,  287,  147,  171,  175,
      289,  171,  269,  288,  171,  171,  292,  294,  297,  270,
      290,  289,  182,  293,  291,  274,  272,  299,  294,  297,
      298,  268,  275,  186,  186,  186,  183,  251,  299,  188,
      186,  186,  302,  302,  302,  306,  194,  195,  186,  187,
      195,  195,  186,  143,  196,  187,  205,  197,  187,  197,
      309,  197,  187,  197,  254,  254,  187,  197,  305,  197,
      307,  308,  197,  310,  340,  311,  197,  197,  197,  197,

      312,  340,  313,  314,  351,  316,  197,  197,  197,  304,
      315,  205,  197,  350,  197,  197,  317,  197,  197,  197,
      197,  197,  205,  197,  318,  197,  319,  197,  320,  197,
      253,  323,  321,  197,  253,  197,  197,  324,  197,  322,
      197,  197,  197,  197,  197,  197,  197,  197,  325,  205,
      218,  218,  218,  326,  327,  446,  197,  341,  197,  248,
      249,  196,  220,  186,  186,  223,  223,  221,  341,  227,
      232,  232,  232,  228,  229,  250,  147,  231,  187,  295,
      296,  224,  225,  234,  232,  232,  233,  330,  330,  330,
      236,  232,  232,  236,  232,  232,  445,  143,  237,  233,

      335,  237,  444,  233,  251,  336,  233,  249,  249,  233,
      226,  239,  239,  239,  241,  232,  232,  459,  459,  242,
      242,  344,  344,  250,  443,  242,  242,  243,  147,  263,
      233,  244,  245,  243,  332,  252,  249,  244,  245,  257,
      249,  231,  264,  147,  384,  348,  197,  347,  353,  143,
      352,  250,  266,  147,  347,  250,  348,  352,  264,  353,
      342,  342,  358,  346,  365,  345,  355,  150,  359,  360,
      150,  356,  345,  366,  251,  359,  349,  170,  342,  342,
      360,  349,  355,  345,  251,  363,  150,  150,  350,  365,
      171,  356,  371,  442,  349,  171,  373,  370,  170,  349,

      380,  373,  367,  371,  370,  366,  350,  376,  377,  170,
      170,  380,  382,  416,  367,  302,  302,  302,  218,  218,
      218,  378,  205,  205,  383,  197,  386,  197,  197,  387,
      197,  187,  197,  385,  197,  197,  247,  197,  197,  247,
      197,  197,  197,  197,  197,  313,  314,  186,  314,  314,
      186,  205,  205,  315,  171,  197,  388,  197,  197,  406,
      389,  187,  304,  197,  187,  197,  197,  393,  390,  197,
      391,  197,  205,  392,  197,  171,  197,  394,  197,  197,
      197,  197,  197,  395,  326,  327,  327,  327,  367,  197,
      403,  197,  196,  326,  327,  330,  330,  330,  236,  232,

      232,  196,  239,  239,  239,  333,  237,  333,  264,  409,
      401,  233,  402,  237,  233,  237,  150,  404,  266,  358,
      150,  431,  345,  150,  264,  430,  412,  150,  401,  405,
      402,  363,  414,  429,  350,  404,  376,  377,  428,  406,
      345,  170,  332,  376,  377,  170,  351,  405,  405,  205,
      378,  205,  350,  427,  417,  350,  197,  378,  197,  419,
      197,  197,  197,  420,  197,  424,  421,  197,  422,  197,
      425,  197,  426,  197,  423,  197,  197,  197,  197,  197,
      205,  197,  432,  205,  197,  197,  197,  197,  419,  434,
      409,  406,  197,  402,  197,  197,  433,  197,  412,  436,

      405,  405,  375,  435,  437,  438,  436,  440,  439,  205,
      171,  402,  197,  197,  197,  197,  205,  432,  205,  405,
      197,  197,  197,  197,  197,  419,  197,  197,  441,  197,
      434,  433,  416,  437,  438,  186,  438,  438,  186,  369,
      197,  196,  197,  197,  435,  197,  197,  205,  448,  187,
      205,  171,  187,  197,  205,  197,  171,  457,  197,  457,
      197,  458,  197,  458,  197,  255,  259,  356,  255,  259,
      351,  406,  346,  344,  403,  458,  400,  458,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   40,   40,   40,   40,   40,   40,

       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,  150,  150,  150,  150,  399,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  398,  150,
      155,  155,  397,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  163,  163,  396,  163,
      163,  163,  300,  163,  163,  375,  163,  163,  163,  163,
      163,  163,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  178,  178,
      369,  178,  178,  178,  351,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  189,  189,  343,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      197,  197,  197,  346,  197,  343,  338,  337,  256,  197,
      197,  256,  197,  219,  219,  219,  245,  235,  229,  329,
      222,  192,  301,  300,  193,  219,  230,  171,  230,  230,

      166,  230,  230,  262,  230,  238,  238,  238,  256,  238,
      235,  190,  222,  193,  238,  238,  192,  238,  240,  240,
      240,  191,  190,  179,  171,  171,  166,  161,  459,  459,
      240,  246,  246,  459,  459,  246,  459,  246,  246,  459,
      246,  246,  459,  246,  265,  459,  459,  459,  265,  265,
      265,  459,  265,  265,  303,  303,  303,  459,  459,  459,
      459,  459,  459,  459,  303,  459,  303,  459,  303,  328,
      328,  459,  459,  328,  459,  459,  459,  459,  328,  459,
      459,  328,  231,  231,  459,  231,  331,  331,  331,  459,
      459,  459,  459,  459,  459,  459,  331,  459,  331,  459,

      331,  334,  459,  459,  459,  334,  459,  459,  459,  459,
      334,  459,  459,  334,  339,  459,  339,  459,  459,  339,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  459,
      342,  342,  342,  342,  342,  342,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  459,  349,  349,  349,  349,  349,  349,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,

      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  374,  374,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  401,  401,  401,  401,  401,  401,
      459,  401,  401,  459,  401,  401,  401,  401,  401,  401,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  404,  404,  404,  404,
      404,  404,  459,  404,  404,  459,  404,  404,  404,  404,
      404,  404,  405,  405,  405,  405,  405,  405,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,

      415,  415,  415,  415,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      447,  447,  447,  447,  447,  447,  459,  447,  447,  459,
      447,  447,  447,  447,  447,  447,   33,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459
    } ;

static yyconst short int yy_chk[2087] =
    {   0,
        0,  240,    1,    1,    2,    2,    2,    3,    3,  240,
        3,   18,    4,    4,    4,    1,    4,   37,    2,   16,
        3,   37,    5,    5,   16,   18,    4,  454,    3,  453,
        6,    6,    6,   16,    4,    5,    7,    7,    7,    8,
        8,    8,  297,    5,    6,   20,    7,    9,    9,    8,
        7,  297,    6,    8,   10,   10,   10,   11,   11,   20,
        9,   12,   12,   12,   13,   13,   11,   22,   10,   24,
       11,   12,   14,   14,   14,   12,   39,   13,   44,  451,
       39,   22,   44,   24,  127,  127,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   21,   26,   28,   47,   32,   51,
       54,   47,   59,   51,   54,  136,   59,  449,  136,   26,
       28,   21,   32,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   29,   29,   30,   30,   30,   56,   61,   35,
       72,  197,   61,  197,   72,   29,   74,   56,   30,   29,
       74,   29,   30,   35,   30,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   38,   41,   46,   49,   53,  132,

       63,  179,  179,   60,   66,   66,   65,   67,   38,   41,
       46,   49,   53,   60,   63,   65,   67,   60,   66,   65,
       67,   69,   73,   75,   75,   75,   76,   76,   76,   77,
       77,   77,  102,  102,  102,   69,   73,  446,   91,   75,
       76,   91,   76,   91,  132,   77,   85,   85,   85,   86,
       86,   86,   87,   87,   85,   87,   88,   86,   92,   89,
      444,   92,   85,   92,   93,   86,   88,   94,   89,   88,
       90,   89,   88,   89,   88,   93,   90,   93,   90,   94,
       95,   94,   96,   96,   96,   98,   96,   97,   86,   98,
       86,   98,   95,   99,   95,   97,   97,  142,   97,  106,

      106,   97,   99,  443,   99,  103,  103,  103,  115,  108,
      103,  142,  115,  108,  108,  106,  106,  108,  164,  103,
      442,  103,  110,  110,  110,  111,  111,  111,  164,  112,
      112,  112,  117,  117,  117,  118,  118,  118,  110,  111,
      117,  111,  120,  126,  106,  112,  120,  126,  117,  119,
      119,  119,  124,  124,  121,  121,  435,  125,  125,  141,
      131,  131,  121,  119,  138,  119,  121,  121,  124,  141,
      121,  125,  144,  125,  131,  141,  131,  143,  138,  144,
      145,  143,  146,  147,  149,  148,  151,  147,  154,  152,
      156,  145,  148,  152,  153,  149,  146,  124,  157,  154,

      151,  153,  157,  158,  156,  131,  159,  160,  162,  138,
      158,  167,  258,  168,  169,  174,  174,  159,  160,  162,
      250,  250,  167,  168,  172,  169,  172,  168,  173,  174,
      173,  175,  180,  172,  176,  177,  176,  177,  181,  180,
      175,  173,  182,  176,  175,  184,  183,  185,  177,  181,
      183,  433,  184,  186,  186,  186,  182,  258,  185,  188,
      188,  188,  193,  193,  193,  200,  194,  194,  194,  186,
      195,  195,  195,  188,  194,  188,  198,  200,  193,  200,
      202,  198,  194,  198,  254,  254,  195,  199,  199,  199,
      201,  201,  201,  203,  267,  204,  202,  203,  202,  203,

      204,  267,  205,  205,  299,  206,  204,  206,  204,  193,
      205,  207,  207,  299,  207,  208,  208,  208,  209,  303,
      209,  303,  209,  210,  210,  210,  211,  211,  212,  211,
      253,  215,  213,  215,  253,  215,  212,  216,  212,  213,
      213,  205,  213,  205,  214,  216,  214,  216,  217,  214,
      218,  218,  218,  219,  219,  431,  217,  268,  217,  248,
      248,  219,  220,  220,  220,  223,  223,  220,  268,  230,
      232,  232,  232,  230,  230,  248,  220,  230,  220,  295,
      295,  223,  223,  234,  234,  234,  232,  235,  235,  235,
      236,  236,  236,  238,  238,  238,  430,  234,  236,  234,

      260,  238,  429,  235,  248,  260,  236,  249,  249,  238,
      223,  239,  239,  239,  241,  241,  241,  270,  275,  242,
      242,  270,  275,  249,  428,  246,  246,  242,  241,  263,
      241,  242,  242,  246,  235,  252,  252,  246,  246,  257,
      257,  246,  265,  263,  309,  273,  309,  272,  278,  252,
      277,  252,  265,  257,  272,  257,  273,  277,  265,  278,
      279,  280,  281,  379,  287,  281,  279,  280,  282,  283,
      279,  280,  379,  287,  263,  282,  284,  287,  279,  280,
      283,  285,  284,  281,  257,  286,  284,  285,  286,  288,
      291,  285,  291,  427,  284,  290,  292,  290,  288,  285,

      298,  293,  288,  291,  290,  292,  286,  296,  296,  292,
      293,  298,  306,  415,  293,  302,  302,  302,  304,  304,
      304,  296,  305,  307,  308,  305,  311,  305,  306,  312,
      306,  302,  310,  310,  310,  307,  478,  307,  308,  478,
      308,  312,  311,  312,  311,  313,  313,  313,  314,  314,
      314,  316,  317,  313,  413,  317,  314,  317,  318,  405,
      318,  313,  302,  316,  314,  316,  319,  323,  319,  320,
      320,  320,  321,  322,  321,  366,  322,  324,  322,  323,
      324,  323,  324,  325,  326,  326,  327,  327,  366,  325,
      402,  325,  326,  328,  328,  330,  330,  330,  331,  331,

      331,  328,  332,  332,  332,  333,  331,  334,  339,  353,
      352,  330,  353,  333,  331,  334,  352,  359,  339,  357,
      352,  400,  357,  359,  339,  399,  360,  359,  352,  360,
      353,  362,  370,  398,  362,  359,  376,  376,  397,  380,
      357,  370,  330,  377,  377,  370,  381,  360,  380,  382,
      376,  383,  362,  396,  378,  381,  382,  377,  382,  384,
      383,  384,  383,  385,  386,  390,  386,  387,  387,  387,
      391,  385,  393,  385,  389,  389,  392,  389,  392,  390,
      392,  390,  403,  395,  391,  393,  391,  393,  394,  409,
      408,  418,  394,  408,  394,  395,  403,  395,  411,  417,

      418,  411,  374,  409,  419,  419,  417,  421,  420,  422,
      372,  408,  420,  421,  420,  421,  423,  432,  425,  411,
      423,  422,  423,  422,  424,  424,  424,  425,  426,  425,
      434,  432,  371,  437,  437,  437,  438,  438,  438,  368,
      426,  437,  426,  419,  434,  419,  439,  441,  439,  437,
      448,  367,  438,  440,  440,  440,  364,  455,  441,  457,
      441,  455,  448,  457,  448,  479,  480,  355,  479,  480,
      350,  348,  345,  343,  341,  455,  338,  457,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  461,  461,  461,  461,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  466,  466,  466,  466,  337,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  336,  466,
      467,  467,  335,  467,  467,  467,  467,  467,  467,  467,

      467,  467,  467,  467,  467,  467,  468,  468,  329,  468,
      468,  468,  301,  468,  468,  294,  468,  468,  468,  468,
      468,  468,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  470,  470,
      289,  470,  470,  470,  276,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  471,  471,  274,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      472,  472,  472,  271,  472,  269,  262,  261,  256,  472,
      472,  251,  472,  473,  473,  473,  244,  233,  228,  222,
      221,  192,  190,  189,  187,  473,  474,  170,  474,  474,

      165,  474,  474,  137,  474,  475,  475,  475,  130,  475,
      116,  114,  104,   84,  475,  475,   83,  475,  476,  476,
      476,   81,   79,   71,   64,   62,   58,   52,   33,    0,
      476,  477,  477,    0,    0,  477,    0,  477,  477,    0,
      477,  477,    0,  477,  481,    0,    0,    0,  481,  481,
      481,    0,  481,  481,  482,  482,  482,    0,    0,    0,
        0,    0,    0,    0,  482,    0,  482,    0,  482,  483,
      483,    0,    0,  483,    0,    0,    0,    0,  483,    0,
        0,  483,  484,  484,    0,  484,  485,  485,  485,    0,
        0,    0,    0,    0,    0,    0,  485,    0,  485,    0,

      485,  486,    0,    0,    0,  486,    0,    0,    0,    0,
      486,    0,    0,  486,  487,    0,  487,    0,    0,  487,
      488,  488,  488,  488,  488,  488,  488,  488,  488,    0,
      488,  488,  488,  488,  488,  488,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  490,  490,  490,  490,  490,  490,  490,  490,
      490,    0,  490,  490,  490,  490,  490,  490,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  499,  499,  499,  499,

      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  502,  502,  502,  502,  502,  502,
        0,  502,  502,    0,  502,  502,  502,  502,  502,  502,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  504,  504,  504,  504,
      504,  504,    0,  504,  504,    0,  504,  504,  504,  504,
      504,  504,  505,  505,  505,  505,  505,  505,  505,  505,

      505,  505,  505,  505,  505,  505,  505,  505,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      513,  513,  513,  513,  513,  513,    0,  513,  513,    0,
      513,  513,  513,  513,  513,  513,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "code.l"
#define INITIAL 0
/******************************************************************************
 *
 * $Id$
 *
 * Copyright (C) 1997-1999 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * All output generated with Doxygen is not covered by this license.
 *
 */
#line 18 "code.l"

/*
 *	includes
 */
#include <stdio.h>
#include <iostream.h>
#include <assert.h>
#include <ctype.h>
#include <qregexp.h>

#include "qtbc.h"
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "outputlist.h"
#include "util.h"

#define YY_NO_UNPUT
#define YY_NEVER_INTERACTIVE 1
  
class CodeClassDef 
{
  public:
    CodeClassDef() {}
    CodeClassDef(const CodeClassDef &d)
    {
      name = d.name;
      bases = d.bases;
    }
   ~CodeClassDef() {}

    QCString name;
    QStrList bases;
};  
  
class CodeVarDef
{
  public:
    CodeVarDef() {}
    CodeVarDef(const CodeVarDef &d) 
    { 
      name = d.name; 
      type = d.type; 
      classScope = d.classScope;  
    }
   ~CodeVarDef() {} 
    
    QCString name;
    QCString type; 
    QCString classScope;
};

typedef QList<CodeClassDef> CodeClassList; 
typedef QDict<CodeClassDef> CodeClassDict;
typedef QList<CodeVarDef>   CodeVarList; 

/* -----------------------------------------------------------------
 *	statics
 */
  
static CodeClassList g_codeClassList;
static CodeClassDict g_codeClassDict(17);
static CodeVarList   g_codeVarList;
static CodeVarList   g_codeParmList;
static const char *  g_inputString;     //!< the code fragment as text
static int	     g_inputPosition;   //!< read offset during parsing 
static int           g_inputLines;      //!< number of line in the code fragment
static int	     g_yyLineNr;        //!< current line number
static int	     g_lastCContext;
static int	     g_lastSpecialCContext;
static int           g_lastStringContext;
static int	     g_bracketCount = 0;
static int	     g_curlyCount   = 0;
static int	     g_sharpCount   = 0;
static QCString      g_type;
static QCString      g_name;
static QCString      g_args;
static QCString      g_parmType;
static QCString      g_parmName;
static bool          g_inClass;
static QCString      g_classScope;
static OutputList *  g_code;
static CodeClassDef  g_ccd;
static CodeVarDef    g_cvd;
static bool          g_exampleBlock;
static QCString      g_exampleName;
static QCString      g_exampleFile;
static int           g_anchorCount;
static FileDef *     g_sourceFileDef;
static bool          g_includeCodeFragment;

// start a new line of code, inserting a line number if g_sourceFileDef
// is TRUE. If a definition starts at the current line, then the line
// number is linked to the documentation of that definition.
static void startCodeLine(OutputList &ol)
{
  if (g_sourceFileDef)
  {
    QCString lineNumber,lineAnchor;
    lineNumber.sprintf("%05d",g_yyLineNr);
    lineAnchor.sprintf("l%05d",g_yyLineNr);
    Definition *d   = g_sourceFileDef->getSourceDefinition(g_yyLineNr);
    QCString anchor = g_sourceFileDef->getSourceAnchor(g_yyLineNr);
    if (!g_includeCodeFragment && d && d->isLinkableInProject())
    {
      ol.startCodeAnchor(lineAnchor);
      ol.writeCodeLink(d->getReference(),d->getOutputFileBase(),
	               anchor,lineNumber);
      ol.endCodeAnchor();
      ol.codify(" ");
    }
    else
    {
      ol.codify(lineNumber);
      ol.codify(" ");
    }
  }
  ol.startCodeLine(); 
}

// write a code fragment `text' that may span multiple lines, inserting
// line numbers for each line.
static void codifyLines(char *text)
{
  char *p=text,*sp=p;
  char c;
  bool done=FALSE;
  while (!done)
  {
    sp=p;
    while ((c=*p++) && c!='\n');
    if (c=='\n')
    {
      g_yyLineNr++;
      *(p-1)='\0';
      g_code->codify(sp);
      g_code->endCodeLine();
      if (g_yyLineNr<g_inputLines) 
      {
	startCodeLine(*g_code);
      }
    }
    else
    {
      g_code->codify(sp);
      done=TRUE;
    }
  }
}

// writes a link to a fragment `text' that may span multiple lines, inserting
// line numbers for each line. If `text' contains newlines, the link will be 
// split into multiple links with the same destination, one for each line.
static void writeMultiLineCodeLink(OutputList &ol,
                  const char *ref,const char *file,
                  const char *anchor,const char *text)
{
  bool done=FALSE;
  QCString ts = text;
  char *p=ts.data();
  while (!done)
  {
    char *sp=p;
    char c;
    while ((c=*p++) && c!='\n');
    if (c=='\n')
    {
      g_yyLineNr++;
      *(p-1)='\0';
      ol.writeCodeLink(ref,file,anchor,sp);
      ol.endCodeLine();
      if (g_yyLineNr<g_inputLines) 
      {
	startCodeLine(ol);
      }
    }
    else
    {
      ol.writeCodeLink(ref,file,anchor,sp);
      done=TRUE;
    }
  }
}

static void addType()
{
  if (g_name=="const") { g_name.resize(0); return; }
  if (g_type.length()) g_type += ' ' ;
  g_type += g_name ;
  g_name.resize(0) ;
  if (g_type.length()) g_type += ' ' ;
  g_type += g_args ;
  g_args.resize(0) ;
}

static void addParmType()
{
  if (g_parmName=="const") { g_parmName.resize(0); return; }
  if (g_parmType.length()) g_parmType += ' ' ;
  g_parmType += g_parmName ;
  g_parmName.resize(0) ;
}

static void setClassScope(const QCString &name)
{
  //printf("setClassScope(%s)\n",name.data());
  QCString n=name;
  n=n.simplifyWhiteSpace();
  int index;
  if ((index=n.find("::"))!=-1)
    g_classScope=n.left(index);
  else
    g_classScope.resize(0);
  //printf("--->New class scope `%s'\n",g_classScope.data());
}

static void addVariable()
{
  g_cvd.name=g_name.copy().simplifyWhiteSpace();
  g_cvd.type=g_type.copy().simplifyWhiteSpace();
  if (g_type.length()==0) 
    return;
  else if ((getClass(g_cvd.type)) || (g_codeClassDict[g_cvd.type])) 
  {
    g_cvd.classScope=g_classScope;
    g_codeVarList.append(new CodeVarDef(g_cvd)); // add it to a list
  }
}

static void addParameter()
{
  g_cvd.name=g_parmName.copy().simplifyWhiteSpace();
  g_cvd.type=g_parmType.copy().simplifyWhiteSpace();
  if (g_cvd.type.length()==0) 
    return;
  else if ((getClass(g_cvd.type)) || (g_codeClassDict[g_cvd.type])) 
  {
    g_cvd.classScope=g_classScope;
    g_codeParmList.append(new CodeVarDef(g_cvd)); // add it to a list
  }
}

static void generateClassLink(OutputList &ol,char *clName)
{
  QCString className=clName;
  if (className.length()==0) return;
  ClassDef *cd;
  if ((cd=getClass(className)) && cd->isLinkable())
  {
    if (g_exampleBlock)
    {
      QCString anchor;
      anchor.sprintf("_a%d",g_anchorCount);
      //printf("addExampleClass(%s,%s,%s)\n",anchor.data(),g_exampleName.data(),
      //                                   g_exampleFile.data());
      if (cd->addExample(anchor,g_exampleName,g_exampleFile))
      {
	bool latexOn = ol.isEnabled(OutputGenerator::Latex);
	if (latexOn) ol.disable(OutputGenerator::Latex);
	ol.writeAnchor(anchor);
	if (latexOn) ol.enable(OutputGenerator::Latex);
	g_anchorCount++;
      }
    }
    //ol.writeCodeLink(cd->getReference(),cd->getOutputFileBase(),0,className);
    writeMultiLineCodeLink(ol,cd->getReference(),cd->getOutputFileBase(),0,className);
  }
  else
  {
    codifyLines(clName);
  }
}

static bool getLink(const char *className,
                    const char *memberName,OutputList &result,
		    const char *text=0)
{
  MemberDef    *md;
  ClassDef     *cd;
  FileDef      *fd;
  NamespaceDef *nd;
  QCString m=memberName;
  QCString c=className;
  //printf("Trying `%s'::`%s'\n",c.data(),m.data());
  if (getDefs(c,m,"()",md,cd,fd,nd) && md->isLinkable())
  {
    //printf("Found!\n");
    if (g_exampleBlock)
    {
      QCString anchor;
      anchor.sprintf("a%d",g_anchorCount);
      //printf("addExampleFile(%s,%s,%s)\n",anchor.data(),g_exampleName.data(),
      //                                  g_exampleFile.data());
      if (md->addExample(anchor,g_exampleName,g_exampleFile))
      {
	bool latexEnabled = result.isEnabled(OutputGenerator::Latex);
	if (latexEnabled) result.disable(OutputGenerator::Latex);
	result.writeAnchor(anchor);
	if (latexEnabled) result.enable(OutputGenerator::Latex);
	g_anchorCount++;
      }
    }
    Definition *d=0;
    if (cd) d=cd; else if (cd) d=nd; else d=fd;

    if (d)
    {
      //printf("d->getOutputBase()=`%s' name=`%s'\n",d->getOutputFileBase().data(),md->name().data());
      //result.writeCodeLink(d->getReference(),d->getOutputFileBase(),
      //                   md->anchor(),text ? text : memberName);
      writeMultiLineCodeLink(result,d->getReference(),d->getOutputFileBase(),
	                       md->anchor(),text ? text : memberName);
      return TRUE;
    } 
  }
  return FALSE;
}

static ClassDef *stripClassName(const char *s)
{
  QCString tmp=s;
  QRegExp re("[a-z_A-Z][a-z_A-Z0-9]*");
  int p=0,i,l;
  while ((i=re.match(tmp,p,&l))!=-1)
  {
    ClassDef *cd=getClass(tmp.mid(i,l));
    if (cd) return cd;
    p=i+l;
  }
  return 0;
}

static void generateMemberLink(OutputList &ol,const char *varName,
            char *memName)
{
  //printf("generateMemberLink(object=%s,mem=%s) classScope=%s\n",
  //                          varName,memName,classScope.data());
  CodeVarDef *cvd=g_codeParmList.last();
  while (cvd && cvd->name!=varName) cvd=g_codeParmList.prev();
  if (!cvd)
  {
    cvd=g_codeVarList.last();
    while (cvd && cvd->name!=varName) cvd=g_codeVarList.prev();
  }
  if (cvd) // variable found
  {
    //printf("variable found type=%s!\n",cvd->type.data());
    CodeClassDef *ccd=g_codeClassDict[cvd->type];
    if (ccd)
    {
      //printf("Class found!\n");
      OutputList result(&ol);
      if (getLink(ccd->name,memName,result)) 
      {
        //printf("Found result!\n");
        ol+=result;
        return;
      }
      char *s=ccd->bases.first();
      while (s)
      {
	OutputList result(&ol);
	if (getLink(s,memName,result)) 
	{
	  //printf("Found result!\n");
	  ol+=result;
	  return;
	}
	s=ccd->bases.next();
      }
    }
    else 
    {
      OutputList result(&ol);
      if (getLink(cvd->type,memName,result))
      {
        ol+=result;
      }
      else
      {
	codifyLines(memName);
      }
      return;
    }
  }
  else
  {
    ClassDef *vcd = getClass(g_classScope);
    if (vcd)
    {
      //printf("Found class for variable `%s'\n",varName);
      MemberName *vmn=memberNameDict[varName];
      if (vmn)
      {
	MemberNameIterator vmni(*vmn);
	MemberDef *vmd;
	for (;(vmd=vmni.current());++vmni)
	{
	  if (vmd->isVariable() && vmd->memberClass()==vcd)
	  {
	    //printf("Found variable type=%s\n",vmd->typeString());
	    ClassDef *mcd=stripClassName(vmd->typeString());
	    if (mcd)
	    {
	      MemberName *mmn=memberNameDict[memName];
	      if (mmn)
	      {
		MemberNameIterator mmni(*mmn);
		MemberDef *mmd;
		for (;(mmd=mmni.current());++mmni)
		{
		  if (mmd->memberClass()==mcd)
		  {
		    //ol.writeCodeLink(mcd->getReference(),mcd->getOutputFileBase(),
		    //	mmd->anchor(),memName);
		    writeMultiLineCodeLink(ol,mcd->getReference(),
			mcd->getOutputFileBase(),mmd->anchor(),memName);
		    return;
		  }
		}
	      }
	    }
	  }
	}
      }
    }
  }
  codifyLines(memName);
  return;
}

static QCString removeWhiteSpace(const char *s)
{
  QCString result;
  if (s)
  {
    const char *p=s;
    int c;
    while ((c=*p++))
    {
      if (c!=' ' && c!='\n' && c!='\r' && c!='\t') result+=c;
    }
  }
  return result;
}

static void generateFunctionLink(OutputList &ol,char *funcName)
{
  OutputList result(&ol);
  CodeClassDef *ccd=0;
  QCString locScope=g_classScope.copy();
  QCString locFunc=removeWhiteSpace(funcName);
  int i=locFunc.findRev("::");
  if (i>0)
  {
    locScope=locFunc.left(i);
    locFunc=locFunc.right(locFunc.length()-i-2);
  }
  //printf("generateFunctionLink(%s) classScope=%s\n",locFunc.data(),locScope.data());
  if (locScope.length()>0 && (ccd=g_codeClassDict[locScope]))
  {
    //printf("using classScope %s\n",g_classScope.data());
    char *s=ccd->bases.first();
    while (s)
    {
      if (getLink(s,locFunc,result,funcName)) 
      {
	ol+=result;
	return;
      }
      s=ccd->bases.next();
    }
  }
  if (getLink(locScope,locFunc,result,funcName))
  {
    ol+=result;
  }
  else
  {
    codifyLines(funcName);
  }
  return;
}

/*! counts the number of lines in the input */
static int countLines()
{
  const char *p=g_inputString;
  char c;
  int count=1;
  while ((c=*p++)) if (c=='\n') count++; 
  return count;
}

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    while( c < max_size && g_inputString[g_inputPosition] )
    {
	*buf = g_inputString[g_inputPosition++] ;
	c++; buf++;
    }
    return c;
}

#define SkipString 1

#define SkipCPP 2

#define SkipComment 3

#define SkipCxxComment 4

#define RemoveSpecialCComment 5

#define StripSpecialCComment 6

#define Body 7

#define FuncCall 8

#define MemberCall 9

#define MemberCall2 10

#define SkipInits 11

#define ClassName 12

#define Bases 13

#define SkipSharp 14

#define ReadInclude 15


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 554 "code.l"



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 460 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2037 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 556 "code.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 557 "code.l"
{
					  g_code->codify(yytext);
  					  BEGIN( ReadInclude ); 
					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 561 "code.l"
{ 
                                          codifyLines(yytext);
					  //g_code->codify(yytext);
  					  BEGIN( ClassName ); 
					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 566 "code.l"
{
					  //FileInfo *f;
					  bool ambig;
                                          FileDef *fd;
					  if ((fd=findFileDef(&inputNameDict,yytext,ambig)) &&
					      fd->isLinkable())
					  {
					    g_code->writeCodeLink(fd->getReference(),fd->getOutputFileBase(),0,yytext);
					  }
					  else
					  {
					    g_code->codify(yytext);
					  }
					  char c=yyinput();
					  QCString text;
					  text+=c;
					  g_code->codify(text);
					  BEGIN( Body );
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 585 "code.l"
{ 
  					  g_code->codify(yytext);
  					  BEGIN( SkipCPP ) ; 
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 589 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 592 "code.l"
{ 
  					  codifyLines(yytext);
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 595 "code.l"
{ 
  					  codifyLines(yytext);
					  BEGIN( Body ) ;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 599 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 602 "code.l"
{ 
  					  g_code->codify(yytext);
  					  g_curlyCount++;
  					  g_type.resize(0); 
					  g_name.resize(0);
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 608 "code.l"
{ 
  					  g_code->codify(yytext);
  					  g_inClass=FALSE; 
					  if (--g_curlyCount<=0) 
					  {
					    g_classScope.resize(0);
					    g_codeParmList.clear();
					  }
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 617 "code.l"
{ 
  					  g_code->codify(yytext);
  					  BEGIN( Body ); 
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 621 "code.l"
{
					  addType();
					  g_code->codify(yytext);
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 625 "code.l"
{
					  g_ccd.name=yytext;
					  addType();
					  generateClassLink(*g_code,yytext);
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 630 "code.l"
{
  					  codifyLines(yytext);
  					  BEGIN( Bases ); 
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 634 "code.l"
{
  					  g_code->codify(yytext);
					  g_curlyCount++;
					  g_inClass=TRUE;
					  if (g_ccd.name.length()>0)
					  {
					    g_classScope=g_ccd.name.copy();
					    CodeClassDef *cd=new CodeClassDef(g_ccd);
					    g_codeClassList.append(cd);
					    g_codeClassDict.insert(cd->name,cd);
					  }
					  BEGIN( Body );
 					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 647 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 650 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 653 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 656 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 659 "code.l"
{ 
					  //printf("%s:addBase(%s)\n",g_ccd.name.data(),yytext);
  					  g_ccd.bases.inSort(yytext); 
					  generateClassLink(*g_code,yytext);
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 664 "code.l"
{ 
  					  g_code->codify(yytext);
  					  g_sharpCount=1;
					  BEGIN ( SkipSharp );
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 669 "code.l"
{
  					  g_code->codify(yytext);
  					  ++g_sharpCount; 
					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 673 "code.l"
{ 
  					  g_code->codify(yytext);
  					  if (--g_sharpCount<=0)
					  BEGIN ( Bases );
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 678 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 26:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 683 "code.l"
{
  					  codifyLines(yytext);
  				          g_name.resize(0);g_type.resize(0);
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 687 "code.l"
{
  					  codifyLines(yytext);
  				          g_name.resize(0);g_type.resize(0);
  					}
	YY_BREAK
/*
<Body>([a-z_A-Z~][a-z_A-Z0-9]*)/([ \t]*)	{ 
					  generateClassLink(*g_code,yytext);
					  addType();
  					  name+=yytext; 
					}
  */
case 28:
YY_RULE_SETUP
#line 698 "code.l"
{ 
					  generateClassLink(*g_code,yytext);
  					  //codifyLines(yytext);
					  addType();
  					  g_name+=yytext; 
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 704 "code.l"
{
  					  addType();
					  //if (type.length()==0)
					  QCString tmp=yytext;
					  generateFunctionLink(*g_code,yytext);
					  //else
  					  //  g_code->codify(yytext);
  					  g_bracketCount=1;
					  g_args.resize(0);
  					  g_name+=yytext; 
  					  BEGIN( FuncCall );
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 716 "code.l"
{
  					  g_code->codify(yytext);
  					  g_lastStringContext=YY_START;
  					  BEGIN( SkipString );
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 721 "code.l"
{ 
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 724 "code.l"
{
  					  g_code->codify(yytext);
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 727 "code.l"
{
  					  g_code->codify(yytext);
  					  BEGIN( g_lastStringContext );
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 731 "code.l"
{
  					  g_code->codify(yytext);
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 734 "code.l"
{
  					  g_code->codify(yytext);
  					  g_name.resize(0);g_type.resize(0);
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 738 "code.l"
{
  					  g_code->codify(yytext);
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 741 "code.l"
{ 
  					  g_code->codify(yytext);
  					  BEGIN( MemberCall ); 
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 745 "code.l"
{
  					  if (g_name.length()>0)
					    generateMemberLink(*g_code,g_name,yytext);
					  else
  					    g_code->codify(yytext);
  					  g_name.resize(0);g_type.resize(0);
					  g_bracketCount=0;
					  BEGIN(FuncCall);
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 754 "code.l"
{ 
  					  g_code->codify(yytext);
    					  g_type.resize(0);
					  g_name.resize(0);
					  BEGIN(Body); 
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 760 "code.l"
{
  					  g_code->codify(yytext);
  					  if (g_type.length()>0) 
					    addVariable();
					  g_name.resize(0);
					  if (*yytext!=',') g_type.resize(0);
					  g_args.resize(0);
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 768 "code.l"
{
					  g_code->codify(yytext);
					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 771 "code.l"
{
					  addParmType();
					  g_parmName=yytext; 
					  generateClassLink(*g_code,yytext);
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 776 "code.l"
{
  					  g_code->codify(yytext);
					  addParameter();
					  g_parmType.resize(0);g_parmName.resize(0);
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 781 "code.l"
{
  					  g_code->codify(yytext);
  					  g_bracketCount++; 
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 785 "code.l"
{ 
  					  g_code->codify(yytext);
  					  if (--g_bracketCount<=0) 
					  g_name.resize(0);g_args.resize(0);
					  g_parmType.resize(0);g_parmName.resize(0);
  					  BEGIN( Body ); 
					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 792 "code.l"
{
  					  codifyLines(yytext);
  					  g_bracketCount=0;
					  if (!g_inClass && g_type.length()>0)
					    addVariable();
					  g_name.resize(0);g_type.resize(0);
					  g_parmType.resize(0);g_parmName.resize(0);
  					  BEGIN( Body );
  					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 801 "code.l"
{
					  addParameter();
					  g_parmType.resize(0);g_parmName.resize(0);
					  if (g_name.find("::")!=-1) setClassScope(g_name);
  					  codifyLines(yytext);
					  g_curlyCount++;
  					  g_type.resize(0); g_name.resize(0);
					  BEGIN( Body );
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 810 "code.l"
{
					  addParameter();
					  g_parmType.resize(0);g_parmName.resize(0);
					  if (g_name.find("::")!=-1) setClassScope(g_name);
  					  codifyLines(yytext);
  					  g_type.resize(0); g_name.resize(0);
					  BEGIN( SkipInits );
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 818 "code.l"
{ 
  					  g_code->codify(yytext);
					  g_curlyCount++; 
					  BEGIN( Body ); 
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 823 "code.l"
{
					  generateClassLink(*g_code,yytext);
  					}
	YY_BREAK
case 51:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 826 "code.l"
{
					  generateFunctionLink(*g_code,yytext);
					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 829 "code.l"
{ 
  					  g_code->codify(yytext);
					  g_args=yytext; 
					  BEGIN( MemberCall2 ); 
					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 834 "code.l"
{ 
  					  if (g_args.length()>0)
					    generateMemberLink(*g_code,g_args,yytext);
					  else
  					    g_code->codify(yytext);
					  g_args.resize(0);
					  BEGIN( FuncCall );
					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 842 "code.l"
{
  					  g_code->codify(yytext);
    					  g_args=yytext;
    					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 846 "code.l"
{
  					  g_code->codify(yytext);
  					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 849 "code.l"
{
  					  g_code->codify(yytext);
  					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 852 "code.l"
{ 
  					  g_code->codify(yytext);
  					  BEGIN( g_lastCContext ) ; 
					}
	YY_BREAK
case 58:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 856 "code.l"
{ 
  					  //codifyLines(yytext);
  					  g_code->codify(yytext);
					  BEGIN( g_lastCContext ) ;
					}
	YY_BREAK
case 59:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 861 "code.l"
{
  					  g_yyLineNr+=QCString(yytext).contains('\n');
					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 864 "code.l"
{
  					  g_yyLineNr+=QCString(yytext).contains('\n');
                                          g_code->endCodeLine();
                                          if (g_yyLineNr<g_inputLines) 
                                          {
                                            startCodeLine(*g_code);
                                          }
  					  BEGIN(g_lastSpecialCContext);
  					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 873 "code.l"
{
  					  BEGIN(g_lastSpecialCContext);
  					}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 876 "code.l"

	YY_BREAK
case 63:
YY_RULE_SETUP
#line 877 "code.l"

	YY_BREAK
case 64:
YY_RULE_SETUP
#line 878 "code.l"
{ g_yyLineNr++; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 879 "code.l"

	YY_BREAK
/*
<SkipSpecialComment>"//"
<SkipSpecialComment>[ \t]*"* /"		{
  					  BEGIN( lastDContext ) ;
  					}
<SkipSpecialComment>[ \t]*"* /"[ \t\n]*"\n"/"/ *"  {
  					  //g_code->codify("\n");
					  //QCString lineText=yytext;
  					  //g_yyLineNr+=lineText.contains('\n');
  					  BEGIN( lastDContext ) ;
  					}
<SkipSpecialComment>.	
<SkipSpecialComment>\n			{ 
  					  codifyLines(yytext); 
					}
<SkipSpecialCxxComment>.* /\n		{
  					  codifyLines(yytext); 
					  BEGIN( lastDContext ) ;
  					}
<SkipSpecialCxxComment>.	
<SkipSpecialCxxComment>\n		{ 
  					  codifyLines(yytext); 
					}
 */
case 66:
YY_RULE_SETUP
#line 904 "code.l"
{ // remove special one-line comment
  					  g_yyLineNr+=((QCString)yytext).contains('\n');
                                          g_code->endCodeLine();
                                          if (g_yyLineNr<g_inputLines) 
                                          {
                                            startCodeLine(*g_code);
                                          }
  					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 912 "code.l"
{ // remove special one-line comment
  					  g_yyLineNr++;
                                          g_code->endCodeLine();
                                          if (g_yyLineNr<g_inputLines) 
                                          {
                                            startCodeLine(*g_code);
                                          }
  					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 920 "code.l"
{ // strip special one-line comment
  					  char c[2]; c[0]='\n'; c[1]=0;
  					  codifyLines(c);
  					}
	YY_BREAK
case 69:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 924 "code.l"
{
					  g_lastSpecialCContext = YY_START;
					  g_yyLineNr++;
					  BEGIN(RemoveSpecialCComment);
					}
	YY_BREAK
case 70:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 929 "code.l"
{ // special C comment block at a new line
					  g_lastSpecialCContext = YY_START;
					  BEGIN(RemoveSpecialCComment);
					}
	YY_BREAK
case 71:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 933 "code.l"
{ // special C comment block half way a line
					  g_lastSpecialCContext = YY_START;
					  BEGIN(RemoveSpecialCComment);
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 937 "code.l"
{}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 938 "code.l"
{ 
  					  g_code->codify(yytext);
  					  g_lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 943 "code.l"
{ 
  					  g_code->codify(yytext);
  					  g_lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 948 "code.l"
{
  					  codifyLines(yytext); 
  					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 951 "code.l"
{
  					  g_code->codify(yytext);
					}
	YY_BREAK
/*
<*>([ \t\n]*"\n"){2,}			{ // combine multiple blank lines
  					  //QCString sepLine=yytext;
  					  //g_code->codify("\n\n");
  					  //g_yyLineNr+=sepLine.contains('\n'); 
  					  //char sepLine[3]="\n\n";
  					  codifyLines(yytext);
					}
  */
case 77:
YY_RULE_SETUP
#line 964 "code.l"
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(RemoveSpecialCComment):
			case YY_STATE_EOF(StripSpecialCComment):
			case YY_STATE_EOF(Body):
			case YY_STATE_EOF(FuncCall):
			case YY_STATE_EOF(MemberCall):
			case YY_STATE_EOF(MemberCall2):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(ClassName):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(SkipSharp):
			case YY_STATE_EOF(ReadInclude):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 460 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 460 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 459);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 964 "code.l"


/*@ ----------------------------------------------------------------------------
 */

void initParseCodeContext()
{
  g_codeClassList.setAutoDelete(TRUE);
  g_codeVarList.setAutoDelete(TRUE);
  g_codeParmList.setAutoDelete(TRUE);
  g_codeClassDict.clear();
  g_codeClassList.clear();
  g_codeVarList.clear();
  g_codeParmList.clear();
  g_ccd.bases.clear();
  g_anchorCount = 0;
}

void parseCode(OutputList &ol,const char *className,const QCString &s, 
                  bool exBlock, const char *exName,FileDef *fd,
		  int startLine,int endLine,bool inlineFragment)
{
  g_code = new OutputList(&ol);
  if (s.isEmpty()) return;
  g_inputString   = s;
  g_inputPosition = 0;
  if (endLine!=-1)
    g_inputLines  = endLine+1;
  else
    g_inputLines  = countLines();
  if (startLine!=-1)
    g_yyLineNr    = startLine;
  else
    g_yyLineNr    = 1;
  g_curlyCount    = 0;
  g_bracketCount  = 0;
  g_sharpCount    = 0;
  g_classScope    = className;
  g_exampleBlock  = exBlock; 
  g_exampleName   = exName;
  g_sourceFileDef = fd;
  g_exampleFile   = convertSlashes(g_exampleName,TRUE)+"-example";
  g_includeCodeFragment = inlineFragment;
  startCodeLine(*g_code);
  g_type.resize(0);
  g_name.resize(0);
  g_args.resize(0);
  g_parmName.resize(0);
  g_parmType.resize(0);
  codeYYrestart( codeYYin );
  BEGIN( Body );
  codeYYlex();
  //if (g_yyLineNr<=g_inputLines) code->endCodeLine();
  ol+=*g_code;
  delete g_code;
  return;
}

extern "C" { // some bogus code to keep the compiler happy
//  int  codeYYwrap() { return 1 ; }
  void codeYYdummy() { yy_flex_realloc(0,0); } 
}
