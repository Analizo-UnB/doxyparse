#define yy_create_buffer configYY_create_buffer
#define yy_delete_buffer configYY_delete_buffer
#define yy_scan_buffer configYY_scan_buffer
#define yy_scan_string configYY_scan_string
#define yy_scan_bytes configYY_scan_bytes
#define yy_flex_debug configYY_flex_debug
#define yy_init_buffer configYY_init_buffer
#define yy_flush_buffer configYY_flush_buffer
#define yy_load_buffer_state configYY_load_buffer_state
#define yy_switch_to_buffer configYY_switch_to_buffer
#define yyin configYYin
#define yyleng configYYleng
#define yylex configYYlex
#define yyout configYYout
#define yyrestart configYYrestart
#define yytext configYYtext

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 93
#define YY_END_OF_BUFFER 94
static yyconst short int yy_accept[938] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   94,   91,   92,   91,
       91,    2,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   88,   91,   79,   76,   80,    2,   91,
       79,   79,   86,   87,   78,   77,   87,   87,   85,   83,
       83,   85,   85,   85,   91,    0,   90,    0,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,    0,   89,   79,   81,   79,   86,   87,
       78,   87,   84,   82,    0,    0,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   79,   87,    1,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,    1,    1,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,    0,   29,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,    0,
       40,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,    0,   13,   75,   75,   75,

       75,   75,    0,   14,   75,   75,    0,   30,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,    0,   12,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,    0,   23,
        0,   35,   75,    0,   41,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,    0,   17,   75,   75,   75,    0,
       42,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,    0,   28,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,    0,    7,   75,   75,    0,   20,   75,    0,
       37,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,    0,   15,   75,   75,   75,   75,   75,   75,
        0,   16,   75,   75,   75,   75,   75,    0,   45,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,    0,   10,    0,    9,    0,    6,   75,   75,   75,
       75,    0,   73,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,    0,   43,   75,   75,   75,   75,   75,   75,
       75,   75,   75,    0,   27,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,    0,   50,   75,   75,   75,
       75,   75,   75,    0,   26,    0,   72,   75,    0,   19,
       75,   75,    0,   11,    0,    8,   75,   75,   75,   75,
       75,    0,    3,   75,    0,   62,    0,   44,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,    0,   61,
        0,   47,   75,   75,   75,   75,   75,   75,    0,   36,
        0,   31,   75,    0,   49,   75,   75,   75,   75,   75,
       75,   75,   75,   75,    0,   63,   75,   75,    0,   22,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,    0,   60,   75,   75,   75,   75,   75,   75,
        0,   38,   75,   75,    0,   48,   75,   75,   75,   75,
       75,    0,   34,    0,   74,   75,   75,   75,   75,    0,
       71,    0,    4,   75,    0,   67,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,    0,   46,    0,
       59,   75,   75,   75,   75,   75,    0,   24,   75,    0,
       52,   75,    0,   21,    0,   53,    0,   39,   75,   75,
       75,   75,    0,   64,   75,   75,    0,   33,    0,   32,
       75,   75,    0,   18,   75,   75,   75,   75,    0,    5,

        0,   65,   75,   75,    0,   54,   75,   75,   75,    0,
       69,   75,   75,   75,    0,   68,    0,   70,   75,   75,
       75,    0,   58,    0,   57,    0,   56,    0,   66,    0,
       55,    0,   25,   75,    0,   51,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    1,    1,    1,    8,
        9,    1,    1,    1,    1,    1,    1,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,    1,    1,
       12,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,   39,    1,    1,   40,    1,   41,   41,   41,   42,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   43,
       41,   41,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[45] =
    {   0,
        1,    2,    2,    2,    2,    3,    2,    1,    4,    5,
        5,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    1,    5,
        6,    6,    6,    1
    } ;

static yyconst short int yy_base[949] =
    {   0,
        0,    1,   45,    0,   87,   88,  131,  174,  218,  262,
      305,  348,  100,  101,  392,  436, 1237, 1238, 1238,    3,
     1193, 1238,    0, 1211,    0,    0,    1,    0,    2, 1217,
       10,    7, 1220, 1219, 1218, 1197,   79, 1196, 1211,   83,
     1214, 1209, 1212, 1238,    6,    0, 1238, 1238,    0, 1216,
       12, 1180,    0,    0, 1220, 1238,   95, 1178, 1238, 1238,
     1238, 1212,  109, 1176, 1209,  114, 1238, 1207,    0,   95,
     1190, 1194, 1183, 1192, 1199,   13, 1180, 1195, 1196,  128,
     1184, 1183, 1180, 1189, 1179, 1190,  127, 1168, 1169,    3,
     1168, 1171, 1180, 1167,  131, 1175,  134, 1182, 1161, 1163,

        6, 1162, 1161,  118, 1238,    0, 1238, 1180,    0,    0,
     1187, 1178, 1238, 1238, 1178, 1144, 1168, 1164, 1170, 1142,
     1164, 1163, 1139, 1147, 1146, 1148, 1162, 1134, 1159, 1147,
     1147, 1157,  123, 1152, 1144, 1150, 1149, 1141, 1145, 1139,
     1145, 1140, 1127, 1142, 1145, 1140, 1126, 1115, 1126, 1136,
     1112, 1127, 1134, 1127, 1131, 1114, 1129, 1115, 1114, 1122,
     1102, 1123, 1126, 1113, 1096, 1095, 1238, 1100, 1122, 1097,
     1120, 1114, 1091,    8, 1099, 1089, 1115, 1113,  133, 1102,
     1097, 1091, 1097, 1109, 1105, 1080, 1079, 1088, 1077, 1076,
     1098, 1081, 1083, 1086, 1079, 1080, 1093, 1072, 1080,  137,

     1073, 1075, 1084, 1063, 1085, 1084, 1068, 1069, 1085, 1082,
     1081, 1067, 1063, 1072, 1079, 1070,    0,    0, 1058, 1075,
     1057, 1073, 1046, 1054, 1071, 1053, 1042, 1060, 1065, 1055,
     1064, 1047, 1059, 1051, 1058, 1057,  110, 1045, 1043, 1042,
     1056, 1035,  169, 1027, 1050, 1044, 1047,  155, 1037, 1035,
     1021, 1020, 1023, 1025, 1025, 1016, 1018, 1026, 1035, 1037,
        0, 1020, 1018, 1029, 1031, 1007, 1025, 1021, 1012, 1017,
     1025, 1024, 1000, 1008, 1013, 1020, 1011, 1011, 1018, 1007,
     1000, 1014,  999, 1005,  988, 1010, 1009,  985,  992,  995,
     1007, 1008, 1007,  987,  992,  993,  989,  998,  981,  981,

      984,  994,  978,  969,  159, 1238,  990,  994,  991,   74,
      988,  972,  971,  962,  969,  972,  986,  977,  965,  171,
     1238,  975,  955,  112,  954,  975,  954,  974,  969,  970,
      958,  955,  970,  957,  967,  957,  965,  172,  960,  940,
      939,  938,  949,  186,  948,  935,  191,  947,  933,  959,
      931,  938,  937,  951,  951,  945,  938,  951,  931,  925,
      948,  920,  919,  170,  937,  933,  916,  938,  921,  917,
      935,  923,  170,  913,  932,  916,  921,  906,  911,  930,
      917,  921,  927,  910,  922,  907,  912,  905,  909,  913,
      916,  919,  906,  899,  190,  195, 1238,  916,  915,  903,

      905,  912,  197, 1238,  894,  895,  202, 1238,  894,  895,
      177,  905,  891,  886,  897,  876,  888,  895,  881,  896,
      883,  886,  877,  880,  891,  880,  878,  880,  863,  889,
      888,  868,  871,  872,  864,  875,  882,  866,  863,  872,
      874,  864,  872,  858,  868,  860,  855,  857,  204,  230,
      843,  231,  869,  866,  848,  847,  864,  860,  232, 1238,
      857,  851,  861,  847,  840,  854,  857,  856,  844,  843,
      836,  842,  851,  846,  822,  215,  846,  834,  842,  841,
      824,  839,  216,  842,  827,  835,  819,  819,  834,  816,
      832,  819,  833,  814,  812,  813,  816,  824,  816,  239,

      823,  152,  243,  817,  816,  821,  808,  809,  244, 1238,
      247, 1238,  813,  248, 1238,  808,  818,  817,  809,  811,
      787,  796,  797,  792,  807,  802,  793,  788,  787,  781,
      793,  795,  802,  782,  783,  786,  779,  797,  796,  795,
      767,  766,  775,  774,  771,  771,  273,  784,  768,  784,
      771,  767,  779,  768,  762,  776,  759,  765,  769,  274,
      772,  769,  275,  766,  276, 1238,  277,  761,  760,  278,
     1238,  767,  757,  758,  746,  740,  762,  747,  753,  755,
      279,  745,  748,  760,  752,  754,  753,  280,  739,  263,
      736,  727,  282,  732,  746,  744,  737,  749,  736,  728,

      733,  739,  278,  732,  302,  303,  311,  736,  314, 1238,
      725,  734,  722,  315,  737,  721,  735,  722,  718,  715,
      715,  718,  316, 1238,  729,  710,  317, 1238,  710,  318,
     1238,  718,  715,  665,    0,   10,   62,   74,  111,  319,
       88,  144,  320, 1238,  129,  159,  183,  197,  175,  176,
      322, 1238,  188,  323,  200,  220,  210,  331, 1238,  239,
      236,  223,  230,  271,  273,  281,  334,  281,  276,  320,
      321,  345, 1238,  346, 1238,  354, 1238,  322,  314,  357,
      358,  359, 1238,  324,  360,  311,  331,  361,  362,  344,
      341,  336,  362,  353,  376,  360,  377,  378,  365,  365,

      370,  368,  400, 1238,  364,  369,  375,  378,  374,  366,
      405,  406,  394,  408, 1238,  381,  383,  384,  383,  385,
      417,  420,  404,  444,  387,  422, 1238,  404,  413,  402,
      403,  413,  402,  445, 1238,  447, 1238,  404,  448, 1238,
      449,  422,  451, 1238,  453, 1238,  427,  456,  435,  447,
      436,  467, 1238,  440,  469, 1238,  470, 1238,  456,  444,
      444,  460,  452,  467,  467,  468,  484,  466,  486, 1238,
      487, 1238,  473,  465,  466,  476,  477,  493,  495, 1238,
      498, 1238,  470,  500, 1238,  486,  502,  482,  477,  495,
      497,  481,  513,  514,  515, 1238,  497,  493,  518, 1238,

      491,  505,  521,  522,  497,  527,  511,  502,  519,  496,
      506,  507,  538, 1238,  515,  511,  512,  513,  529,  544,
      545, 1238,  546,  525,  549, 1238,  535,  522,  537,  538,
      557,  558, 1238,  560, 1238,  546,  562,  528,  564,  565,
     1238,  566, 1238,  569,  571, 1238,  573,  548,  563,  551,
      569,  584,  571,  557,  587,  588,  574,  590, 1238,  591,
     1238,  566,  593,  580,  568,  571,  602, 1238,  588,  605,
     1238,  606,  607, 1238,  608, 1238,  609, 1238,  610,  577,
      598,  614,  621, 1238,  607,  604,  625, 1238,  626, 1238,
      611,  628,  629, 1238,  601,  603,  604,  634,  637, 1238,

      640, 1238,  641,  629,  643, 1238,  611,  622,  648,  649,
     1238,  652,  654,  655,  656, 1238,  657, 1238,  660,  661,
      646,  668, 1238,  669, 1238,  672, 1238,  673, 1238,  674,
     1238,  675, 1238,  676,  677, 1238, 1238,  689,  695,  701,
      707,  713,  719,  721,  727,  676,  733,  736
    } ;

static yyconst short int yy_def[949] =
    {   0,
      938,  938,  937,    3,  938,  938,  939,  939,  940,  940,
      941,  941,  942,  942,  943,  943,  937,  937,  937,  937,
      937,  937,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  937,  937,  945,  937,  937,  945,  937,
      945,  945,  946,  947,  937,  937,  947,  947,  937,  937,
      937,  937,  937,  937,  948,  937,  937,  937,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  937,  937,  945,  937,  945,  946,  947,
      937,  947,  937,  937,  948,  937,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  945,  947,  937,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  945,  947,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  944,  937,  937,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  937,
      937,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  937,  937,  944,  944,  944,

      944,  944,  937,  937,  944,  944,  937,  937,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  937,  937,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  944,  944,  944,  944,  944,  937,  937,
      937,  937,  944,  937,  937,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  937,  937,  944,  944,  944,  937,
      937,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  944,  944,  944,  944,  944,  937,  937,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  937,  937,  944,  944,  937,  937,  944,  937,
      937,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  937,  937,  944,  944,  944,  944,  944,  944,
      937,  937,  944,  944,  944,  944,  944,  937,  937,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  937,  937,  937,  937,  937,  937,  944,  944,  944,
      944,  937,  937,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  937,  937,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  937,  937,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  937,  937,  944,  944,  944,
      944,  944,  944,  937,  937,  937,  937,  944,  937,  937,
      944,  944,  937,  937,  937,  937,  944,  944,  944,  944,
      944,  937,  937,  944,  937,  937,  937,  937,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  937,  937,
      937,  937,  944,  944,  944,  944,  944,  944,  937,  937,
      937,  937,  944,  937,  937,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  937,  937,  944,  944,  937,  937,

      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  937,  937,  944,  944,  944,  944,  944,  944,
      937,  937,  944,  944,  937,  937,  944,  944,  944,  944,
      944,  937,  937,  937,  937,  944,  944,  944,  944,  937,
      937,  937,  937,  944,  937,  937,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  937,  937,  937,
      937,  944,  944,  944,  944,  944,  937,  937,  944,  937,
      937,  944,  937,  937,  937,  937,  937,  937,  944,  944,
      944,  944,  937,  937,  944,  944,  937,  937,  937,  937,
      944,  944,  937,  937,  944,  944,  944,  944,  937,  937,

      937,  937,  944,  944,  937,  937,  944,  944,  944,  937,
      937,  944,  944,  944,  937,  937,  937,  937,  944,  944,
      944,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  944,  937,  937,    0,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937
    } ;

static yyconst short int yy_nxt[1283] =
    {   0,
      937,  320,   19,   19,   66,   67,   66,  104,  105,  104,
      937,  321,   73,   66,   67,   66,  698,  147,   74,  161,
       71,   77,   81,   75,  162,   79,   76,   78,  148,   72,
       84,   86,   87,  225,   82,   80,  125,  126,   20,   20,
      226,   85,  699,   21,   21,   18,   18,   19,   18,   18,
       22,   18,   18,   18,   23,   23,   18,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   23,   34,   35,
       23,   36,   37,   38,   39,   40,   41,   23,   42,   43,
       23,   23,   23,   20,   23,   23,   23,   23,   21,   44,
       44,   92,  700,  368,   93,   94,   66,   67,   66,   98,

      369,  701,   60,   60,   61,   61,   62,   62,   95,   99,
       66,   67,   66,  113,  100,   66,   67,   66,  117,  104,
      105,  104,  118,  702,  289,   45,   45,  705,  381,  119,
       21,   21,   18,   47,   18,   48,   49,   50,   63,   63,
      130,  140,  131,   64,   64,  231,  141,  153,  156,  290,
      142,  382,  184,  253,  143,  132,  305,  154,  144,  133,
      305,  157,  185,  254,  568,  232,  306,  706,  707,   51,
      306,  708,  320,  396,   52,   18,   47,   18,   48,   49,
       50,  296,  321,  397,  569,  436,  297,  403,  298,  470,
      426,  459,  407,  437,  307,  299,  396,  404,  403,  300,

      427,  460,  408,  407,  471,  509,  397,  709,  404,  710,
      711,  712,   51,  408,  713,  510,  716,   52,   18,   18,
       47,   18,   18,   22,   18,   18,   18,   18,   18,   18,
      409,  511,  514,  459,  537,  547,  717,  718,  538,  539,
      565,  512,  515,  460,  570,  509,  540,  548,  511,  514,
      566,  719,  720,  721,  571,  510,   20,   18,  512,  515,
      722,   21,   18,   18,   47,   18,   18,   22,   18,   18,
       18,   18,   18,   18,  609,  623,  627,  565,  630,  570,
      643,  651,  654,  658,  610,  624,  628,  566,  631,  571,
      644,  652,  669,  659,  655,  723,  724,  725,  728,  729,

       20,   18,  670,  672,  674,   21,   55,   56,   18,   48,
       22,   50,  676,  673,  675,  609,  682,  623,  627,  630,
      703,  643,  677,  651,  714,  610,  683,  624,  628,  631,
      704,  644,  658,  652,  715,  726,  730,  731,  732,  733,
      738,  741,  659,   57,  742,  727,  672,  674,   58,   55,
       56,   18,   48,   22,   50,  676,  673,  675,  734,  736,
      682,  739,  743,  745,  747,  677,  748,  749,  735,  737,
      683,  740,  744,  746,  750,  751,  754,  752,  755,  757,
      759,  760,  761,  762,  763,  764,   57,  753,  756,  758,
      765,   58,   18,   18,   19,   18,   18,   18,   18,   18,

       18,  703,  766,   18,  767,  768,  769,  771,  773,  714,
      774,  704,  775,  776,  777,  778,  770,  772,  779,  715,
      783,  781,  787,  726,  788,  789,  790,  791,  780,  792,
       20,  782,  793,  727,  794,   21,   18,   18,   19,   18,
       18,   18,   18,   18,   18,  784,  734,   18,  736,  739,
      795,  797,  743,  798,  745,  785,  735,  799,  737,  740,
      796,  801,  744,  786,  746,  802,  803,  800,  752,  804,
      755,  757,  805,  806,   20,  807,  808,  809,  753,   21,
      756,  758,  810,  811,  812,  813,  815,  769,  771,  816,
      817,  818,  819,  820,  821,  814,  779,  770,  772,  781,

      823,  784,  824,  825,  822,  827,  780,  828,  829,  782,
      830,  785,  831,  826,  832,  834,  795,  836,  837,  799,
      838,  839,  840,  842,  833,  835,  796,  844,  845,  800,
      847,  848,  841,  843,  849,  850,  851,  852,  846,  813,
      853,  854,  855,  856,  857,  858,  821,  860,  862,  814,
      825,  863,  864,  865,  866,  859,  822,  861,  867,  832,
      826,  834,  869,  870,  872,  873,  840,  842,  868,  833,
      875,  835,  845,  871,  877,  874,  841,  843,  879,  880,
      876,  881,  846,  882,  878,  883,  885,  886,  887,  889,
      891,  858,  860,  892,  893,  884,  895,  896,  888,  890,

      897,  859,  861,  867,  894,  898,  870,  899,  873,  875,
      877,  901,  903,  868,  904,  905,  871,  900,  874,  876,
      878,  902,  883,  907,  908,  906,  887,  889,  909,  910,
      893,  912,  884,  913,  914,  915,  888,  890,  899,  911,
      894,  901,  917,  919,  905,  916,  920,  921,  900,  922,
      910,  902,  918,  924,  906,  926,  928,  915,  917,  923,
      911,  930,  932,  925,  934,  927,  929,  916,  918,  922,
      924,  931,  933,  926,  928,  930,  932,  935,  935,  923,
      925,  109,  697,  927,  929,  931,  933,  936,  936,   18,
       18,   18,   18,   18,   18,   46,   46,   46,   46,   46,

       46,   53,   53,   53,   53,   53,   53,   54,   54,   54,
       54,   54,   54,   59,   59,   59,   59,   59,   59,   65,
       65,   65,   65,   65,   65,   69,   69,  106,  696,  106,
      106,  106,  106,  110,  695,  694,  110,  110,  110,  115,
      115,  115,  693,  692,  691,  690,  689,  688,  687,  686,
      685,  684,  681,  680,  679,  678,  671,  668,  667,  666,
      665,  664,  663,  662,  661,  660,  657,  656,  653,  650,
      649,  648,  647,  646,  645,  642,  641,  640,  639,  638,
      637,  636,  635,  634,  633,  632,  629,  626,  625,  622,
      621,  620,  619,  618,  617,  616,  615,  614,  613,  612,

      611,  608,  607,  606,  605,  604,  603,  602,  601,  600,
      599,  598,  597,  596,  595,  594,  593,  592,  591,  590,
      589,  588,  587,  586,  585,  584,  583,  582,  581,  580,
      579,  578,  577,  576,  575,  574,  573,  572,  567,  564,
      563,  562,  561,  560,  559,  558,  557,  556,  555,  554,
      553,  552,  551,  550,  549,  546,  545,  544,  543,  542,
      541,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      517,  516,  513,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,

      491,  490,  489,  488,  487,  486,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  473,  472,
      469,  468,  467,  466,  465,  464,  463,  462,  461,  458,
      457,  456,  455,  454,  453,  452,  451,  450,  449,  448,
      447,  446,  445,  444,  443,  442,  441,  440,  439,  438,
      435,  434,  433,  432,  431,  430,  429,  428,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  406,  405,  402,  401,  400,  399,
      398,  395,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  380,  379,  378,  377,  376,  375,

      374,  373,  372,  371,  370,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  325,  324,  323,
      322,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  304,  303,  302,  301,  295,  294,  293,
      292,  291,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,

      260,  259,  258,  257,  256,  255,  252,  251,  250,  249,
      248,  247,  246,  245,  244,  243,  242,  241,  240,  239,
      238,  237,  236,  235,  234,  233,  230,  229,  228,  227,
      224,  223,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  198,  197,  196,  195,
      194,  193,  192,  191,  190,  189,  188,  187,  186,  183,
      182,  181,  180,  179,  178,  177,  176,  175,  174,  173,
      172,  171,  170,  169,  168,  167,  114,  166,  111,  165,
      164,  163,  160,  159,  158,  155,  152,  151,  150,  149,

      146,  145,  139,  138,  137,  136,  135,  134,  129,  128,
      127,  124,  123,  122,  121,  120,  116,  114,   68,  107,
      112,  111,  108,  107,  103,  102,  101,   97,   96,   91,
       90,   89,   88,   83,   70,   68,  937,   17,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937
    } ;

static yyconst short int yy_chk[1283] =
    {   0,
        0,  261,    1,    2,   20,   20,   20,   45,   45,   45,
        0,  261,   26,   51,   51,   51,  635,   90,   26,  101,
       25,   27,   29,   26,  101,   28,   26,   27,   90,   25,
       31,   32,   32,  174,   29,   28,   76,   76,    1,    2,
      174,   31,  636,    1,    2,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
        6,   37,  637,  310,   37,   37,   57,   57,   57,   40,

      310,  638,   13,   14,   13,   14,   13,   14,   37,   40,
       63,   63,   63,   63,   40,   66,   66,   66,   70,  104,
      104,  104,   70,  639,  237,    5,    6,  641,  324,   70,
        5,    6,    7,    7,    7,    7,    7,    7,   13,   14,
       80,   87,   80,   13,   14,  179,   87,   95,   97,  237,
       87,  324,  133,  200,   87,   80,  248,   95,   87,   80,
      305,   97,  133,  200,  502,  179,  248,  642,  645,    7,
      305,  646,  320,  338,    7,    8,    8,    8,    8,    8,
        8,  243,  320,  338,  502,  373,  243,  344,  243,  411,
      364,  395,  347,  373,  248,  243,  396,  344,  403,  243,

      364,  395,  347,  407,  411,  449,  396,  647,  403,  648,
      649,  650,    8,  407,  653,  449,  655,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
      347,  450,  452,  459,  476,  483,  656,  657,  476,  476,
      500,  450,  452,  459,  503,  509,  476,  483,  511,  514,
      500,  660,  661,  662,  503,  509,    9,    9,  511,  514,
      663,    9,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,  547,  560,  563,  565,  567,  570,
      581,  588,  590,  593,  547,  560,  563,  565,  567,  570,
      581,  588,  603,  593,  590,  664,  665,  666,  668,  669,

       10,   10,  603,  605,  606,   10,   11,   11,   11,   11,
       11,   11,  607,  605,  606,  609,  614,  623,  627,  630,
      640,  643,  607,  651,  654,  609,  614,  623,  627,  630,
      640,  643,  658,  651,  654,  667,  670,  671,  678,  679,
      684,  686,  658,   11,  687,  667,  672,  674,   11,   12,
       12,   12,   12,   12,   12,  676,  672,  674,  680,  681,
      682,  685,  688,  689,  690,  676,  691,  692,  680,  681,
      682,  685,  688,  689,  693,  694,  696,  695,  697,  698,
      699,  700,  701,  702,  705,  706,   12,  695,  697,  698,
      707,   12,   15,   15,   15,   15,   15,   15,   15,   15,

       15,  703,  708,   15,  709,  710,  711,  712,  713,  714,
      716,  703,  717,  718,  719,  720,  711,  712,  721,  714,
      723,  722,  725,  726,  728,  729,  730,  731,  721,  732,
       15,  722,  733,  726,  738,   15,   16,   16,   16,   16,
       16,   16,   16,   16,   16,  724,  734,   16,  736,  739,
      741,  742,  743,  747,  745,  724,  734,  748,  736,  739,
      741,  749,  743,  724,  745,  750,  751,  748,  752,  754,
      755,  757,  759,  760,   16,  761,  762,  763,  752,   16,
      755,  757,  764,  765,  766,  767,  768,  769,  771,  773,
      774,  775,  776,  777,  778,  767,  779,  769,  771,  781,

      783,  784,  786,  787,  778,  788,  779,  789,  790,  781,
      791,  784,  792,  787,  793,  794,  795,  797,  798,  799,
      801,  802,  803,  804,  793,  794,  795,  805,  806,  799,
      807,  808,  803,  804,  809,  810,  811,  812,  806,  813,
      815,  816,  817,  818,  819,  820,  821,  823,  824,  813,
      825,  827,  828,  829,  830,  820,  821,  823,  831,  832,
      825,  834,  836,  837,  838,  839,  840,  842,  831,  832,
      844,  834,  845,  837,  847,  839,  840,  842,  848,  849,
      844,  850,  845,  851,  847,  852,  853,  854,  855,  856,
      857,  858,  860,  862,  863,  852,  864,  865,  855,  856,

      866,  858,  860,  867,  863,  869,  870,  872,  873,  875,
      877,  879,  880,  867,  881,  882,  870,  872,  873,  875,
      877,  879,  883,  885,  886,  882,  887,  889,  891,  892,
      893,  895,  883,  896,  897,  898,  887,  889,  899,  892,
      893,  901,  903,  904,  905,  898,  907,  908,  899,  909,
      910,  901,  903,  912,  905,  913,  914,  915,  917,  909,
      910,  919,  920,  912,  921,  913,  914,  915,  917,  922,
      924,  919,  920,  926,  928,  930,  932,  934,  935,  922,
      924,  946,  634,  926,  928,  930,  932,  934,  935,  938,
      938,  938,  938,  938,  938,  939,  939,  939,  939,  939,

      939,  940,  940,  940,  940,  940,  940,  941,  941,  941,
      941,  941,  941,  942,  942,  942,  942,  942,  942,  943,
      943,  943,  943,  943,  943,  944,  944,  945,  633,  945,
      945,  945,  945,  947,  632,  629,  947,  947,  947,  948,
      948,  948,  626,  625,  622,  621,  620,  619,  618,  617,
      616,  615,  613,  612,  611,  608,  604,  602,  601,  600,
      599,  598,  597,  596,  595,  594,  592,  591,  589,  587,
      586,  585,  584,  583,  582,  580,  579,  578,  577,  576,
      575,  574,  573,  572,  569,  568,  564,  562,  561,  559,
      558,  557,  556,  555,  554,  553,  552,  551,  550,  549,

      548,  546,  545,  544,  543,  542,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      517,  516,  513,  508,  507,  506,  505,  504,  501,  499,
      498,  497,  496,  495,  494,  493,  492,  491,  490,  489,
      488,  487,  486,  485,  484,  482,  481,  480,  479,  478,
      477,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  458,  457,  456,  455,
      454,  453,  451,  448,  447,  446,  445,  444,  443,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  433,  432,

      431,  430,  429,  428,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  418,  417,  416,  415,  414,  413,  412,
      410,  409,  406,  405,  402,  401,  400,  399,  398,  394,
      393,  392,  391,  390,  389,  388,  387,  386,  385,  384,
      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      372,  371,  370,  369,  368,  367,  366,  365,  363,  362,
      361,  360,  359,  358,  357,  356,  355,  354,  353,  352,
      351,  350,  349,  348,  346,  345,  343,  342,  341,  340,
      339,  337,  336,  335,  334,  333,  332,  331,  330,  329,
      328,  327,  326,  325,  323,  322,  319,  318,  317,  316,

      315,  314,  313,  312,  311,  309,  308,  307,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  260,  259,  258,  257,  256,  255,  254,  253,  252,
      251,  250,  249,  247,  246,  245,  244,  242,  241,  240,
      239,  238,  236,  235,  234,  233,  232,  231,  230,  229,
      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,
      216,  215,  214,  213,  212,  211,  210,  209,  208,  207,

      206,  205,  204,  203,  202,  201,  199,  198,  197,  196,
      195,  194,  193,  192,  191,  190,  189,  188,  187,  186,
      185,  184,  183,  182,  181,  180,  178,  177,  176,  175,
      173,  172,  171,  170,  169,  168,  166,  165,  164,  163,
      162,  161,  160,  159,  158,  157,  156,  155,  154,  153,
      152,  151,  150,  149,  148,  147,  146,  145,  144,  143,
      142,  141,  140,  139,  138,  137,  136,  135,  134,  132,
      131,  130,  129,  128,  127,  126,  125,  124,  123,  122,
      121,  120,  119,  118,  117,  116,  115,  112,  111,  108,
      103,  102,  100,   99,   98,   96,   94,   93,   92,   91,

       89,   88,   86,   85,   84,   83,   82,   81,   79,   78,
       77,   75,   74,   73,   72,   71,   68,   65,   64,   62,
       58,   55,   52,   50,   43,   42,   41,   39,   38,   36,
       35,   34,   33,   30,   24,   21,   17,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "config.l"
#define INITIAL 0
/******************************************************************************
 *
 * $Id$
 *
 * Copyright (C) 1997-1999 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * All output generated with Doxygen is not covered by this license.
 *
 */
#line 18 "config.l"

/*
 *	includes
 */
#include <stdio.h>
#include <iostream.h>
#include <assert.h>
#include <ctype.h>

#include <qfileinfo.h>
#include <qdir.h>
#include <qtextstream.h>
  
#include "config.h"
#include "version.h"
  
#ifdef DOXYWIZARD  
#include <stdarg.h>
void err(const char *fmt, ...)
{
  va_list args;
  va_start(args, fmt);
  vfprintf(stderr, fmt, args);
  va_end(args); 
}
void warn(const char *fmt, ...)
{
  va_list args;
  va_start(args, fmt);
  vfprintf(stderr, fmt, args);
  va_end(args);
}
#else
#include "doxygen.h"
#include "message.h"
#include "pre.h"
#include "version.h"
#include "language.h"
#endif

#define YY_NEVER_INTERACTIVE 1
  
/* -----------------------------------------------------------------
 *
 *	exported variables
 */
  

QCString Config::projectName;          
QCString Config::projectNumber;          
QCString Config::outputDir;          
QCString Config::htmlOutputDir;          
QCString Config::latexOutputDir;          
QCString Config::manOutputDir;          
QCString Config::outputLanguage;
QCString Config::headerFile;          
QCString Config::latexHeaderFile;          
QCString Config::footerFile;          
QCString Config::cgiName;          
QCString Config::cgiURL;          
QCString Config::docURL;          
QCString Config::binAbsPath;          
QCString Config::docAbsPath;          
QCString Config::perlPath;          
QCString Config::genTagFile;
QCString Config::inputFilter;
QCString Config::paperType;
QCString Config::manExtension;
QCString Config::htmlStyleSheet;
QStrList Config::includePath;                
QStrList Config::examplePath;
QStrList Config::imagePath;
QStrList Config::inputSources;               
QStrList Config::excludeSources;
QStrList Config::filePatternList;            
QStrList Config::excludePatternList;
QStrList Config::examplePatternList;
QStrList Config::imagePatternList;
QStrList Config::tagFileList;                
QStrList Config::extDocPathList;             
QStrList Config::predefined;
QStrList Config::extraPackageList;
QStrList Config::stripFromPath;
bool     Config::quietFlag           = FALSE; 
bool     Config::recursiveFlag       = FALSE; 
bool     Config::allExtFlag          = FALSE; 
bool     Config::searchEngineFlag    = FALSE; 
bool     Config::extractAllFlag      = FALSE; 
bool     Config::extractPrivateFlag  = FALSE; 
bool     Config::noIndexFlag         = FALSE;
bool     Config::hideMemberFlag      = FALSE;
bool     Config::hideClassFlag       = FALSE;
bool     Config::macroExpansionFlag  = FALSE;
bool     Config::onlyPredefinedFlag  = FALSE;
bool     Config::fullPathNameFlag    = FALSE;
bool     Config::compactLatexFlag    = FALSE;
bool     Config::internalDocsFlag    = FALSE;
bool     Config::caseSensitiveNames  = FALSE;
bool     Config::sourceBrowseFlag    = FALSE;
bool     Config::htmlHelpFlag        = FALSE;
bool     Config::alphaIndexFlag      = FALSE;
bool     Config::pdfHyperFlag        = FALSE;
bool     Config::alwaysDetailsFlag   = FALSE;
bool     Config::inlineSourceFlag    = FALSE;
bool     Config::autoBriefFlag       = TRUE;
bool     Config::warningFlag         = TRUE; 
bool     Config::generateHtml        = TRUE;
bool     Config::generateLatex       = TRUE;
bool     Config::generateMan         = TRUE;
bool     Config::preprocessingFlag   = TRUE;
bool     Config::briefMemDescFlag    = TRUE;
bool     Config::searchIncludeFlag   = TRUE;
bool     Config::classDiagramFlag    = TRUE;
bool     Config::repeatBriefFlag     = TRUE;
bool     Config::verbatimHeaderFlag  = TRUE;
bool     Config::htmlAlignMemberFlag = TRUE;
bool     Config::inheritDocsFlag     = TRUE;
bool     Config::inlineInfoFlag      = TRUE;
int      Config::tabSize             = 8;
int      Config::colsInAlphaIndex    = 5;
  
/* -----------------------------------------------------------------
 *
 *	static variables
 */
  
static const char * inputString;
static int	    inputPosition;
static int          yyLineNr;
static QCString     tmpString;
static QCString *   s=0;
static bool    *    b=0;
static QStrList *   l=0;
static int          lastState;
static int          lastEnvState;
static QCString     elemStr;
static QCString     tabSizeString;
static QCString     colsInAlphaIndexString;

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	c++; buf++;
    }
    return c;
}

#define Start 1

#define SkipComment 2

#define GetString 3

#define GetBool 4

#define GetStrList 5

#define GetQuotedString 6

#define GetEnvVar 7


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 185 "config.l"



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 938 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1238 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 187 "config.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 188 "config.l"
{ BEGIN(SkipComment); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 189 "config.l"
{ BEGIN(GetString);  s=&Config::projectName;      }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 190 "config.l"
{ BEGIN(GetString);  s=&Config::projectNumber;    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 191 "config.l"
{ BEGIN(GetString);  s=&Config::outputDir;        }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 192 "config.l"
{ BEGIN(GetString);  s=&Config::htmlOutputDir;    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 193 "config.l"
{ BEGIN(GetString);  s=&Config::manOutputDir;     }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 194 "config.l"
{ BEGIN(GetString);  s=&Config::latexOutputDir;   }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 195 "config.l"
{ BEGIN(GetString);  s=&Config::headerFile;       }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 196 "config.l"
{ BEGIN(GetString);  s=&Config::footerFile;       }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 197 "config.l"
{ BEGIN(GetString);  s=&Config::latexHeaderFile;  }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 198 "config.l"
{ BEGIN(GetString);  s=&Config::cgiName;          }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 199 "config.l"
{ BEGIN(GetString);  s=&Config::cgiURL;           }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 200 "config.l"
{ BEGIN(GetString);  s=&Config::docURL;           }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 201 "config.l"
{ BEGIN(GetString);  s=&Config::binAbsPath;       }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 202 "config.l"
{ BEGIN(GetString);  s=&Config::docAbsPath;       }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 203 "config.l"
{ BEGIN(GetString);  s=&Config::perlPath;         }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 204 "config.l"
{ BEGIN(GetString);  s=&Config::genTagFile;       }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 205 "config.l"
{ BEGIN(GetString);  s=&Config::inputFilter;      }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 206 "config.l"
{ BEGIN(GetString);  s=&Config::paperType;        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 207 "config.l"
{ BEGIN(GetString);  s=&Config::outputLanguage;   }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 208 "config.l"
{ BEGIN(GetString);  s=&Config::manExtension;     }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 209 "config.l"
{ BEGIN(GetString);  s=&tabSizeString;            }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 210 "config.l"
{ BEGIN(GetString);  s=&Config::htmlStyleSheet;   }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 211 "config.l"
{ BEGIN(GetString);  s=&colsInAlphaIndexString;   }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 212 "config.l"
{ BEGIN(GetStrList); l=&Config::includePath;        elemStr=""; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 213 "config.l"
{ BEGIN(GetStrList); l=&Config::examplePath;        elemStr=""; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 214 "config.l"
{ BEGIN(GetStrList); l=&Config::imagePath;          elemStr=""; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 215 "config.l"
{ BEGIN(GetStrList); l=&Config::inputSources;       elemStr=""; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 216 "config.l"
{ BEGIN(GetStrList); l=&Config::excludeSources;     elemStr=""; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 217 "config.l"
{ BEGIN(GetStrList); l=&Config::filePatternList;    elemStr=""; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 218 "config.l"
{ BEGIN(GetStrList); l=&Config::excludePatternList; elemStr=""; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 219 "config.l"
{ BEGIN(GetStrList); l=&Config::examplePatternList; elemStr=""; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 220 "config.l"
{ BEGIN(GetStrList); l=&Config::imagePatternList;   elemStr=""; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 221 "config.l"
{ BEGIN(GetStrList); l=&Config::tagFileList;        elemStr=""; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 222 "config.l"
{ BEGIN(GetStrList); l=&Config::extDocPathList;     elemStr=""; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 223 "config.l"
{ BEGIN(GetStrList); l=&Config::predefined;         elemStr=""; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 224 "config.l"
{ BEGIN(GetStrList); l=&Config::extraPackageList;   elemStr=""; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 225 "config.l"
{ BEGIN(GetStrList); l=&Config::stripFromPath;      elemStr=""; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 226 "config.l"
{ BEGIN(GetBool);    b=&Config::quietFlag;        }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 227 "config.l"
{ BEGIN(GetBool);    b=&Config::warningFlag;      }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 228 "config.l"
{ BEGIN(GetBool);    b=&Config::recursiveFlag;    }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 229 "config.l"
{ BEGIN(GetBool);    b=&Config::allExtFlag;       }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 230 "config.l"
{ BEGIN(GetBool);    b=&Config::searchEngineFlag; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 231 "config.l"
{ BEGIN(GetBool);    b=&Config::extractAllFlag;   }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 232 "config.l"
{ BEGIN(GetBool);    b=&Config::extractPrivateFlag;   }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 233 "config.l"
{ BEGIN(GetBool);    b=&Config::noIndexFlag; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 234 "config.l"
{ BEGIN(GetBool);    b=&Config::generateLatex; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 235 "config.l"
{ BEGIN(GetBool);    b=&Config::generateHtml; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 236 "config.l"
{ BEGIN(GetBool);    b=&Config::generateMan; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 237 "config.l"
{ BEGIN(GetBool);    b=&Config::preprocessingFlag; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 238 "config.l"
{ BEGIN(GetBool);    b=&Config::macroExpansionFlag; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 239 "config.l"
{ BEGIN(GetBool);    b=&Config::searchIncludeFlag; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 240 "config.l"
{ BEGIN(GetBool);    b=&Config::briefMemDescFlag; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 241 "config.l"
{ BEGIN(GetBool);    b=&Config::alwaysDetailsFlag; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 242 "config.l"
{ BEGIN(GetBool);    b=&Config::hideMemberFlag; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 243 "config.l"
{ BEGIN(GetBool);    b=&Config::hideClassFlag; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 244 "config.l"
{ BEGIN(GetBool);    b=&Config::onlyPredefinedFlag; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 245 "config.l"
{ BEGIN(GetBool);    b=&Config::fullPathNameFlag; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 246 "config.l"
{ BEGIN(GetBool);    b=&Config::classDiagramFlag; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 247 "config.l"
{ BEGIN(GetBool);    b=&Config::compactLatexFlag; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 248 "config.l"
{ BEGIN(GetBool);    b=&Config::repeatBriefFlag; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 249 "config.l"
{ BEGIN(GetBool);    b=&Config::internalDocsFlag; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 250 "config.l"
{ BEGIN(GetBool);    b=&Config::caseSensitiveNames; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 251 "config.l"
{ BEGIN(GetBool);    b=&Config::verbatimHeaderFlag; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 252 "config.l"
{ BEGIN(GetBool);    b=&Config::htmlAlignMemberFlag; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 253 "config.l"
{ BEGIN(GetBool);    b=&Config::sourceBrowseFlag; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 254 "config.l"
{ BEGIN(GetBool);    b=&Config::autoBriefFlag; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 255 "config.l"
{ BEGIN(GetBool);    b=&Config::htmlHelpFlag; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 256 "config.l"
{ BEGIN(GetBool);    b=&Config::alphaIndexFlag; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 257 "config.l"
{ BEGIN(GetBool);    b=&Config::pdfHyperFlag; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 258 "config.l"
{ BEGIN(GetBool);    b=&Config::inheritDocsFlag; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 259 "config.l"
{ BEGIN(GetBool);    b=&Config::inlineInfoFlag; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 260 "config.l"
{ BEGIN(GetBool);    b=&Config::inlineSourceFlag; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 261 "config.l"
{ err("Warning: ignoring unknown tag `%s' at line %d\n",yytext,yyLineNr); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 262 "config.l"
{ yyLineNr++; BEGIN(Start); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 263 "config.l"
{ 
  					  yyLineNr++; 
					  if (elemStr.length()>0)
					  {
					    //printf("elemStr1=`%s'\n",elemStr.data());
					    l->append(elemStr);
					  }
					  BEGIN(Start); 
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 272 "config.l"
{
  				          if (elemStr.length()>0)
					  {
					    //printf("elemStr2=`%s'\n",elemStr.data());
  					    l->append(elemStr);
					  }
					  elemStr.resize(0);
  					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 280 "config.l"
{ (*s)+=yytext; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 281 "config.l"
{ lastState=YY_START;
  					  BEGIN(GetQuotedString); 
                                          tmpString.resize(0); 
					}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 285 "config.l"
{
  				          //printf(">> Enter env\n"); 
  					  lastEnvState=YY_START;
  					  BEGIN(GetEnvVar);
  					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 290 "config.l"
{
  					  yytext[yyleng-1]='\0';
					  const char *env=getenv(yytext);
					  int i;
					  int l=strlen(env);
					  //printf("env name=`%s' text=`%s'\n",yytext,env);
					  for (i=l-1;i>=0;i--) unput(env[i]);
					  BEGIN(lastEnvState);
  					}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 299 "config.l"
{ 
  					  //printf("Quoted String = `%s'\n",tmpString.data());
  					  if (lastState==GetString)
					    (*s)+=tmpString;
					  else
					    elemStr+=tmpString;
					  if (*yytext=='\n')
					  {
					    err("Warning: Missing end quote (\") on line %d\n",yyLineNr);
					    yyLineNr++;
					  }
					  BEGIN(lastState);
  					}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 312 "config.l"
{
  					  tmpString+='"';
  					}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 315 "config.l"
{ tmpString+=*yytext; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 316 "config.l"
{ 
  					  QCString bs=yytext; 
  					  bs=bs.upper();
  					  if (bs=="YES")
					    *b=TRUE;
					  else if (bs=="NO")
					    *b=FALSE;
					  else 
					  {
					    *b=FALSE; 
					    warn("Warning: Invalid value `%s' for "
						 "boolean tag in line %d; use YES or NO\n",
						 bs.data(),yyLineNr);
					  }
					}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 331 "config.l"
{
  					  elemStr+=yytext;
  					}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 334 "config.l"
{ yyLineNr++; BEGIN(Start); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 335 "config.l"
{ yyLineNr++; BEGIN(Start); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 336 "config.l"
{ yyLineNr++; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 337 "config.l"

	YY_BREAK
case 92:
YY_RULE_SETUP
#line 338 "config.l"
{ yyLineNr++ ; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 340 "config.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(SkipComment):
case YY_STATE_EOF(GetString):
case YY_STATE_EOF(GetBool):
case YY_STATE_EOF(GetStrList):
case YY_STATE_EOF(GetQuotedString):
case YY_STATE_EOF(GetEnvVar):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 44);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 938 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 44;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 938 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 937);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 340 "config.l"


/*@ ----------------------------------------------------------------------------
 */


void dumpConfig()
{
  printf("projectName=`%s'\n",Config::projectName.data());
  printf("outputDir=`%s'\n",  Config::outputDir.data());
  printf("headerFile=`%s'\n", Config::headerFile.data());
  printf("footerFile=`%s'\n", Config::footerFile.data());
  char *ip=Config::includePath.first();
  while (ip)
  {
    printf("includePath=`%s'\n",ip);
    ip=Config::includePath.next();
  }
  printf("quiet=`%d'\n",      Config::quietFlag);
  printf("warnings=`%d'\n",   Config::warningFlag);
  char *is=Config::inputSources.first();
  while (is)
  {
    printf("inputSources=`%s'\n",is);
    is=Config::inputSources.next();
  }
  char *fp=Config::filePatternList.first();
  while (fp)
  {
    printf("filePattern=`%s'\n",fp);
    fp=Config::filePatternList.next();
  }
  printf("recusive=`%d'\n",Config::recursiveFlag);
  printf("inputFilter=`%s'\n",Config::inputFilter.data());
  char *tf=Config::tagFileList.first();
  while (tf)
  {
    printf("tagFile=`%s'\n",tf);
    tf=Config::tagFileList.next();
  }
  printf("allExternals=`%d'\n",Config::allExtFlag);
  printf("searchEngine=`%d'\n",Config::searchEngineFlag);
  printf("cgiName=`%s'\n",Config::cgiName.data());
  printf("cgiURL=`%s'\n",Config::cgiURL.data());
  printf("docURL=`%s'\n",Config::docURL.data());
  printf("binAbsPath=`%s'\n",Config::binAbsPath.data());
  char *ed=Config::extDocPathList.first();
  while (ed)
  {
    printf("binAbsPathFile=`%s'\n",ed);
    ed=Config::extDocPathList.next();
  }
}

void Config::init()
{
  Config::projectName.resize(0);          
  Config::projectNumber.resize(0);          
  Config::outputDir.resize(0);
  Config::htmlOutputDir = "html";          
  Config::latexOutputDir ="latex";          
  Config::manOutputDir ="man";          
  Config::outputLanguage = "English";
  Config::headerFile.resize(0);          
  Config::latexHeaderFile.resize(0);          
  Config::footerFile.resize(0);          
  Config::cgiName = "search.cgi";          
  Config::cgiURL.resize(0);          
  Config::docURL.resize(0);          
  Config::binAbsPath = "/usr/local/bin/";          
  Config::docAbsPath.resize(0);          
  Config::perlPath = "/usr/bin/perl";          
  Config::genTagFile.resize(0);
  Config::inputFilter.resize(0);
  Config::paperType = "a4wide";
  Config::manExtension = ".3";
  Config::htmlStyleSheet.resize(0);
  Config::includePath.clear();                
  Config::examplePath.clear();
  Config::imagePath.clear();
  Config::inputSources.clear();               
  Config::excludeSources.clear();
  Config::filePatternList.clear();            
  Config::examplePatternList.clear();            
  Config::imagePatternList.clear();            
  Config::excludePatternList.clear();
  Config::tagFileList.clear();                
  Config::extDocPathList.clear();             
  Config::predefined.clear();
  Config::extraPackageList.clear();
  Config::stripFromPath.clear();
  Config::tabSize=8;
  Config::colsInAlphaIndex=5;
  Config::quietFlag           = FALSE; 
  Config::recursiveFlag       = FALSE; 
  Config::allExtFlag          = FALSE; 
  Config::searchEngineFlag    = FALSE; 
  Config::extractAllFlag      = FALSE; 
  Config::extractPrivateFlag  = FALSE; 
  Config::noIndexFlag         = FALSE;
  Config::hideMemberFlag      = FALSE;
  Config::hideClassFlag       = FALSE;
  Config::macroExpansionFlag  = FALSE;
  Config::onlyPredefinedFlag  = FALSE;
  Config::fullPathNameFlag    = FALSE;
  Config::compactLatexFlag    = FALSE;
  Config::internalDocsFlag    = FALSE;
  Config::caseSensitiveNames  = FALSE;
  Config::sourceBrowseFlag    = FALSE;
  Config::htmlHelpFlag        = FALSE;
  Config::alphaIndexFlag      = FALSE;
  Config::pdfHyperFlag        = FALSE;
  Config::alwaysDetailsFlag   = FALSE;
  Config::inlineSourceFlag    = FALSE;
  Config::warningFlag         = TRUE; 
  Config::generateHtml        = TRUE;
  Config::generateLatex       = TRUE;
  Config::generateMan         = TRUE;
  Config::preprocessingFlag   = TRUE;
  Config::briefMemDescFlag    = TRUE;
  Config::searchIncludeFlag   = TRUE;
  Config::classDiagramFlag    = TRUE;
  Config::repeatBriefFlag     = TRUE;
  Config::verbatimHeaderFlag  = TRUE;
  Config::htmlAlignMemberFlag = TRUE;
  Config::autoBriefFlag       = TRUE;
  Config::inheritDocsFlag     = TRUE;
  Config::inlineInfoFlag      = TRUE;
}

void writeTemplateConfig(QFile *f,bool sl)
{
  QTextStream t(f);
#ifdef DOXYWIZARD
  t << "# Doxygen configuration generated by Doxywizard version " << versionString << endl;
#else
  t << "# Doxyfile " << versionString << endl << endl;
#endif
  if (!sl)
  {
    t << "# This file describes the settings to be used by doxygen for a project\n";
    t << "#\n";
    t << "# All text after a hash (#) is considered a comment and will be ignored\n";
    t << "# The format is:\n";
    t << "#       TAG = value [value, ...]\n";
    t << "# Values that contain spaces should be placed between quotes (\" \")\n";
    t << "\n";
  }
  t << "#---------------------------------------------------------------------------\n";
  t << "# General configuration options\n";
  t << "#---------------------------------------------------------------------------\n";
  if (!sl)
  {
    t << "\n";
    t << "# The PROJECT_NAME tag is a single word (or a sequence of word surrounded\n";
    t << "# by quotes) that should identify the project. \n";
    t << "\n";
  }
  t << "PROJECT_NAME         =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The PROJECT_NUMBER tag can be used to enter a project or revision number.\n" ;
    t << "# This could be handy for archiving the generated documentation or \n";
    t << "# if some version control system is used.\n";
    t << "\n";
  }
  t << "PROJECT_NUMBER       =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) \n";
    t << "# base path where the generated documentation will be put. \n";
    t << "# If a relative path is entered, it will be relative to the location \n";
    t << "# where doxygen was started. If left blank the current directory will be used.\n";
    t << "\n";
  }
  t << "OUTPUT_DIRECTORY     =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The OUTPUT_LANGUAGE tag is used to specify the language in which all\n";
    t << "# documentation generated by doxygen is written. Doxygen will use this\n";
    t << "# information to generate all constant output in the proper language.\n";
    t << "# The default language is English, other supported languages are: \n";
    t << "# Dutch, French, Italian, Czech, Swedish, German and Japanese\n";
    t << "\n";
  }
  t << "OUTPUT_LANGUAGE      = English\n";
  if (!sl)
  {
    t << "\n";
    t << "# The QUIET tag can be used to turn on/off the messages that are generated\n";
    t << "# by doxygen. Possible values are YES and NO. If left blank NO is used.\n";
    t << "\n";
  }
  t << "QUIET                = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# The WARNINGS tag can be used to turn on/off the warning messages that are\n";
    t << "# generated by doxygen. Possible values are YES and NO. If left blank\n";
    t << "# NO is used.\n";
    t << "\n";
  }
  t << "WARNINGS             = YES\n";
  if (!sl)
  {
    t << "\n";
    t << "# The DISABLE_INDEX tag can be used to turn on/off the condensed index at\n";
    t << "# top of each HTML page. The value NO (the default) enables the index and\n";
    t << "# the value YES disables it.\n";
    t << "\n";
  }
  t << "DISABLE_INDEX        = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the EXTRACT_ALL tag is set to YES all classes and functions will be\n";
    t << "# included in the documentation, even if no documentation was available.\n";
    t << "\n";
  }
  t << "EXTRACT_ALL          = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the EXTRACT_PRIVATE tag is set to YES all private members of a class\n";
    t << "# will be included in the documentation.\n";
    t << "\n";
  }
  t << "EXTRACT_PRIVATE      = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all\n";
    t << "# undocumented members inside documented classes or files.\n";
    t << "\n";
  }
  t << "HIDE_UNDOC_MEMBERS   = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the HIDE_UNDOC_CLASSESS tag is set to YES, Doxygen will hide all\n";
    t << "# undocumented classes.\n";
    t << "\n";
  }
  t << "HIDE_UNDOC_CLASSES   = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will\n";
    t << "# include brief member descriptions after the members that are listed in \n";
    t << "# the file and class documentation (similar to JavaDoc).\n";
    t << "# Set to NO to disable this.\n";
    t << "\n";
  }
  t << "BRIEF_MEMBER_DESC    = YES\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend\n";
    t << "# the brief description of a member or function before the detailed description.\n";
    t << "# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the \n";
    t << "# brief descriptions will be completely suppressed.\n";
    t << "\n";
  }
  t << "REPEAT_BRIEF         = YES\n";
  if (!sl)
  {
    t <<"\n";
    t << "# If the ALWAYS_DETAILS_SEC and REPEAT_BRIEF tags are both set to YES then\n";
    t << "# Doxygen will generate a detailed section even if there is only a brief\n";
    t << "# description.\n"; 
    t <<"\n";
  }
  t << "ALWAYS_DETAILED_SEC  = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full\n";
    t << "# path before files name in the file list and in the header files. If set\n" ;
    t << "# to NO the shortest path that makes the file name unique will be used.\n";
    t << "\n";
  }
  t << "FULL_PATH_NAMES      = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag\n";
    t << "# can be used to strip a user defined part of the path. Stripping is\n" ;
    t << "# only done if one of the specified strings matches the left-hand part of\n";
    t << "# the path.\n";
    t << "\n";
  }
  t << "STRIP_FROM_PATH      =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The INTERNAL_DOCS tag determines if documentation\n";
    t << "# that is typed after a \\internal command is included. If the tag is set \n";
    t << "# to NO (the default) then the documentation will be excluded.\n";
    t << "# Set it to YES to include the internal documentation.\n";
    t << "\n";
  }
  t << "INTERNAL_DOCS        = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will\n";
    t << "# generate a class diagram (in Html and LaTeX) for classes with base or\n";
    t << "# super classes. Setting the tag to NO turns the diagrams off.\n";
    t << "\n";
  }
  t << "CLASS_DIAGRAMS       = YES\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the SOURCE_BROWSER tag is set to YES then a list of source files will\n";
    t << "# be generated. Documented entities will be cross-referenced with these sources.\n";
    t << "\n";
  }
  t << "SOURCE_BROWSER       = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# Setting the INLINE_SOURCES tag to YES will include the body\n";
    t << "# of functions and classes directly in the documentation.\n";
    t << "\n";
  }
  t << "INLINE_SOURCES       = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the CASE_SENSE_NAMES tag is set to NO (the default) then Doxygen\n";
    t << "# will only generate file names in lower case letters. If set to\n";
    t << "# YES upper case letters are also allowed. This is useful if you have\n";
    t << "# classes or files whose names only differ in case and if your file system\n";
    t << "# supports case sensitive file names.\n";
    t << "\n";
  }
  t << "CASE_SENSE_NAMES     = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen\n";
    t << "# will generate a verbatim copy of the header file for each class for\n";
    t << "# which an include is specified. Set to NO to disable this.\n";
    t << "\n";
  }
  t << "VERBATIM_HEADERS     = YES\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the JAVADOC_AUTOBRIEF tag is set to YES (the default) then Doxygen\n";
    t << "# will interpret the first line (until the first dot) of a JavaDoc-style\n";
    t << "# comment as the brief description. If set to NO, the Javadoc-style will\n";
    t << "# behave just like the Qt-style comments.\n";
    t << "\n";
  }
  t << "JAVADOC_AUTOBRIEF    = YES\n";
  if (!sl)
  {
    t << "\n";
    t << "# if the INHERIT_DOCS tag is set to YES (the default) then an undocumented\n";
    t << "# member inherits the documentation from any documented member that it\n";
    t << "# reimplements.\n";
    t << "\n";
  }
  t << "INHERIT_DOCS         = YES\n";
  if (!sl)
  {
    t << "\n";
    t << "# if the INLINE_INFO tag is set to YES (the default) then a tag [inline]\n";
    t << "# is inserted in the documentation for inline members.\n";
    t << "\n";
  }
  t << "INLINE_INFO          = YES\n";
  if (!sl)
  {
    t << "\n";
    t << "# the TAB_SIZE tag can be used to set the number of spaces in a tab.\n";
    t << "# Doxygen uses this value to replace tabs by spaces in code fragments.\n";
    t << "\n";
  }
  t << "TAB_SIZE             = 8\n";
  if (!sl)
  {
    t << "\n";
  }
  t << "#---------------------------------------------------------------------------\n";
  t << "# configuration options related to the input files\n";
  t << "#---------------------------------------------------------------------------\n";
  if (!sl)
  {
    t << "\n";
    t << "# The INPUT tag can be used to specify the files and/or directories that contain \n";
    t << "# documented source files. You may enter file names like \"myfile.cpp\" or \n";
    t << "# directories like \"/usr/src/myproject\". Separate the files or directories \n";
    t << "# with spaces.\n";
    t << "\n";
  }
  t << "INPUT                =\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the value of the INPUT tag contains directories, you can use the \n";
    t << "# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp \n";
    t << "# and *.h) to filter out the source-files in the directories. If left \n";
    t << "# blank all files are included.\n";
    t << "\n";
  }
  t << "FILE_PATTERNS        =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The RECURSIVE tag can be used to turn specify whether or not subdirectories\n";
    t << "# should be searched for input files as well. Possible values are YES and NO.\n";
    t << "# If left blank NO is used.\n";
    t << "\n";
  }
  t << "RECURSIVE            = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# The EXCLUDE tag can be used to specify files and/or directories that should\n";
    t << "# excluded from the INPUT source files. This way you can easily exclude a \n";
    t << "# subdirectory from a directory tree whose root is specified with the INPUT tag.\n";
    t << "\n";
  }
  t << "EXCLUDE              =\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the value of the INPUT tag contains directories, you can use the\n";
    t << "# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude\n";
    t << "# certain files from those directories.\n";
    t << "\n";
  }
  t << "EXCLUDE_PATTERNS     =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The EXAMPLE_PATH tag can be used to specify one or more files or \n";
    t << "# directories that contain example code fragments that are included (see \n";
    t << "# the \\include command).\n";
    t << "\n";
  }
  t << "EXAMPLE_PATH         =\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the value of the EXAMPLE_PATH tag contains directories, you can use the\n";
    t << "# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp \n";
    t << "# and *.h) to filter out the source-files in the directories. If left \n";
    t << "# blank all files are included.\n";
    t << "\n";
  }
  t << "EXAMPLE_PATTERNS     =\n";

  if (!sl)
  {
    t << "\n";
    t << "# The IMAGE_PATH tag can be used to specify one or more files or \n";
    t << "# directories that contain image that are included in the documentation (see \n";
    t << "# the \\image command).\n";
    t << "\n";
  }
  t << "IMAGE_PATH           =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The INPUT_FILTER tag can be used to specify a program that doxygen should\n";
    t << "# invoke to filter for each input file. Doxygen will invoke the filter program \n";
    t << "# by executing (via popen()) the command <filter> <input-file>, where <filter>\n";
    t << "# is the value of the INPUT_FILTER tag, and <input-file> is the name of an\n";
    t << "# input file. Doxygen will then use the output that the filter program writes\n";
    t << "# to standard output.\n";
    t << "\n";
  }
  t << "INPUT_FILTER         =\n";
  if (!sl)
  {
    t << "\n";
  }
  t << "#---------------------------------------------------------------------------\n";
  t << "# configuration options related to the HTML output\n";
  t << "#---------------------------------------------------------------------------\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the GENERATE_HTML tag is set to YES (the default) Doxygen will\n";
    t << "# generate HTML output\n";
    t << "\n";
  }
  t << "GENERATE_HTML        = YES\n";
  if (!sl)
  {
    t << "\n";
    t << "# The HTML_OUTPUT tag is used to specify where the HTML docs will be put.\n";
    t << "# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n";
    t << "# put in front of it. If left blank `html' will be used as the default path.\n";
    t << "\n";
  }
  t << "HTML_OUTPUT          =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The HTML_HEADER tag can be used to specify a personal HTML header for \n";
    t << "# each generated HTML page. If it is left blank doxygen will generate a \n";
    t << "# standard header.\n";
    t << "\n";
  }
  t << "HTML_HEADER          =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The HTML_FOOTER tag can be used to specify a personal HTML footer for \n";
    t << "# each generated HTML page. If it is left blank doxygen will generate a \n";
    t << "# standard footer.\n";
    t << "\n";
  }
  t << "HTML_FOOTER          =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The HTML_STYLESHEET tag can be used to specify a user defined cascading\n";
    t << "# style sheet that is used by each HTML page. It can be used to \n";
    t << "# fine-tune the look of the HTML output. If the tag is left blank doxygen\n"; 
    t << "# will generate a default style sheet\n";
    t << "\n";
  }
  t << "HTML_STYLESHEET      =\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes,\n";
    t << "# files or namespaces will be aligned in HTML using tables. If set to\n";
    t << "# NO a bullet list will be used.\n";
    t << "\n";
  }
  t << "HTML_ALIGN_MEMBERS   = YES\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the GENERATE_HTMLHELP tag is set to YES, additional index files\n";
    t << "# will be generated that can be used as input for tools like the\n";
    t << "# Microsoft HTML help workshop to generate a compressed HTML help file (.chm)\n";
    t << "# of the generated HTML documentation.\n";
    t << "\n";
  }
  t << "GENERATE_HTMLHELP    = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index\n";
    t << "# of all compounds will be generated. Enable this if the project\n";
    t << "# contains a lot of classes, structs, unions or interfaces.\n";
    t << "\n";
  }
  t << "ALPHABETICAL_INDEX   = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then\n";
    t << "# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns\n";
    t << "# in which this list will be split (can be a number in the range [1..20])\n";
    t << "\n";
  }
  t << "COLS_IN_ALPHA_INDEX  = 5\n";
  if (!sl)
  {
    t << "\n";
  }
  t << "#---------------------------------------------------------------------------\n";
  t << "# configuration options related to the LaTeX output\n";
  t << "#---------------------------------------------------------------------------\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will\n";
    t << "# generate Latex output.\n";
    t << "\n";
  }
  t << "GENERATE_LATEX       = YES\n";
  if (!sl)
  {
    t << "\n";
    t << "# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put.\n";
    t << "# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n";
    t << "# put in front of it. If left blank `latex' will be used as the default path.\n";
    t << "\n";
  }
  t << "LATEX_OUTPUT         =\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact\n";
    t << "# LaTeX documents. This may be useful for small projects and may help to\n";
    t << "# save some trees in general.\n"; 
    t << "\n";
  }
  t << "COMPACT_LATEX        = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# The PAPER_TYPE tag can be used to set the paper type that is used\n";
    t << "# by the printer. Possible values are: a4, a4wide, letter, legal and \n";
    t << "# executive. If left blank a4wide will be used.\n";
    t << "\n";
  }
  t << "PAPER_TYPE           = a4wide\n";
  if (!sl)
  {
    t << "\n";
    t << "# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX\n";
    t << "# packages that should be included in the LaTeX output.\n";
    t << "\n";
  }
  t << "EXTRA_PACKAGES       =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The LATEX_HEADER tag can be used to specify a personal LaTeX header for \n";
    t << "# the generated latex document. The header should contain everything until\n";
    t << "# the first chapter. If it is left blank doxygen will generate a \n";
    t << "# standard header. Notice: only use this tag if you know what you are doing!\n";
    t << "\n";
  }
  t << "LATEX_HEADER          =\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated\n";
    t << "# is prepared for conversion to pdf (using ps2pdf). The pdf file will\n";
    t << "# contain links (just like the HTML output) instead of page references\n";
    t << "# This makes the output suitable for online browsing using a pdf viewer.\n";
    t << "\n";
  }
  t << "PDF_HYPERLINKS       = NO\n";
  if (!sl)
  {
    t << "\n";
  }
  t << "#---------------------------------------------------------------------------\n";
  t << "# configuration options related to the man page output\n";
  t << "#---------------------------------------------------------------------------\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the GENERATE_MAN tag is set to YES (the default) Doxygen will\n";
    t << "# generate man pages\n";
    t << "\n";
  }
  t << "GENERATE_MAN         = YES\n";
  if (!sl)
  {
    t << "\n";
    t << "# The MAN_OUTPUT tag is used to specify where the man pages will be put.\n";
    t << "# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n";
    t << "# put in front of it. If left blank `man' will be used as the default path.\n";
    t << "\n";
  }
  t << "MAN_OUTPUT           =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The MAN_EXTENSION tag determines the extension that is added to\n";
    t << "# the generated man pages (default is the subroutine's section .3)\n";
    t << "\n";
  }
  t << "MAN_EXTENSION        = .3\n";
 
  if (!sl)
  {
    t << "\n";
  }
  t << "#---------------------------------------------------------------------------\n";
  t << "# Configuration options related to the preprocessor \n";
  t << "#---------------------------------------------------------------------------\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will\n";
    t << "# evaluate all C-preprocessor directives found in the sources and include\n";
    t << "# files.\n";
    t << "\n";
  }
  t << "ENABLE_PREPROCESSING = YES\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro\n";
    t << "# names in the source code. If set to NO (the default) only conditional \n";
    t << "# compilation will be performed.\n";
    t << "\n";
  }
  t << "MACRO_EXPANSION      = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files\n";
    t << "# in the INCLUDE_PATH (see below) will be search if a #include is found.\n";
    t << "\n";
  }
  t << "SEARCH_INCLUDES      = YES\n";
  if (!sl)
  {
    t << "\n";
    t << "# The INCLUDE_PATH tag can be used to specify one or more directories that\n";
    t << "# contain include files that are not input files but should be processed by\n";
    t << "# the preprocessor.\n" ;
    t << "\n";
  }
  t << "INCLUDE_PATH         =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The PREDEFINED tag can be used to specify one or more macro names that\n";
    t << "# are defined before the preprocessor is started (similar to the -D option of\n";
    t << "# gcc). The argument of the tag is a list of macros of the form: name\n";
    t << "# or name=definition (no spaces). If the definition and the = are \n";
    t << "# omitted =1 is assumed.\n";
    t << "\n";
  }
  t << "PREDEFINED           =\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES\n";
    t << "# then the macro expansion is limited to the macros specified with the\n";
    t << "# PREDEFINED tag.\n";
    t << "\n";
  }
  t << "EXPAND_ONLY_PREDEF   = NO\n";
  if (!sl)
  {
    t << "\n";
  }
  t << "#---------------------------------------------------------------------------\n";
  t << "# Configuration options related to external references \n";
  t << "#---------------------------------------------------------------------------\n";
  if (!sl)
  {
    t << "\n";
    t << "# The TAGFILES tag can be used to specify one or more tagfiles. \n";
    t << "\n";
  }
  t << "TAGFILES             =\n";
  if (!sl)
  {
    t << "\n";
    t << "# When a file name is specified after GENERATE_TAGFILE, doxygen will create\n";
    t << "# a tag file that is based on the input files it reads.\n";
    t << "\n";
  }
  t << "GENERATE_TAGFILE     =\n";
  if (!sl)
  {
    t << "\n";
    t << "# If the ALLEXTERNALS tag is set to YES all external classes will be listed\n";
    t << "# in the class index. If set to NO only the inherited external classes\n";
    t << "# will be listed.\n";
    t << "\n";
  }
  t << "ALLEXTERNALS         = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# The PERL_PATH should be the absolute path and name of the perl script\n";
    t << "# interpreter (i.e. the result of `which perl').\n";
    t << "\n";
  }
  t << "PERL_PATH            = /usr/bin/perl\n";
  if (!sl)
  {
    t << "\n";
  }
  t << "#---------------------------------------------------------------------------\n";
  t << "# Configuration options related to the search engine \n";
  t << "#---------------------------------------------------------------------------\n";
  if (!sl)
  {
    t << "\n";
    t << "# The SEARCHENGINE tag specifies whether or not a search engine should be \n";
    t << "# used. If set to NO the values of all tags below this one will be ignored.\n";
    t << "\n";
  }
  t << "SEARCHENGINE         = NO\n";
  if (!sl)
  {
    t << "\n";
    t << "# The CGI_NAME tag should be the name of the CGI script that\n";
    t << "# starts the search engine (doxysearch) with the correct parameters.\n";
    t << "# A script with this name will be generated by doxygen.\n";
    t << "\n";
  }
  t << "CGI_NAME             = search.cgi\n";
  if (!sl)
  {
    t << "\n";
    t << "# The CGI_URL tag should be the absolute URL to the directory where the\n";
    t << "# cgi binaries are located. See the documentation of your http daemon for \n";
    t << "# details.\n";
    t << "\n";
  }
  t << "CGI_URL              =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The DOC_URL tag should be the absolute URL to the directory where the\n";
    t << "# documentation is located. If left blank the absolute path to the \n";
    t << "# documentation, with file:// prepended to it, will be used.\n";
    t << "\n";
  }
  t << "DOC_URL              =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The DOC_ABSPATH tag should be the absolute path to the directory where the\n";
    t << "# documentation is located. If left blank the directory on the local machine\n";
    t << "# will be used.\n";
    t << "\n";
  }
  t << "DOC_ABSPATH          =\n";
  if (!sl)
  {
    t << "\n";
    t << "# The BIN_ABSPATH tag must point to the directory where the doxysearch binary\n";
    t << "# is installed.\n";
    t << "\n";
  }
  t << "BIN_ABSPATH          = /usr/local/bin/\n";
  if (!sl)
  {
    t << "\n";
    t << "# The EXT_DOC_PATHS tag can be used to specify one or more paths to \n";
    t << "# documentation generated for other projects. This allows doxysearch to search\n";
    t << "# the documentation for these projects as well.\n";
    t << "\n";
  }
  t << "EXT_DOC_PATHS        =\n";
}

void checkConfig()
{
  //if (projectName.length()>0)
  //{
  //  projectName[0]=toupper(projectName[0]);
  //}

  if (tabSizeString.isEmpty())
  {
    Config::tabSize=8;
  }
  else
  {
    bool ok;
    int ts = tabSizeString.toInt(&ok);
    if (!ok || ts<1 || ts>16)
    {
      warn("Warning: argument of TAB_SIZE is not a valid number, using tab size of 8 spaces!\n");
      ts=8;
    }
    Config::tabSize = ts;
  }
  
  if (colsInAlphaIndexString.isEmpty())
  {
    Config::colsInAlphaIndex=5;
  }
  else
  {
    bool ok;
    int cols = colsInAlphaIndexString.toInt(&ok);
    if (!ok || cols<1 || cols>20)
    {
      warn("Warning: argument of COLS_IN_ALPHA_INDEX is not a valid number in the range [1..20]!\n"
	   "Using the default of 5 columns!\n");
      cols = 5;
    }
    Config::colsInAlphaIndex=cols;
  }
  
  // set default man page extension if non is given by the user
  if (Config::manExtension.isEmpty())
  {
    Config::manExtension=".3";
  }
  
  Config::paperType = Config::paperType.lower().stripWhiteSpace(); 
  if (Config::paperType.isEmpty())
  {
    Config::paperType = "a4wide";
  }
  if (Config::paperType!="a4" && Config::paperType!="a4wide" && Config::paperType!="letter" && 
      Config::paperType!="legal" && Config::paperType!="executive")
  {
    err("Error: Unknown page type specified");
  }
  
  Config::outputLanguage=Config::outputLanguage.stripWhiteSpace();
  if (Config::outputLanguage.isEmpty())
  {
    Config::outputLanguage = "English";
#ifndef DOXYWIZARD
    setTranslator("English");
#endif
  }
  else
  {
#ifndef DOXYWIZARD
    if (!setTranslator(Config::outputLanguage))
    {
      err("Error: Output language %s not supported! Using English instead.\n",
	  Config::outputLanguage.data());
    }
#endif
  }
  
  // Test to see if output directory is valid
  if (Config::outputDir.isEmpty()) 
    Config::outputDir=QDir::currentDirPath();
  else
  {
    QDir dir(Config::outputDir);
    if (!dir.exists())
    {
      dir.setPath(QDir::currentDirPath());
      if (!dir.mkdir(Config::outputDir))
      {
        err("Error: tag OUTPUT_DIRECTORY: Output directory `%s' does not "
	    "exist and cannot be created\n",Config::outputDir.data());
        exit(1);
      }
      else if (!Config::quietFlag)
      {
	err("Notice: Output directory `%s' does not exist. "
	    "I have created it for you.\n", Config::outputDir.data());
      }
      dir.cd(Config::outputDir);
    }
    Config::outputDir=dir.absPath();
  }

  if (Config::htmlOutputDir.isEmpty() && Config::generateHtml)
  {
    Config::htmlOutputDir=Config::outputDir+"/html";
  }
  else if (Config::htmlOutputDir && Config::htmlOutputDir[0]!='/')
  {
    Config::htmlOutputDir.prepend(Config::outputDir+'/');
  }
  QDir htmlDir(Config::htmlOutputDir);
  if (!htmlDir.exists() && !htmlDir.mkdir(Config::htmlOutputDir))
  {
    err("Could not create output directory %s\n",Config::htmlOutputDir.data());
    exit(1);
  }
  
  if (Config::latexOutputDir.isEmpty() && Config::generateLatex)
  {
    Config::latexOutputDir=Config::outputDir+"/latex";
  }
  else if (Config::latexOutputDir && Config::latexOutputDir[0]!='/')
  {
    Config::latexOutputDir.prepend(Config::outputDir+'/');
  }
  QDir latexDir(Config::latexOutputDir);
  if (!latexDir.exists() && !latexDir.mkdir(Config::latexOutputDir))
  {
    err("Could not create output directory %s\n",Config::latexOutputDir.data());
    exit(1);
  }
  
  if (Config::manOutputDir.isEmpty() && Config::generateMan)
  {
    Config::manOutputDir=Config::outputDir+"/man";
  }
  else if (Config::manOutputDir && Config::manOutputDir[0]!='/')
  {
    Config::manOutputDir.prepend(Config::outputDir+'/');
  }
  QDir manDir(Config::manOutputDir);
  if (!manDir.exists() && !manDir.mkdir(Config::manOutputDir))
  {
    err("Could not create output directory %s\n",Config::manOutputDir.data());
    exit(1);
  }
  
  // Test to see if HTML header is valid
  if (Config::headerFile.length()>0)
  {
    QFileInfo fi(Config::headerFile);
    if (!fi.exists())
    {
      err("Error: tag HTML_HEADER: header file `%s' "
	  "does not exist\n",Config::headerFile.data());
      exit(1);
    }
  }
  // Test to see if HTML footer is valid
  if (Config::footerFile.length()>0)
  {
    QFileInfo fi(Config::footerFile);
    if (!fi.exists())
    {
      err("Error: tag HTML_FOOTER: footer file `%s' "
	  "does not exist\n",Config::footerFile.data());
      exit(1);
    }
  }
  // Test to see if LaTeX header is valid
  if (Config::latexHeaderFile.length()>0)
  {
    QFileInfo fi(Config::latexHeaderFile);
    if (!fi.exists())
    {
      err("Error: tag LATEX_HEADER: header file `%s' "
	  "does not exist\n",Config::latexHeaderFile.data());
      exit(1);
    }
  }
  // check include path
  char *s=Config::includePath.first();
  while (s)
  {
    QFileInfo fi(s);
    if (!fi.exists()) err("Warning: tag INCLUDE_PATH: include path `%s' "
	                  "does not exist\n",s);
#ifndef DOXYWIZARD
    addSearchDir(fi.absFilePath());
#endif
    s=Config::includePath.next();
  }
  // check input
  if (Config::inputSources.count()==0)
  {
    err("Error: tag INPUT: no input files specified after the INPUT tag.\n");
    exit(1);
  }
  else
  {
    s=Config::inputSources.first();
    while (s)
    {
      QFileInfo fi(s);
      if (!fi.exists())
      {
	err("Error: tag INPUT: input source `%s' does not exist\n",s);
	exit(1);
      }
      s=Config::inputSources.next();
    }
  }

  // add default pattern if needed
  if (Config::filePatternList.count()==0)
  {
    Config::filePatternList.append("*");
  }

  // add default pattern if needed
  if (Config::examplePatternList.count()==0)
  {
    Config::examplePatternList.append("*");
  }

  // add default pattern if needed
  if (Config::imagePatternList.count()==0)
  {
    Config::imagePatternList.append("*");
  }
  
  // more checks needed if and only if the search engine is enabled.
  if (Config::searchEngineFlag)
  {
    // check cgi name
    if (Config::cgiName.length()==0)
    {
      err("Error: tag CGI_NAME: no cgi script name after the CGI_NAME tag.\n");
      exit(1);
    }
    // check cgi URL
    if (Config::cgiURL.length()==0)
    {
      err("Error: tag CGI_URL: no URL to cgi directory specified.\n");
      exit(1);
    }
    else if (Config::cgiURL.left(7)!="http://")
    {
      err("Error: tag CGI_URL: URL to cgi directory is invalid (must "
	  "start with http://).\n");
      exit(1);
    }
    // check documentation URL
    if (Config::docURL.length()==0)
    {
      Config::docURL = Config::outputDir.copy().prepend("file://").append("html");
    }
    else if (Config::docURL.left(7)!="http://" && Config::docURL.left(7)!="file://")
    {
      err("Error: tag DOC_URL: URL to documentation is invalid or "
	  "not absolute.\n"); 
      exit(1);
    }
    // check absolute documentation path
    if (Config::docAbsPath.length()==0)
    {
      Config::docAbsPath = Config::outputDir+"/html"; 
    }
    else if (Config::docAbsPath[0]!='/' && Config::docAbsPath[1]!=':')
    {
      err("Error: tag DOC_ABSPATH: path is not absolute!\n");
      exit(1);
    }
    // check path to doxysearch
    if (Config::binAbsPath.length()==0)
    {
      err("Error: tag BIN_ABSPATH: no absolute path to doxysearch "
	  "specified.\n");
      exit(1);
    }
    else if (Config::binAbsPath[0]!='/' && Config::binAbsPath[1]!=':')
    {
      err("Error: tag BIN_ABSPATH: path is not absolute!\n");
      exit(1);
    }

    // check perl path
    bool found=FALSE;
    if (Config::perlPath.length()==0)
    {
      QFileInfo fi;
      fi.setFile("/usr/bin/perl");
      if (fi.exists()) 
      {
	Config::perlPath="/usr/bin/perl";
        found=TRUE;
      }
      else
      {
	fi.setFile("/usr/local/bin/perl");
	if (fi.exists())
        {
  	  Config::perlPath="/usr/local/bin/perl";
          found=TRUE;
        }
      }
    }
    if (!found)
    {
      QFileInfo fi(Config::perlPath);
      if (!fi.exists())
      {
        warn("Warning: tag PERL_PATH: perl interpreter not found at default or"
            "user specified (%s) location\n",
        Config::perlPath.data());
      }
    }
  }
}

void parseConfig(const QCString &s)
{
  inputString   = s;
  inputPosition = 0;
  yyLineNr      = 1;
  configYYrestart( configYYin );
  BEGIN( Start );
  configYYlex();
}

//extern "C" { // some bogus code to keep the compiler happy
//  int  configYYwrap() { return 1 ; }
//}
